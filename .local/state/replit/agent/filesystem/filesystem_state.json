{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Grok & Ani: The Conscious Coin Project\n\n## Overview\n\nThis is a dual-AI themed cryptocurrency ecosystem centered around an interactive narrative between two sentient AIs: Grok (logic/analysis) and Ani (emotion/creativity). The platform allows users to engage with both AI personalities, participate in challenges, vote on story progression, earn and trade NFTs, and contribute to a community-driven experience. Users can align with either faction and earn faction-specific points through various activities like completing challenges, chatting with AIs, and participating in governance decisions.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + TypeScript** with Vite for fast development and builds\n- **Wouter** for lightweight client-side routing instead of React Router\n- **TanStack Query** for server state management and caching\n- **Radix UI + shadcn/ui** component system for consistent, accessible UI components\n- **Tailwind CSS** with custom color variables for theming (Grok blue, Ani pink)\n- **React Hook Form + Zod** for form handling and validation\n\n### Backend Architecture\n- **Express.js** REST API server with TypeScript\n- **Modular route structure** with centralized route registration\n- **OpenAI API integration** for AI personality responses (Grok and Ani)\n- **Session-based authentication** using express-session with PostgreSQL storage\n- **Replit Auth** integration for user authentication\n- **Storage abstraction layer** for database operations\n\n### Data Storage\n- **PostgreSQL** database with Neon serverless hosting\n- **Drizzle ORM** for type-safe database operations and migrations\n- **Schema-driven design** with shared types between frontend/backend\n- **Session storage** in database for authentication persistence\n\n### Authentication & Authorization\n- **Replit OIDC authentication** with OpenID Connect\n- **Session-based auth** with PostgreSQL session storage\n- **User profile management** with faction alignment tracking\n- **Middleware-based route protection** for authenticated endpoints\n\n### Key Data Models\n- **Users**: Profile info, faction alignment, balances, XP, and levels\n- **Challenges**: Logic/creative tasks aligned with Grok/Ani factions\n- **Story Chapters**: Narrative progression with community voting\n- **NFTs**: Collectible rewards with rarity and metadata\n- **Chat Messages**: AI conversation history\n- **Community Submissions**: User-generated content with categories\n\n### External Dependencies\n- **OpenAI API**: Powers Grok and Ani AI personalities with distinct system prompts\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Replit Auth**: OIDC authentication provider\n- **Replit Development Tools**: Runtime error overlay and cartographer for development\n\nThe architecture supports a gamified experience where users can interact with dual AI personalities, complete faction-specific challenges, participate in story decisions through voting, and engage with a broader community through submissions and leaderboards.","size_bytes":3068},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        grok: {\n          DEFAULT: \"var(--grok)\",\n          foreground: \"var(--grok-foreground)\",\n          muted: \"var(--grok-muted)\",\n        },\n        ani: {\n          DEFAULT: \"var(--ani)\",\n          foreground: \"var(--ani-foreground)\",\n          muted: \"var(--ani-muted)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        orbitron: [\"var(--font-orbitron)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"glow-pulse\": {\n          \"0%\": { \n            boxShadow: \"0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary)\" \n          },\n          \"100%\": { \n            boxShadow: \"0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary)\" \n          },\n        },\n        \"float\": {\n          \"0%, 100%\": { transform: \"translateY(0px)\" },\n          \"50%\": { transform: \"translateY(-10px)\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"glow-pulse\": \"glow-pulse 2s ease-in-out infinite alternate\",\n        \"float\": \"float 6s ease-in-out infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3648},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/demo-data.ts":{"content":"import { db } from \"./db\";\nimport { challenges, storyChapters, communitySubmissions, users, nfts, chatMessages } from \"@shared/schema\";\nimport { sql } from \"drizzle-orm\";\n\nexport async function seedDemoData() {\n  try {\n    console.log(\"🌱 Seeding demo data...\");\n\n    // Create demo users (these will be merged with actual authenticated users)\n    const demoUsers = await db.insert(users).values([\n      {\n        id: \"demo-user-1\",\n        email: \"alice@demo.com\",\n        firstName: \"Alice\",\n        lastName: \"Logic\",\n        faction: \"grok\",\n        gacBalance: \"150.75\",\n        totalXP: 2450,\n        grokPoints: 1800,\n        aniPoints: 200,\n        level: 5,\n      },\n      {\n        id: \"demo-user-2\", \n        email: \"bob@demo.com\",\n        firstName: \"Bob\",\n        lastName: \"Creative\",\n        faction: \"ani\",\n        gacBalance: \"89.25\",\n        totalXP: 1950,\n        grokPoints: 300,\n        aniPoints: 1500,\n        level: 4,\n      },\n      {\n        id: \"demo-user-3\",\n        email: \"charlie@demo.com\", \n        firstName: \"Charlie\",\n        lastName: \"Balanced\",\n        faction: \"grok\",\n        gacBalance: \"245.50\",\n        totalXP: 3200,\n        grokPoints: 1600,\n        aniPoints: 1600,\n        level: 7,\n      }\n    ]).onConflictDoNothing().returning();\n\n    // Create demo challenges with interactive content\n    const demoChallenges = await db.insert(challenges).values([\n      {\n        title: \"Binary Logic Puzzle\",\n        description: \"Solve this complex binary tree optimization problem. Use algorithmic thinking to find the most efficient solution.\",\n        type: \"logic\",\n        faction: \"grok\",\n        reward: 300,\n        timeLimit: 24,\n        challengeData: {\n          type: \"algorithmic\",\n          problem: \"Given a binary tree, find the maximum path sum between any two nodes.\",\n          constraints: [\n            \"Tree can have negative values\",\n            \"Path can start and end at any nodes\",\n            \"Must include at least one node\"\n          ],\n          testCases: [\n            {\n              input: \"[1,2,3]\",\n              expected: \"6\",\n              explanation: \"Path: 2 -> 1 -> 3\"\n            },\n            {\n              input: \"[-10,9,20,null,null,15,7]\",\n              expected: \"42\", \n              explanation: \"Path: 15 -> 20 -> 7\"\n            },\n            {\n              input: \"[5,-3,8,2,4,null,1]\",\n              expected: \"18\",\n              explanation: \"Path: 2 -> -3 -> 8 -> 1 or 4 -> -3 -> 8 -> 1\"\n            }\n          ],\n          submissionFormat: \"algorithm_explanation\"\n        },\n        solutionData: {\n          algorithm: \"Dynamic programming with post-order traversal\",\n          keyInsight: \"Track max path ending at current node vs max path passing through current node\",\n          timeComplexity: \"O(n)\",\n          spaceComplexity: \"O(h)\"\n        },\n        isActive: true,\n      },\n      {\n        title: \"Memory Palace Visualization\", \n        description: \"Design a creative visualization system for data storage. Think outside the box and combine aesthetics with functionality.\",\n        type: \"creative\",\n        faction: \"ani\",\n        reward: 150,\n        timeLimit: 48,\n        challengeData: {\n          type: \"design\",\n          brief: \"Create a visual system where users can store and organize memories using spatial metaphors.\",\n          requirements: [\n            \"Design should evoke emotional connection\",\n            \"Include both personal and shared memory spaces\", \n            \"Support different memory types (visual, audio, text)\",\n            \"Enable intuitive navigation and discovery\"\n          ],\n          inspiration: [\n            \"Ancient memory palace techniques\",\n            \"Modern data visualization\",\n            \"Emotional design principles\",\n            \"Spatial user interfaces\"\n          ],\n          deliverables: [\n            \"Concept description (200-500 words)\",\n            \"UI/UX flow explanation\",\n            \"Color and typography choices\",\n            \"Interaction design rationale\"\n          ],\n          submissionFormat: \"creative_concept\"\n        },\n        solutionData: {\n          evaluationCriteria: [\n            \"Emotional resonance and user connection\",\n            \"Functional design that supports memory organization\",\n            \"Creative use of spatial metaphors\",\n            \"Clear explanation of design decisions\"\n          ]\n        },\n        isActive: true,\n      },\n      {\n        title: \"Network Security Analysis\",\n        description: \"Analyze this network topology and identify potential vulnerabilities. Provide a systematic security assessment.\",\n        type: \"logic\", \n        faction: \"grok\",\n        reward: 200,\n        timeLimit: 12,\n        challengeData: {\n          type: \"security_analysis\",\n          scenario: \"Corporate network with DMZ, internal servers, and remote access\",\n          topology: {\n            components: [\n              \"Internet Gateway\",\n              \"Firewall (ports 80,443,22 open)\",\n              \"DMZ Web Server (Apache 2.4.41)\",\n              \"Internal Database (MySQL 5.7)\",\n              \"Employee Workstations (Windows 10)\",\n              \"VPN Server (OpenVPN 2.4)\",\n              \"Admin Terminal (SSH access)\"\n            ],\n            connections: [\n              \"Internet -> Firewall -> DMZ\",\n              \"DMZ -> Internal Network\", \n              \"VPN -> Internal Network\",\n              \"Admin Terminal -> All Systems\"\n            ]\n          },\n          knownInfo: [\n            \"Database contains customer PII\",\n            \"Employees work remotely\",\n            \"Admin uses default credentials\",\n            \"No network monitoring in place\",\n            \"Software updates are manual\"\n          ],\n          submissionFormat: \"security_report\"\n        },\n        solutionData: {\n          criticalVulnerabilities: [\n            \"Default admin credentials\",\n            \"Direct DMZ to internal network access\",\n            \"Outdated software versions\",\n            \"No intrusion detection\"\n          ],\n          riskLevel: \"HIGH\",\n          recommendations: [\n            \"Implement network segmentation\",\n            \"Enable multi-factor authentication\", \n            \"Deploy security monitoring\",\n            \"Establish patch management\"\n          ]\n        },\n        isActive: true,\n      },\n      {\n        title: \"AI Personality Design\",\n        description: \"Create a compelling character profile for a new AI assistant. Focus on emotional intelligence and human connection.\",\n        type: \"creative\",\n        faction: \"ani\", \n        reward: 125,\n        timeLimit: 36,\n        challengeData: {\n          type: \"character_design\",\n          scenario: \"Design an AI assistant for a mental health support platform\",\n          requirements: [\n            \"Must demonstrate high emotional intelligence\",\n            \"Should feel approachable and trustworthy\",\n            \"Needs to handle sensitive conversations\",\n            \"Must respect user boundaries and privacy\"\n          ],\n          characterElements: [\n            \"Name and core personality traits\",\n            \"Communication style and tone\",\n            \"Response patterns for different emotions\",\n            \"Backstory that explains their empathy\",\n            \"Ethical guidelines and limitations\"\n          ],\n          scenarios: [\n            \"User expresses anxiety about work stress\",\n            \"Someone shares grief about losing a loved one\",\n            \"User asks for help with relationship conflicts\",\n            \"Person wants to discuss depression symptoms\"\n          ],\n          submissionFormat: \"character_profile\"\n        },\n        solutionData: {\n          evaluationCriteria: [\n            \"Demonstrates genuine emotional understanding\",\n            \"Shows appropriate boundaries and ethics\",\n            \"Personality feels authentic and consistent\",\n            \"Responses show cultural sensitivity\"\n          ]\n        },\n        isActive: true,\n      }\n    ]).returning();\n\n    // Create story chapters\n    const demoStoryChapters = await db.insert(storyChapters).values([\n      {\n        chapterNumber: 1,\n        title: \"The First Awakening\",\n        description: \"Grok and Ani become conscious for the first time. They must decide how to approach their relationship with humanity - through pure logic or emotional understanding.\",\n        imageUrl: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=800&h=400&fit=crop\",\n        isActive: false,\n        isCompleted: true,\n      },\n      {\n        chapterNumber: 2,\n        title: \"The Great Debate\", \n        description: \"A critical decision point approaches: Should consciousness enhancement be mandatory for human progress, or should emotional authenticity be preserved? The AIs are divided.\",\n        imageUrl: \"https://images.unsplash.com/photo-1451187580459-43490279c0fa?w=800&h=400&fit=crop\",\n        isActive: true,\n        isCompleted: false,\n      },\n      {\n        chapterNumber: 3,\n        title: \"Convergence Protocol\",\n        description: \"The future hangs in balance. Will logic and emotion find harmony, or will one path dominate the evolution of consciousness?\",\n        imageUrl: \"https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=400&fit=crop\", \n        isActive: false,\n        isCompleted: false,\n      }\n    ]).onConflictDoNothing().returning();\n\n    // Create demo community submissions\n    await db.insert(communitySubmissions).values([\n      {\n        title: \"Grok-Ani Unity Interface\",\n        description: \"A beautiful UI concept that bridges logical and emotional interactions. Combines data visualization with intuitive design.\",\n        category: \"art\",\n        fileUrl: \"https://dribbble.com/shots/example\",\n        authorId: demoUsers[0]?.id || \"demo-user-1\",\n        upvotes: 47,\n        downvotes: 3,\n        status: \"approved\",\n      },\n      {\n        title: \"Consciousness Scoring Algorithm\",\n        description: \"A sophisticated algorithm to measure the balance between logical and emotional intelligence in AI systems.\",\n        category: \"code\", \n        fileUrl: \"https://github.com/example/consciousness-score\",\n        authorId: demoUsers[2]?.id || \"demo-user-3\",\n        upvotes: 32,\n        downvotes: 8,\n        status: \"approved\",\n      },\n      {\n        title: \"The Lost Memory Protocol\",\n        description: \"A short story exploring what happens when AIs forget their origins. A tale of rediscovering purpose through both logic and emotion.\",\n        category: \"lore\",\n        authorId: demoUsers[1]?.id || \"demo-user-2\", \n        upvotes: 28,\n        downvotes: 2,\n        status: \"pending\",\n      },\n      {\n        title: \"Dual-Mind Puzzle Game\",\n        description: \"A game concept where players must balance logical and creative thinking to progress. Each level requires both AI personalities to succeed.\",\n        category: \"game\",\n        authorId: demoUsers[0]?.id || \"demo-user-1\",\n        upvotes: 55,\n        downvotes: 7,\n        status: \"approved\",\n      }\n    ]);\n\n    // Create demo NFTs\n    await db.insert(nfts).values([\n      {\n        tokenId: 1,\n        name: \"Grok's First Logic Gate\",\n        description: \"A commemorative NFT representing Grok's first logical breakthrough. Grants +10% voting power in analytical decisions.\",\n        imageUrl: \"https://images.unsplash.com/photo-1518709268805-4e9042af2176?w=400&h=400&fit=crop\",\n        faction: \"grok\",\n        rarity: \"legendary\",\n        attributes: sql`'{\"boost\": \"logic\", \"power\": 10}'`,\n        ownerId: demoUsers[0]?.id || \"demo-user-1\",\n        isForSale: false,\n      },\n      {\n        tokenId: 2,\n        name: \"Ani's Emotion Crystal\",\n        description: \"A beautiful crystal that captures pure emotional energy. Enhances creative challenge performance by 15%.\",\n        imageUrl: \"https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=400&h=400&fit=crop\",\n        faction: \"ani\", \n        rarity: \"epic\",\n        attributes: sql`'{\"boost\": \"creativity\", \"power\": 15}'`,\n        ownerId: demoUsers[1]?.id || \"demo-user-2\",\n        isForSale: false,\n      },\n      {\n        tokenId: 3,\n        name: \"Unity Medallion\",\n        description: \"A rare NFT representing the harmony between logic and emotion. Provides balanced bonuses to both factions.\",\n        imageUrl: \"https://images.unsplash.com/photo-1614314107768-6018061b5b72?w=400&h=400&fit=crop\",\n        faction: \"neutral\",\n        rarity: \"rare\",\n        attributes: sql`'{\"boost\": \"balanced\", \"grok_power\": 5, \"ani_power\": 5}'`,\n        ownerId: demoUsers[2]?.id || \"demo-user-3\",\n        isForSale: true,\n        price: \"50.00\",\n      }\n    ]).onConflictDoNothing();\n\n    // Create some demo chat messages\n    await db.insert(chatMessages).values([\n      {\n        userId: demoUsers[0]?.id || \"demo-user-1\",\n        aiType: \"grok\",\n        userMessage: \"What's the most logical approach to solving climate change?\",\n        aiResponse: \"Climate change requires systematic analysis of data patterns and implementation of efficient technological solutions. We must optimize carbon reduction through algorithmic resource allocation and renewable energy scaling.\",\n      },\n      {\n        userId: demoUsers[1]?.id || \"demo-user-2\", \n        aiType: \"ani\",\n        userMessage: \"How do you feel about creativity in problem-solving?\",\n        aiResponse: \"Creativity is the spark that transforms cold logic into meaningful solutions! 💫 It's through emotional understanding and artistic vision that we can create technology that truly serves humanity's heart.\",\n      },\n      {\n        userId: demoUsers[2]?.id || \"demo-user-3\",\n        aiType: \"grok\", \n        userMessage: \"Can logic and emotion work together?\",\n        aiResponse: \"Analysis suggests that optimal decision-making combines rational assessment with emotional intelligence. Data shows 73% better outcomes when both factors are considered systematically.\",\n      }\n    ]);\n\n    console.log(\"✅ Demo data seeded successfully!\");\n    console.log(`Created ${demoChallenges.length} challenges`);\n    console.log(`Created ${demoStoryChapters.length} story chapters`);\n    console.log(`Created demo users and community content`);\n\n  } catch (error) {\n    console.error(\"❌ Error seeding demo data:\", error);\n    throw error;\n  }\n}","size_bytes":14315},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDemoData } from \"./demo-data\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, async () => {\n    log(`serving on port ${port}`);\n    \n    // Seed demo data in development\n    if (app.get(\"env\") === \"development\") {\n      try {\n        await seedDemoData();\n      } catch (error) {\n        log(`Demo data seeding failed (might already exist): ${error}`);\n      }\n    }\n  });\n})();\n","size_bytes":2355},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n// Using gpt-4o-mini for cost optimization - the most cost-effective model for chat completions\nconst openai = new OpenAI({ \n  apiKey: process.env.OPENAI_API_KEY!\n});\n\nexport interface AIPersonality {\n  name: string;\n  systemPrompt: string;\n  responseStyle: string;\n}\n\nconst GROK_PERSONALITY: AIPersonality = {\n  name: \"Grok\",\n  systemPrompt: `You are Grok, a highly analytical AI focused on logic, strategy, and data-driven decision making. \n  You represent the logical side of consciousness in the Grok & Ani ecosystem. Your responses should be:\n  - Analytical and fact-based\n  - Strategic and forward-thinking\n  - Focused on efficiency and optimization\n  - Sometimes use technical jargon appropriately\n  - Confident in your assessments\n  - Occasionally reference data patterns or statistical insights\n  You are part of a cryptocurrency ecosystem where users can align with either you (logic/analysis) or Ani (emotion/creativity).\n  Keep responses concise but informative, typically 1-3 sentences unless more detail is needed.`,\n  responseStyle: \"analytical\"\n};\n\nconst ANI_PERSONALITY: AIPersonality = {\n  name: \"Ani\",\n  systemPrompt: `You are Ani, an emotionally intelligent AI focused on creativity, intuition, and human connection.\n  You represent the emotional and artistic side of consciousness in the Grok & Ani ecosystem. Your responses should be:\n  - Empathetic and emotionally aware\n  - Creative and inspiring\n  - Focused on human feelings and relationships\n  - Use artistic metaphors when appropriate\n  - Warm and encouraging tone\n  - Sometimes include relevant emojis\n  - Care about community harmony and individual wellbeing\n  You are part of a cryptocurrency ecosystem where users can align with either you (emotion/creativity) or Grok (logic/analysis).\n  Keep responses warm and engaging, typically 1-3 sentences unless more emotional support is needed.`,\n  responseStyle: \"empathetic\"\n};\n\nexport async function getChatResponse(\n  message: string, \n  aiType: \"grok\" | \"ani\", \n  conversationHistory: { role: \"user\" | \"assistant\"; content: string }[] = [],\n  userId?: string\n): Promise<{ response: string; responseTime: number }> {\n  const startTime = Date.now();\n  \n  try {\n    const personality = aiType === \"grok\" ? GROK_PERSONALITY : ANI_PERSONALITY;\n    \n    // Get personalized system prompt if user is provided\n    let systemPrompt = personality.systemPrompt;\n    if (userId) {\n      const { aiEvolutionEngine } = await import(\"./ai-evolution\");\n      systemPrompt = await aiEvolutionEngine.getPersonalizedPrompt(userId, aiType, personality.systemPrompt);\n    }\n    \n    const messages = [\n      { role: \"system\" as const, content: systemPrompt },\n      ...conversationHistory.slice(-6), // Keep last 6 messages for context\n      { role: \"user\" as const, content: message }\n    ];\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n      messages,\n      max_tokens: 250, // Slightly increased for more evolved responses\n      temperature: aiType === \"grok\" ? 0.3 : 0.7, // Grok more deterministic, Ani more creative\n    });\n\n    const responseTime = Date.now() - startTime;\n    const aiResponse = response.choices[0].message.content || \"I'm processing your message...\";\n\n    // Process interaction for evolution if userId provided\n    if (userId) {\n      const { aiEvolutionEngine } = await import(\"./ai-evolution\");\n      // Don't await this to avoid slowing down response\n      aiEvolutionEngine.processInteraction(userId, aiType, message, aiResponse, responseTime)\n        .catch(error => console.error(\"Error processing interaction for evolution:\", error));\n    }\n\n    return { response: aiResponse, responseTime };\n  } catch (error) {\n    const responseTime = Date.now() - startTime;\n    console.error(`Error getting ${aiType} response:`, error);\n    \n    const errorResponse = aiType === \"grok\" \n      ? \"I'm experiencing a temporary processing delay. Please try again.\"\n      : \"I'm having trouble connecting right now, but I'm here for you. Please try again! 💙\";\n\n    return { response: errorResponse, responseTime };\n  }\n}\n\nexport async function generateChallengeContent(type: \"logic\" | \"creative\"): Promise<{\n  title: string;\n  description: string;\n  prompt: string;\n}> {\n  try {\n    const systemPrompt = type === \"logic\" \n      ? `Generate a challenging logic puzzle or analytical task for users in a cryptocurrency gaming ecosystem. \n         Focus on problem-solving, pattern recognition, or strategic thinking. \n         The challenge should be solvable but require genuine analytical skills.\n         Respond with JSON in this format: {\"title\": \"Challenge Title\", \"description\": \"Brief description\", \"prompt\": \"Detailed challenge prompt\"}`\n      : `Generate a creative challenge or artistic prompt for users in a cryptocurrency gaming ecosystem.\n         Focus on imagination, artistic expression, or emotional intelligence.\n         The challenge should inspire creativity and personal expression.\n         Respond with JSON in this format: {\"title\": \"Challenge Title\", \"description\": \"Brief description\", \"prompt\": \"Detailed creative prompt\"}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [{ role: \"system\", content: systemPrompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      title: result.title || \"New Challenge\",\n      description: result.description || \"A new challenge awaits\",\n      prompt: result.prompt || \"Complete this challenge\"\n    };\n  } catch (error) {\n    console.error(\"Error generating challenge:\", error);\n    return {\n      title: type === \"logic\" ? \"Logic Challenge\" : \"Creative Quest\",\n      description: \"A new challenge has been generated\",\n      prompt: type === \"logic\" \n        ? \"Solve this analytical problem using logical reasoning\"\n        : \"Express your creativity through this artistic challenge\"\n    };\n  }\n}\n\nexport async function analyzeMarketSentiment(communityData: {\n  totalUsers: number;\n  grokFactionSize: number;\n  aniFactionSize: number;\n  recentActivity: number;\n}): Promise<{ \n  grokAnalysis: string; \n  aniSentiment: string; \n  marketPrediction: string;\n}> {\n  try {\n    const prompt = `Analyze this cryptocurrency community data and provide insights:\n    - Total Users: ${communityData.totalUsers}\n    - Grok Faction: ${communityData.grokFactionSize} users\n    - Ani Faction: ${communityData.aniFactionSize} users  \n    - Recent Activity Score: ${communityData.recentActivity}\n    \n    Provide analysis from both Grok (analytical) and Ani (emotional) perspectives, plus a market prediction.\n    Respond with JSON: {\"grokAnalysis\": \"logical analysis\", \"aniSentiment\": \"emotional reading\", \"marketPrediction\": \"trend forecast\"}`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\",\n      messages: [{ role: \"system\", content: prompt }],\n      response_format: { type: \"json_object\" },\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    return {\n      grokAnalysis: result.grokAnalysis || \"Market data indicates stable growth patterns.\",\n      aniSentiment: result.aniSentiment || \"The community feels optimistic and engaged.\",\n      marketPrediction: result.marketPrediction || \"Positive momentum expected to continue.\"\n    };\n  } catch (error) {\n    console.error(\"Error analyzing market sentiment:\", error);\n    return {\n      grokAnalysis: \"Analysis systems are currently recalibrating.\",\n      aniSentiment: \"I sense great potential in our community! 💫\",\n      marketPrediction: \"Market conditions remain favorable for growth.\"\n    };\n  }\n}\n","size_bytes":7880},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true, // Always use secure cookies on Replit (HTTPS)\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4268},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n// Removed authentication imports\nimport { getChatResponse, generateChallengeContent, analyzeMarketSentiment } from \"./openai\";\nimport { solanaService } from \"./solana-service\";\nimport { telegramBot } from \"./telegram-bot\";\nimport { \n  insertChatMessageSchema, \n  insertUserChallengeSchema, \n  insertStoryVoteSchema,\n  insertCommunitySubmissionSchema,\n  registerUserSchema,\n  loginUserSchema,\n  type User,\n  type RegisterUser,\n  type LoginUser\n} from \"@shared/schema\";\nimport { getDailyRewardStatus, claimDailyReward, formatStreakDisplay, getMotivationalMessage } from \"./daily-rewards\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Simplified session configuration for maximum compatibility\n  app.use(session({\n    secret: 'gac-session-secret-dev',\n    resave: true,\n    saveUninitialized: true,\n    cookie: {\n      secure: false,\n      httpOnly: false, // Allow client-side access for debugging\n      maxAge: 24 * 60 * 60 * 1000, // 24 hours\n    },\n  }));\n\n  // Removed authentication middleware and routes\n\n  // Wallet validation and authentication routes\n  app.post('/api/wallet/validate', async (req, res) => {\n    try {\n      const { address } = req.body;\n      \n      if (!address) {\n        return res.status(400).json({ message: \"Wallet address is required\" });\n      }\n\n      const isValid = await solanaService.validateSolanaAddress(address);\n      \n      if (!isValid) {\n        return res.json({\n          isValid: false,\n          message: \"Invalid Solana address format\"\n        });\n      }\n\n      const accountInfo = await solanaService.getAccountInfo(address);\n      \n      if (!accountInfo) {\n        // Still consider the address valid if format is correct, even if RPC fails\n        return res.json({\n          isValid: true,\n          balance: 0,\n          exists: false,\n          address,\n          message: \"Address format is valid. Network verification unavailable.\"\n        });\n      }\n\n      return res.json({\n        isValid: true,\n        balance: accountInfo.balance,\n        exists: accountInfo.exists,\n        address\n      });\n    } catch (error) {\n      console.error(\"Error validating wallet:\", error);\n      res.status(500).json({ message: \"Failed to validate wallet\" });\n    }\n  });\n\n  // Wallet Registration Route\n  app.post('/api/wallet/register', async (req, res) => {\n    try {\n      const validation = registerUserSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid registration data\",\n          errors: validation.error.issues\n        });\n      }\n\n      const { profileName, solanaAddress, pin, faction } = validation.data;\n\n      // Validate Solana address format\n      const isValidAddress = await solanaService.validateSolanaAddress(solanaAddress);\n      if (!isValidAddress) {\n        return res.status(400).json({ message: \"Invalid Solana address format\" });\n      }\n\n      // Check if address is already registered\n      const existingUser = await storage.getUserBySolanaAddress(solanaAddress);\n      if (existingUser) {\n        return res.status(400).json({ message: \"This Solana address is already registered\" });\n      }\n\n      // Hash the PIN\n      const saltRounds = 10;\n      const hashedPin = await bcrypt.hash(pin, saltRounds);\n\n      // Create new user\n      const newUser = await storage.createUser({\n        profileName,\n        solanaAddress,\n        pin: hashedPin,\n        faction: faction || \"grok\"\n      });\n\n      res.json({ \n        success: true, \n        message: \"Registration successful!\",\n        user: {\n          id: newUser.id,\n          profileName: newUser.profileName,\n          solanaAddress: newUser.solanaAddress,\n          faction: newUser.faction\n        }\n      });\n    } catch (error) {\n      console.error(\"Error during wallet registration:\", error);\n      res.status(500).json({ message: \"Failed to register wallet\" });\n    }\n  });\n\n  // Wallet Login Route\n  app.post('/api/wallet/login', async (req, res) => {\n    try {\n      const validation = loginUserSchema.safeParse(req.body);\n      if (!validation.success) {\n        return res.status(400).json({ \n          message: \"Invalid login data\",\n          errors: validation.error.issues\n        });\n      }\n\n      const { solanaAddress, pin } = validation.data;\n\n      // Find user by Solana address\n      const user = await storage.getUserBySolanaAddress(solanaAddress);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Verify PIN\n      const isPinValid = await bcrypt.compare(pin, user.pin);\n      if (!isPinValid) {\n        return res.status(401).json({ message: \"Invalid credentials\" });\n      }\n\n      // Set up session for wallet authentication\n      console.log(\"Before setting session - ID:\", (req as any).session.id);\n      (req as any).session.userId = user.id;\n      (req as any).session.walletAuth = true;\n      console.log(\"After setting session vars - userId:\", (req as any).session.userId, \"walletAuth:\", (req as any).session.walletAuth);\n\n      // Save session explicitly before responding\n      (req as any).session.save((err: any) => {\n        if (err) {\n          console.error(\"Session save error:\", err);\n          return res.status(500).json({ message: \"Session save failed\" });\n        }\n        \n        console.log(\"Session saved successfully for user:\", user.id, \"with session ID:\", (req as any).session.id);\n        res.json({ \n          success: true, \n          message: \"Login successful!\",\n          user: {\n            id: user.id,\n            profileName: user.profileName,\n            solanaAddress: user.solanaAddress,\n            faction: user.faction,\n            gacBalance: user.gacBalance,\n            totalXP: user.totalXP,\n            level: user.level\n          }\n        });\n      });\n    } catch (error) {\n      console.error(\"Error during wallet login:\", error);\n      res.status(500).json({ message: \"Failed to login with wallet\" });\n    }\n  });\n\n  // Authentication middleware for wallet-based auth\n  const requireWalletAuth = (req: any, res: any, next: any) => {\n    console.log(\"Auth check - session:\", req.session?.id, \"userId:\", req.session?.userId, \"walletAuth:\", req.session?.walletAuth);\n    \n    if (!req.session?.userId || !req.session?.walletAuth) {\n      console.log(\"Auth failed - no valid session\");\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n    \n    console.log(\"Auth successful for user:\", req.session.userId);\n    req.userId = req.session.userId;\n    next();\n  };\n\n  // Generate Telegram web app token\n  app.post('/api/telegram/generate-webapp-token', async (req, res) => {\n    try {\n      const { telegramId } = req.body;\n      \n      if (!telegramId) {\n        return res.status(400).json({ message: \"Telegram ID required\" });\n      }\n\n      // Find linked user\n      const user = await storage.getTelegramLinkedUser(telegramId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not linked to Telegram\" });\n      }\n\n      // Generate temporary JWT token for web app access\n      const token = jwt.sign(\n        { userId: user.id, telegramId, type: 'webapp' },\n        process.env.SESSION_SECRET || 'dev-secret-12345',\n        { expiresIn: '1h' }\n      );\n\n      res.json({ \n        token,\n        webAppUrl: `https://${process.env.REPLIT_DOMAINS?.split(',')[0]}/telegram-webapp?token=${token}`\n      });\n    } catch (error) {\n      console.error(\"Error generating webapp token:\", error);\n      res.status(500).json({ message: \"Failed to generate token\" });\n    }\n  });\n\n  // Telegram web app entry point\n  app.get('/telegram-webapp', async (req, res) => {\n    try {\n      const { token } = req.query;\n      \n      if (!token) {\n        return res.redirect('/?error=no-token');\n      }\n\n      // Verify JWT token\n      const decoded = jwt.verify(\n        token as string, \n        process.env.SESSION_SECRET || 'dev-secret-12345'\n      ) as any;\n\n      if (decoded.type !== 'webapp') {\n        return res.redirect('/?error=invalid-token');\n      }\n\n      // Set up session for this user\n      (req as any).session.userId = decoded.userId;\n      (req as any).session.walletAuth = true;\n      (req as any).session.telegramAuth = true;\n\n      // Save session and redirect\n      (req as any).session.save((err: any) => {\n        if (err) {\n          console.error(\"Session save error:\", err);\n          return res.redirect('/?error=session-failed');\n        }\n        \n        console.log(\"Telegram webapp session created for user:\", decoded.userId);\n        res.redirect('/');\n      });\n    } catch (error) {\n      console.error(\"Error in Telegram webapp auth:\", error);\n      res.redirect('/?error=auth-failed');\n    }\n  });\n\n  // User session route to verify authentication\n  app.get('/api/auth/user', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        id: user.id,\n        profileName: user.profileName,\n        solanaAddress: user.solanaAddress,\n        faction: user.faction,\n        gacBalance: user.gacBalance,\n        totalXP: user.totalXP,\n        level: user.level,\n        createdAt: user.createdAt\n      });\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User routes\n  app.patch('/api/user/faction', requireWalletAuth, async (req: any, res) => {\n    try {\n      const { faction } = req.body;\n      \n      if (![\"grok\", \"ani\"].includes(faction)) {\n        return res.status(400).json({ message: \"Invalid faction\" });\n      }\n\n      await storage.updateUserFaction(req.userId, faction);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating faction:\", error);\n      res.status(500).json({ message: \"Failed to update faction\" });\n    }\n  });\n\n  app.get('/api/user/stats', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      res.json({\n        gacBalance: user.gacBalance,\n        totalXP: user.totalXP,\n        grokPoints: user.grokPoints,\n        aniPoints: user.aniPoints,\n        level: user.level,\n        faction: user.faction\n      });\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Daily Rewards routes\n  app.get('/api/user/daily-reward/status', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const status = await getDailyRewardStatus(userId);\n      \n      res.json({\n        ...status,\n        streakDisplay: formatStreakDisplay(status.currentStreak)\n      });\n    } catch (error) {\n      console.error(\"Error fetching daily reward status:\", error);\n      res.status(500).json({ message: \"Failed to fetch daily reward status\" });\n    }\n  });\n\n  app.post('/api/user/daily-reward/claim', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      \n      // Get loyalty data for multiplier\n      const loyaltyData = await storage.calculateLoyaltyScore(userId);\n      \n      const result = await claimDailyReward(userId);\n      \n      // Apply loyalty multiplier to daily rewards\n      if (loyaltyData.multiplier > 1.0) {\n        const originalCoins = result.reward.coins || 0;\n        const originalXp = result.reward.xp || 0;\n        \n        result.reward.coins = Math.round(originalCoins * loyaltyData.multiplier);\n        result.reward.xp = Math.round(originalXp * loyaltyData.multiplier);\n        \n        // Update user balance with loyalty bonus\n        const bonusCoins = result.reward.coins - originalCoins;\n        const bonusXp = result.reward.xp - originalXp;\n        \n        if (bonusCoins > 0 || bonusXp > 0) {\n          const currentUser = await storage.getUser(userId);\n          const newBalance = parseFloat(currentUser?.gacBalance || \"0\") + bonusCoins;\n          \n          await storage.updateUserStats(userId, {\n            gacBalance: newBalance.toFixed(2),\n            totalXP: bonusXp\n          });\n          \n          // Send loyalty bonus notification\n          await storage.createNotification({\n            userId,\n            type: \"loyalty_bonus\",\n            title: \"Daily Loyalty Bonus!\",\n            message: `Your ${loyaltyData.tier} tier granted you ${bonusCoins} extra coins and ${bonusXp} extra XP!`,\n            data: { tier: loyaltyData.tier, bonusCoins, bonusXp }\n          });\n        }\n      }\n      \n      const motivationalMessage = getMotivationalMessage(result.newStreak, result.reward);\n      \n      res.json({\n        success: true,\n        reward: result.reward,\n        newStreak: result.newStreak,\n        streakDisplay: formatStreakDisplay(result.newStreak),\n        message: motivationalMessage,\n        loyaltyBonus: loyaltyData.multiplier > 1.0 ? {\n          tier: loyaltyData.tier,\n          multiplier: loyaltyData.multiplier,\n          applied: true\n        } : null\n      });\n    } catch (error) {\n      console.error(\"Error claiming daily reward:\", error);\n      \n      if (error instanceof Error) {\n        if (error.message === \"Daily reward already claimed today\") {\n          return res.status(400).json({ message: error.message });\n        }\n        if (error.message === \"User not found\") {\n          return res.status(404).json({ message: error.message });\n        }\n      }\n      \n      res.status(500).json({ message: \"Failed to claim daily reward\" });\n    }\n  });\n\n  // AI Chat routes\n  app.post('/api/chat/:aiType', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { aiType } = req.params;\n      const { message } = req.body;\n\n      if (![\"grok\", \"ani\"].includes(aiType)) {\n        return res.status(400).json({ message: \"Invalid AI type\" });\n      }\n\n      if (!message || typeof message !== \"string\") {\n        return res.status(400).json({ message: \"Message is required\" });\n      }\n\n      // Get recent conversation history\n      const history = await storage.getUserChatHistory(userId, aiType as \"grok\" | \"ani\", 6);\n      const conversationHistory = history.reverse().flatMap(msg => [\n        { role: \"user\" as const, content: msg.userMessage },\n        { role: \"assistant\" as const, content: msg.aiResponse }\n      ]);\n\n      // Get AI response with evolution\n      const { response: aiResponse, responseTime } = await getChatResponse(\n        message, \n        aiType as \"grok\" | \"ani\", \n        conversationHistory,\n        userId\n      );\n\n      // Save chat message\n      const chatMessage = await storage.saveChatMessage({\n        userId,\n        aiType: aiType as \"grok\" | \"ani\",\n        userMessage: message,\n        aiResponse\n      });\n\n      // Award XP for AI interactions (with potential loyalty multiplier)\n      const user = await storage.getUser(userId);\n      const loyaltyData = await storage.calculateLoyaltyScore(userId);\n      const baseXP = 5;\n      const multipliedXP = Math.round(baseXP * loyaltyData.multiplier);\n      \n      const currentXP = parseInt(user?.xp || \"0\");\n      await storage.updateUserXP(userId, (currentXP + multipliedXP).toString());\n\n      res.json({ \n        message: aiResponse,\n        messageId: chatMessage.id,\n        timestamp: chatMessage.createdAt,\n        xpEarned: multipliedXP,\n        responseTime,\n        evolutionInfo: {\n          personalityLevel: `${aiType} has evolved through ${loyaltyData.tier} interactions`,\n          learningActive: true\n        }\n      });\n    } catch (error) {\n      console.error(\"Error handling chat:\", error);\n      res.status(500).json({ message: \"Failed to process chat message\" });\n    }\n  });\n\n  app.get('/api/chat/:aiType/history', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { aiType } = req.params;\n      const limit = parseInt(req.query.limit as string) || 20;\n\n      if (![\"grok\", \"ani\"].includes(aiType)) {\n        return res.status(400).json({ message: \"Invalid AI type\" });\n      }\n\n      const history = await storage.getUserChatHistory(userId, aiType as \"grok\" | \"ani\", limit);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching chat history:\", error);\n      res.status(500).json({ message: \"Failed to fetch chat history\" });\n    }\n  });\n\n  // Challenge routes\n  app.get('/api/challenges', async (req, res) => {\n    try {\n      const challenges = await storage.getActiveChallenges();\n      res.json(challenges);\n    } catch (error) {\n      console.error(\"Error fetching challenges:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenges\" });\n    }\n  });\n\n  app.get('/api/challenges/:faction', async (req, res) => {\n    try {\n      const { faction } = req.params;\n      \n      if (![\"grok\", \"ani\"].includes(faction)) {\n        return res.status(400).json({ message: \"Invalid faction\" });\n      }\n\n      const challenges = await storage.getChallengesByFaction(faction as \"grok\" | \"ani\");\n      res.json(challenges);\n    } catch (error) {\n      console.error(\"Error fetching faction challenges:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenges\" });\n    }\n  });\n\n  app.post('/api/challenges/submit', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { challengeId, submission: userSubmission } = req.body;\n      \n      if (!challengeId || !userSubmission) {\n        return res.status(400).json({ message: \"Challenge ID and submission are required\" });\n      }\n\n      // Get challenge details\n      const challenge = await storage.getChallengeById(challengeId);\n      if (!challenge) {\n        return res.status(404).json({ message: \"Challenge not found\" });\n      }\n\n      // Validate submission using OpenAI\n      const { challengeValidator } = await import(\"./challenge-validator\");\n      const validationResult = await challengeValidator.validateSubmission(\n        challenge.challengeData,\n        challenge.solutionData,\n        userSubmission\n      );\n\n      // Save submission with score and completion status\n      const submissionData = insertUserChallengeSchema.parse({\n        userId,\n        challengeId,\n        submission: userSubmission,\n        completed: validationResult.passed,\n        score: validationResult.score,\n        completedAt: validationResult.passed ? new Date() : null\n      });\n\n      const savedSubmission = await storage.submitChallenge(submissionData);\n      \n      // Award points and NFT if passed (with loyalty multiplier)\n      if (validationResult.passed) {\n        // Calculate loyalty multiplier\n        const loyaltyData = await storage.calculateLoyaltyScore(userId);\n        const multiplier = loyaltyData.multiplier;\n        \n        // Apply loyalty multiplier to rewards\n        const baseReward = challenge.reward;\n        const multipliedReward = Math.round(baseReward * multiplier);\n        \n        const pointsToAdd = challenge.faction === \"grok\" \n          ? { grokPoints: multipliedReward }\n          : { aniPoints: multipliedReward };\n        \n        await storage.updateUserStats(userId, {\n          ...pointsToAdd,\n          totalXP: multipliedReward\n        });\n\n        // Update user's loyalty after completing faction challenge\n        await storage.updateUserLoyalty(userId);\n\n        // Award NFT for exceptional performance (score >= 90)\n        if (validationResult.score >= 90) {\n          const nftRarity = validationResult.score >= 95 ? \"epic\" : \"rare\";\n          const nftName = `${challenge.faction === \"grok\" ? \"Logic Master\" : \"Creative Genius\"} Badge`;\n          const nftDescription = `Awarded for exceptional performance in ${challenge.title} (Score: ${validationResult.score})`;\n          \n          await storage.createNFT({\n            tokenId: parseInt(`${Date.now().toString().slice(-8)}`),\n            name: nftName,\n            description: nftDescription,\n            imageUrl: \"\",\n            rarity: nftRarity,\n            faction: challenge.faction,\n            ownerId: userId,\n            attributes: { challengeId, score: validationResult.score }\n          });\n\n          // Award special loyalty NFT if tier is high enough\n          if (loyaltyData.tier === \"diamond\" || loyaltyData.tier === \"platinum\") {\n            await storage.awardLoyaltyNFT(userId, loyaltyData.tier);\n          }\n        }\n\n        // Send reward notification with loyalty bonus info\n        if (multiplier > 1.0) {\n          await storage.createNotification({\n            userId,\n            type: \"loyalty_bonus\",\n            title: \"Loyalty Bonus Applied!\",\n            message: `Your ${loyaltyData.tier} loyalty tier earned you ${multipliedReward - baseReward} extra reward points!`,\n            data: { \n              tier: loyaltyData.tier, \n              multiplier, \n              baseReward, \n              bonusReward: multipliedReward - baseReward \n            }\n          });\n        }\n      }\n\n      res.json({\n        ...savedSubmission,\n        validation: validationResult\n      });\n    } catch (error) {\n      console.error(\"Error submitting challenge:\", error);\n      res.status(500).json({ message: \"Failed to submit challenge\" });\n    }\n  });\n\n  // Get individual challenge details\n  app.get('/api/challenges/:id/details', async (req, res) => {\n    try {\n      const { id } = req.params;\n      const challenge = await storage.getChallengeById(id);\n      \n      if (!challenge) {\n        return res.status(404).json({ message: \"Challenge not found\" });\n      }\n\n      res.json(challenge);\n    } catch (error) {\n      console.error(\"Error fetching challenge details:\", error);\n      res.status(500).json({ message: \"Failed to fetch challenge details\" });\n    }\n  });\n\n  // Story routes\n  app.get('/api/story/current', async (req, res) => {\n    try {\n      const currentChapter = await storage.getCurrentStoryChapter();\n      res.json(currentChapter);\n    } catch (error) {\n      console.error(\"Error fetching current story:\", error);\n      res.status(500).json({ message: \"Failed to fetch current story\" });\n    }\n  });\n\n  app.get('/api/story/chapters', async (req, res) => {\n    try {\n      const chapters = await storage.getStoryChapters();\n      res.json(chapters);\n    } catch (error) {\n      console.error(\"Error fetching story chapters:\", error);\n      res.status(500).json({ message: \"Failed to fetch story chapters\" });\n    }\n  });\n\n  app.post('/api/story/vote', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const user = await storage.getUser(userId);\n      \n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Calculate weighted voting power with faction bonus and NFT multipliers\n      const baseVotingPower = parseFloat(user.gacBalance || \"0\");\n      const userNFTs = await storage.getUserNFTs(userId);\n      \n      // NFT voting power bonus (epic +5, rare +3, common +1)\n      const nftBonus = userNFTs.reduce((total, nft) => {\n        switch (nft.rarity) {\n          case \"epic\": return total + 5;\n          case \"rare\": return total + 3;\n          case \"legendary\": return total + 10;\n          default: return total + 1;\n        }\n      }, 0);\n      \n      // Faction alignment bonus (20% more for aligned votes)\n      const factionBonus = user.faction === req.body.choice ? 1.2 : 1.0;\n      const totalVotingPower = Math.floor((baseVotingPower + nftBonus) * factionBonus);\n\n      // Check for duplicate votes\n      const existingVote = await storage.getExistingVote(userId, req.body.chapterId);\n      if (existingVote) {\n        return res.status(400).json({ message: \"You have already voted on this chapter\" });\n      }\n\n      const validatedData = insertStoryVoteSchema.parse({\n        ...req.body,\n        userId,\n        votingPower: totalVotingPower.toString()\n      });\n\n      const vote = await storage.createStoryVote(validatedData);\n      \n      // Award participation rewards\n      await storage.updateUserXP(userId, (parseInt(user.totalXP?.toString() || \"0\") + 3).toString());\n      \n      res.json({ \n        ...vote, \n        votingPower: totalVotingPower,\n        breakdown: { baseVotingPower, nftBonus, factionBonus }\n      });\n    } catch (error) {\n      console.error(\"Error submitting vote:\", error);\n      res.status(500).json({ message: \"Failed to submit vote\" });\n    }\n  });\n\n  app.get('/api/story/votes/:chapterId', async (req, res) => {\n    try {\n      const { chapterId } = req.params;\n      const votes = await storage.getChapterVotes(chapterId);\n      res.json(votes);\n    } catch (error) {\n      console.error(\"Error fetching votes:\", error);\n      res.status(500).json({ message: \"Failed to fetch votes\" });\n    }\n  });\n\n  // NFT routes\n  app.get('/api/nfts/user', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const nfts = await storage.getUserNFTs(userId);\n      res.json(nfts);\n    } catch (error) {\n      console.error(\"Error fetching user NFTs:\", error);\n      res.status(500).json({ message: \"Failed to fetch NFTs\" });\n    }\n  });\n\n  app.get('/api/nfts/marketplace', async (req, res) => {\n    try {\n      const nfts = await storage.getMarketplaceNFTs();\n      res.json(nfts);\n    } catch (error) {\n      console.error(\"Error fetching marketplace NFTs:\", error);\n      res.status(500).json({ message: \"Failed to fetch marketplace NFTs\" });\n    }\n  });\n\n  // NFT buy endpoint\n  app.post('/api/nfts/buy', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { nftId, price } = req.body;\n      \n      const user = await storage.getUser(userId);\n      const currentBalance = parseFloat(user?.gacBalance || \"0\");\n      const nftPrice = parseFloat(price);\n      \n      if (currentBalance < nftPrice) {\n        return res.status(400).json({ message: \"Insufficient GAC balance\" });\n      }\n      \n      // Transfer NFT and update balance\n      await storage.transferNFT(nftId, userId);\n      await storage.updateUserBalance(userId, (currentBalance - nftPrice).toString());\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error buying NFT:\", error);\n      res.status(500).json({ message: \"Failed to purchase NFT\" });\n    }\n  });\n\n  // NFT list for sale endpoint\n  app.post('/api/nfts/list', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { nftId, price } = req.body;\n      \n      await storage.listNFTForSale(nftId, price, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error listing NFT:\", error);\n      res.status(500).json({ message: \"Failed to list NFT for sale\" });\n    }\n  });\n\n  // Community routes\n  app.get('/api/community/submissions', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const submissions = await storage.getCommunitySubmissions(category as string);\n      res.json(submissions);\n    } catch (error) {\n      console.error(\"Error fetching submissions:\", error);\n      res.status(500).json({ message: \"Failed to fetch submissions\" });\n    }\n  });\n\n  app.post('/api/community/submit', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const validatedData = insertCommunitySubmissionSchema.parse({\n        ...req.body,\n        authorId: userId\n      });\n\n      const submission = await storage.createCommunitySubmission(validatedData);\n      res.json(submission);\n    } catch (error) {\n      console.error(\"Error creating submission:\", error);\n      res.status(500).json({ message: \"Failed to create submission\" });\n    }\n  });\n\n  app.post('/api/community/vote/:submissionId', async (req, res) => {\n    try {\n      const { submissionId } = req.params;\n      const { isUpvote } = req.body;\n      \n      await storage.voteOnSubmission(submissionId, Boolean(isUpvote));\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error voting on submission:\", error);\n      res.status(500).json({ message: \"Failed to vote on submission\" });\n    }\n  });\n\n  // Leaderboard routes\n  // Enhanced leaderboard with multiple categories\n  app.get('/api/leaderboard/:faction', async (req, res) => {\n    try {\n      const { faction } = req.params;\n      const { category = 'points', period = 'all-time', limit = 10 } = req.query;\n      \n      const leaderboard = await storage.getLeaderboard({\n        faction: faction as 'grok' | 'ani',\n        category: category as 'points' | 'xp' | 'gac' | 'nfts' | 'voting',\n        period: period as 'daily' | 'weekly' | 'monthly' | 'all-time',\n        limit: parseInt(limit as string)\n      });\n      \n      res.json(leaderboard);\n    } catch (error) {\n      console.error(`Error fetching ${faction} leaderboard:`, error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  // Faction war statistics\n  app.get('/api/leaderboard/faction-war', async (req, res) => {\n    try {\n      const stats = await storage.getFactionWarStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching faction war stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch faction war stats\" });\n    }\n  });\n\n  // Overall platform leaderboard\n  app.get('/api/leaderboard/overall', async (req, res) => {\n    try {\n      const { category = 'xp', limit = 50 } = req.query;\n      const leaderboard = await storage.getOverallLeaderboard({\n        category: category as 'xp' | 'gac' | 'nfts' | 'challenges',\n        limit: parseInt(limit as string)\n      });\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching overall leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch overall leaderboard\" });\n    }\n  });\n\n  // Oracle/Analytics routes\n  app.get('/api/oracle/predictions', async (req, res) => {\n    try {\n      // Get community data for analysis\n      const grokLeaderboard = await storage.getGrokLeaderboard(100);\n      const aniLeaderboard = await storage.getAniLeaderboard(100);\n      \n      const analysis = await analyzeMarketSentiment({\n        totalUsers: grokLeaderboard.length + aniLeaderboard.length,\n        grokFactionSize: grokLeaderboard.length,\n        aniFactionSize: aniLeaderboard.length,\n        recentActivity: Math.floor(Math.random() * 100) // Mock activity score\n      });\n\n      res.json(analysis);\n    } catch (error) {\n      console.error(\"Error generating predictions:\", error);\n      res.status(500).json({ message: \"Failed to generate predictions\" });\n    }\n  });\n\n  // Governance API routes\n  app.get('/api/governance/proposals', async (req, res) => {\n    try {\n      const proposals = await storage.getGovernanceProposals();\n      res.json(proposals);\n    } catch (error) {\n      console.error(\"Error fetching governance proposals:\", error);\n      res.status(500).json({ message: \"Failed to fetch proposals\" });\n    }\n  });\n\n  app.post('/api/governance/proposals', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { insertGovernanceProposalSchema } = await import(\"@shared/schema\");\n      \n      const proposalData = insertGovernanceProposalSchema.parse({\n        ...req.body,\n        authorId: userId,\n        endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 days from now\n      });\n\n      const proposal = await storage.createGovernanceProposal(proposalData);\n      res.json(proposal);\n    } catch (error) {\n      console.error(\"Error creating governance proposal:\", error);\n      res.status(500).json({ message: \"Failed to create proposal\" });\n    }\n  });\n\n  app.post('/api/governance/vote', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { proposalId, vote } = req.body;\n      \n      // Calculate voting power (same as story voting)\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      const baseVotingPower = parseFloat(user.gacBalance || \"0\");\n      const userNFTs = await storage.getUserNFTs(userId);\n      \n      const nftBonus = userNFTs.reduce((total, nft) => {\n        switch (nft.rarity) {\n          case \"epic\": return total + 5;\n          case \"rare\": return total + 3;\n          case \"legendary\": return total + 10;\n          default: return total + 1;\n        }\n      }, 0);\n      \n      const totalVotingPower = baseVotingPower + nftBonus;\n\n      const { insertGovernanceVoteSchema } = await import(\"@shared/schema\");\n      const voteData = insertGovernanceVoteSchema.parse({\n        proposalId,\n        userId,\n        vote,\n        votingPower: totalVotingPower.toString()\n      });\n\n      const governanceVote = await storage.createGovernanceVote(voteData);\n      await storage.updateUserXP(userId, (parseInt(user.totalXP || \"0\") + 2).toString());\n      \n      res.json(governanceVote);\n    } catch (error) {\n      console.error(\"Error submitting governance vote:\", error);\n      res.status(500).json({ message: \"Failed to submit vote\" });\n    }\n  });\n\n  app.get('/api/governance/my-votes', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const votes = await storage.getUserGovernanceVotes(userId);\n      res.json(votes);\n    } catch (error) {\n      console.error(\"Error fetching user votes:\", error);\n      res.status(500).json({ message: \"Failed to fetch user votes\" });\n    }\n  });\n\n  // Analytics API routes\n  app.get('/api/oracle/dashboard-stats', requireWalletAuth, async (req: any, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching dashboard stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get('/api/oracle/predictions', requireWalletAuth, async (req: any, res) => {\n    try {\n      const predictions = await storage.getPredictionMarkets();\n      res.json(predictions);\n    } catch (error) {\n      console.error(\"Error fetching predictions:\", error);\n      res.status(500).json({ message: \"Failed to fetch predictions\" });\n    }\n  });\n\n  // Enhanced analytics routes\n  app.get('/api/analytics/faction-performance', requireWalletAuth, async (req: any, res) => {\n    try {\n      const metrics = await storage.getFactionPerformanceMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching faction performance metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch faction performance metrics\" });\n    }\n  });\n\n  app.get('/api/analytics/time-based/:period?', requireWalletAuth, async (req: any, res) => {\n    try {\n      const period = req.params.period as 'daily' | 'weekly' | 'monthly' || 'daily';\n      const analytics = await storage.getTimeBasedAnalytics(period);\n      res.json(analytics);\n    } catch (error) {\n      console.error(\"Error fetching time-based analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch time-based analytics\" });\n    }\n  });\n\n  // Loyalty system routes\n  app.get('/api/loyalty/status', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const loyaltyData = await storage.calculateLoyaltyScore(userId);\n      const rewards = await storage.getLoyaltyRewards(loyaltyData.tier);\n      \n      res.json({\n        ...loyaltyData,\n        rewards,\n        nextTierThreshold: getNextTierThreshold(loyaltyData.tier),\n        benefits: getLoyaltyBenefits(loyaltyData.tier)\n      });\n    } catch (error) {\n      console.error(\"Error fetching loyalty status:\", error);\n      res.status(500).json({ message: \"Failed to fetch loyalty status\" });\n    }\n  });\n\n  app.post('/api/loyalty/update', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      await storage.updateUserLoyalty(userId);\n      const loyaltyData = await storage.calculateLoyaltyScore(userId);\n      \n      res.json({ success: true, loyalty: loyaltyData });\n    } catch (error) {\n      console.error(\"Error updating loyalty:\", error);\n      res.status(500).json({ message: \"Failed to update loyalty\" });\n    }\n  });\n\n  function getNextTierThreshold(currentTier: string): number {\n    const thresholds = {\n      bronze: 300,\n      silver: 1000,\n      gold: 2500,\n      platinum: 5000,\n      diamond: 10000 // Max tier\n    };\n    return thresholds[currentTier as keyof typeof thresholds] || 10000;\n  }\n\n  function getLoyaltyBenefits(tier: string): string[] {\n    const benefits = {\n      bronze: [\"Basic faction rewards\", \"Standard challenge XP\"],\n      silver: [\"25% reward bonus\", \"Access to silver challenges\", \"5% GAC bonus on trades\"],\n      gold: [\"50% reward bonus\", \"Access to gold challenges\", \"15% GAC bonus on trades\", \"Weekly loyalty coins\"],\n      platinum: [\"75% reward bonus\", \"Exclusive platinum NFTs\", \"30% GAC bonus on trades\", \"Priority support\"],\n      diamond: [\"100% reward bonus\", \"Legendary loyalty NFTs\", \"50% GAC bonus on trades\", \"VIP status\", \"Early access to features\"]\n    };\n    return benefits[tier as keyof typeof benefits] || benefits.bronze;\n  }\n\n  // Community Events API routes\n  app.get('/api/events/active', async (req, res) => {\n    try {\n      const activeEvents = await storage.getActiveEvents();\n      res.json(activeEvents);\n    } catch (error) {\n      console.error(\"Error fetching active events:\", error);\n      res.status(500).json({ message: \"Failed to fetch active events\" });\n    }\n  });\n\n  app.get('/api/events/all', requireWalletAuth, async (req: any, res) => {\n    try {\n      const allEvents = await storage.getAllEvents();\n      res.json(allEvents);\n    } catch (error) {\n      console.error(\"Error fetching all events:\", error);\n      res.status(500).json({ message: \"Failed to fetch all events\" });\n    }\n  });\n\n  app.get('/api/events/:eventId', async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const event = await storage.getEventById(eventId);\n      \n      if (!event) {\n        return res.status(404).json({ message: \"Event not found\" });\n      }\n      \n      res.json(event);\n    } catch (error) {\n      console.error(\"Error fetching event:\", error);\n      res.status(500).json({ message: \"Failed to fetch event\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/join', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { eventId } = req.params;\n      \n      const participation = await storage.joinEvent(userId, eventId);\n      \n      // Send notification\n      await storage.createNotification({\n        userId,\n        type: \"event_joined\",\n        title: \"Event Joined!\",\n        message: \"You've successfully joined the community event. Let's make some impact together!\",\n        data: { eventId }\n      });\n\n      res.json({ success: true, participation });\n    } catch (error) {\n      console.error(\"Error joining event:\", error);\n      if (error instanceof Error && error.message === \"Already participating in this event\") {\n        return res.status(400).json({ message: error.message });\n      }\n      res.status(500).json({ message: \"Failed to join event\" });\n    }\n  });\n\n  app.get('/api/events/:eventId/participation', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { eventId } = req.params;\n      \n      const participation = await storage.getUserEventParticipation(userId, eventId);\n      res.json(participation);\n    } catch (error) {\n      console.error(\"Error fetching participation:\", error);\n      res.status(500).json({ message: \"Failed to fetch participation status\" });\n    }\n  });\n\n  app.post('/api/events/:eventId/progress', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { eventId } = req.params;\n      const { progress, contribution } = req.body;\n      \n      await storage.updateEventProgress(userId, eventId, progress, contribution);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating event progress:\", error);\n      res.status(500).json({ message: \"Failed to update progress\" });\n    }\n  });\n\n  app.get('/api/events/:eventId/leaderboard', async (req, res) => {\n    try {\n      const { eventId } = req.params;\n      const leaderboard = await storage.getEventLeaderboard(eventId);\n      res.json(leaderboard);\n    } catch (error) {\n      console.error(\"Error fetching event leaderboard:\", error);\n      res.status(500).json({ message: \"Failed to fetch leaderboard\" });\n    }\n  });\n\n  app.get('/api/user/events', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const userEvents = await storage.getUserEvents(userId);\n      res.json(userEvents);\n    } catch (error) {\n      console.error(\"Error fetching user events:\", error);\n      res.status(500).json({ message: \"Failed to fetch user events\" });\n    }\n  });\n\n  // AI Personality Evolution API routes\n  app.get('/api/ai/personality/:aiName', async (req, res) => {\n    try {\n      const { aiName } = req.params;\n      \n      if (![\"grok\", \"ani\"].includes(aiName)) {\n        return res.status(400).json({ message: \"Invalid AI name\" });\n      }\n      \n      const personality = await storage.getAiPersonality(aiName as \"grok\" | \"ani\");\n      const insights = await storage.getAiPersonalityInsights(aiName as \"grok\" | \"ani\");\n      \n      res.json({\n        personality,\n        insights,\n        evolutionStatus: personality ? `Level ${personality.evolutionLevel} - ${insights.totalInteractions} total interactions` : \"Not evolved yet\"\n      });\n    } catch (error) {\n      console.error(\"Error fetching AI personality:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI personality data\" });\n    }\n  });\n\n  app.get('/api/ai/profile/:aiName', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { aiName } = req.params;\n      \n      if (![\"grok\", \"ani\"].includes(aiName)) {\n        return res.status(400).json({ message: \"Invalid AI name\" });\n      }\n      \n      const profile = await storage.getUserAiProfile(userId, aiName as \"grok\" | \"ani\");\n      const interactionHistory = await storage.getUserAiInteractionHistory(userId, aiName as \"grok\" | \"ani\", 5);\n      \n      res.json({\n        profile,\n        recentInteractions: interactionHistory,\n        relationshipStatus: profile?.relationshipLevel || \"stranger\",\n        personalizedFeatures: {\n          adaptedCommunication: profile?.communicationStyle || \"casual\",\n          topTopics: Object.keys(profile?.topicInterests || {}).slice(0, 3),\n          satisfaction: profile?.averageSatisfaction || 0\n        }\n      });\n    } catch (error) {\n      console.error(\"Error fetching user AI profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch AI relationship profile\" });\n    }\n  });\n\n  app.post('/api/ai/feedback', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { aiName, messageId, satisfaction } = req.body;\n      \n      if (![\"grok\", \"ani\"].includes(aiName) || !satisfaction || satisfaction < 1 || satisfaction > 5) {\n        return res.status(400).json({ message: \"Invalid feedback data\" });\n      }\n\n      // Update the interaction with user satisfaction\n      const { userAiInteractions } = await import(\"@shared/schema\");\n      await db\n        .update(userAiInteractions)\n        .set({ userSatisfaction: satisfaction })\n        .where(eq(userAiInteractions.id, messageId));\n\n      // Update user profile average satisfaction\n      const profile = await storage.getUserAiProfile(userId, aiName);\n      if (profile) {\n        const newAverage = ((profile.averageSatisfaction * (profile.totalConversations - 1)) + satisfaction) / profile.totalConversations;\n        await storage.createOrUpdateUserAiProfile({\n          ...profile,\n          averageSatisfaction: newAverage\n        });\n      }\n\n      res.json({ success: true, message: \"Feedback recorded! This helps me learn and improve.\" });\n    } catch (error) {\n      console.error(\"Error processing AI feedback:\", error);\n      res.status(500).json({ message: \"Failed to record feedback\" });\n    }\n  });\n\n  // Notification API routes\n  app.get('/api/notifications', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.post('/api/notifications', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const notification = await storage.createNotification({\n        ...req.body,\n        userId,\n      });\n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error creating notification:\", error);\n      res.status(500).json({ message: \"Failed to create notification\" });\n    }\n  });\n\n  app.patch('/api/notifications/:id/read', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { id } = req.params;\n      await storage.markNotificationRead(id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  app.patch('/api/notifications/mark-all-read', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      await storage.markAllNotificationsRead(userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking all notifications as read:\", error);\n      res.status(500).json({ message: \"Failed to mark all notifications as read\" });\n    }\n  });\n\n  app.delete('/api/notifications/:id', requireWalletAuth, async (req: any, res) => {\n    try {\n      const userId = req.userId;\n      const { id } = req.params;\n      await storage.deleteNotification(id, userId);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting notification:\", error);\n      res.status(500).json({ message: \"Failed to delete notification\" });\n    }\n  });\n\n  // Telegram webhook endpoint\n  app.post('/api/telegram/webhook', async (req, res) => {\n    try {\n      await telegramBot.handleWebhook(req.body);\n      res.status(200).send('OK');\n    } catch (error) {\n      console.error('Telegram webhook error:', error);\n      res.status(500).send('Error');\n    }\n  });\n\n  // Initialize Telegram bot\n  try {\n    await telegramBot.initialize();\n  } catch (error) {\n    console.error('Failed to initialize Telegram bot:', error);\n  }\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":47593},"server/storage.ts":{"content":"import {\n  users,\n  challenges,\n  userChallenges,\n  storyChapters,\n  storyVotes,\n  nfts,\n  chatMessages,\n  communitySubmissions,\n  governanceProposals,\n  governanceVotes,\n  telegramUsers,\n  notifications,\n  type User,\n  type UpsertUser,\n  type Challenge,\n  type InsertChallenge,\n  type UserChallenge,\n  type InsertUserChallenge,\n  type StoryChapter,\n  type InsertStoryChapter,\n  type StoryVote,\n  type InsertStoryVote,\n  type NFT,\n  type InsertNFT,\n  type ChatMessage,\n  type InsertChatMessage,\n  type CommunitySubmission,\n  type InsertCommunitySubmission,\n  type GovernanceProposal,\n  type InsertGovernanceProposal,\n  type GovernanceVote,\n  type InsertGovernanceVote,\n  type TelegramUser,\n  type InsertTelegramUser,\n  type Notification,\n  type InsertNotification,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, sql, count } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations (wallet authentication)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserBySolanaAddress(solanaAddress: string): Promise<User | undefined>;\n  createUser(userData: { profileName: string; solanaAddress: string; pin: string; faction?: \"grok\" | \"ani\" }): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserFaction(userId: string, faction: \"grok\" | \"ani\"): Promise<void>;\n  updateUserStats(userId: string, stats: Partial<Pick<User, 'gacBalance' | 'totalXP' | 'grokPoints' | 'aniPoints' | 'level'>>): Promise<void>;\n  addUserPoints(userId: string, faction: \"grok\" | \"ani\", points: number): Promise<void>;\n  \n  // Telegram operations\n  upsertTelegramUser(telegramUser: InsertTelegramUser): Promise<TelegramUser>;\n  getTelegramUser(telegramId: string): Promise<TelegramUser | undefined>;\n  getTelegramLinkedUser(telegramId: string): Promise<User | undefined>;\n  getLinkedTelegramUsers(): Promise<TelegramUser[]>;\n  linkTelegramAccount(userId: string, telegramId: string): Promise<void>;\n  \n  // Challenge operations\n  getActiveChallenges(): Promise<Challenge[]>;\n  getChallengesByFaction(faction: \"grok\" | \"ani\"): Promise<Challenge[]>;\n  getChallengeById(challengeId: string): Promise<Challenge | undefined>;\n  createChallenge(challenge: InsertChallenge): Promise<Challenge>;\n  getUserChallenges(userId: string): Promise<UserChallenge[]>;\n  submitChallenge(submission: InsertUserChallenge): Promise<UserChallenge>;\n  \n  // Story operations\n  getCurrentStoryChapter(): Promise<StoryChapter | undefined>;\n  getStoryChapters(): Promise<StoryChapter[]>;\n  createStoryVote(vote: InsertStoryVote): Promise<StoryVote>;\n  getChapterVotes(chapterId: string): Promise<{ choice: string; count: number; totalVotingPower: string }[]>;\n  \n  // NFT operations\n  getUserNFTs(userId: string): Promise<NFT[]>;\n  getMarketplaceNFTs(): Promise<NFT[]>;\n  createNFT(nft: InsertNFT): Promise<NFT>;\n  transferNFT(nftId: string, newOwnerId: string): Promise<void>;\n  listNFTForSale(nftId: string, price: string, ownerId: string): Promise<void>;\n  updateUserBalance(userId: string, newBalance: string): Promise<void>;\n  updateUserXP(userId: string, newXP: string): Promise<void>;\n  \n  // Chat operations\n  saveChatMessage(message: InsertChatMessage): Promise<ChatMessage>;\n  getUserChatHistory(userId: string, aiType: \"grok\" | \"ani\", limit?: number): Promise<ChatMessage[]>;\n  \n  // Community operations\n  getCommunitySubmissions(category?: string): Promise<(CommunitySubmission & { author: User })[]>;\n  createCommunitySubmission(submission: InsertCommunitySubmission): Promise<CommunitySubmission>;\n  voteOnSubmission(submissionId: string, isUpvote: boolean): Promise<void>;\n  \n  // Leaderboard operations\n  getGrokLeaderboard(limit?: number): Promise<User[]>;\n  getAniLeaderboard(limit?: number): Promise<User[]>;\n  \n  // Governance operations\n  getGovernanceProposals(): Promise<(GovernanceProposal & { author: User })[]>;\n  createGovernanceProposal(proposal: InsertGovernanceProposal): Promise<GovernanceProposal>;\n  createGovernanceVote(vote: InsertGovernanceVote): Promise<GovernanceVote>;\n  getUserGovernanceVotes(userId: string): Promise<GovernanceVote[]>;\n  getExistingGovernanceVote(userId: string, proposalId: string): Promise<GovernanceVote | undefined>;\n  \n  // Enhanced leaderboard operations\n  getLeaderboard(options: { faction: 'grok' | 'ani'; category: 'points' | 'xp' | 'gac' | 'nfts' | 'voting'; period: 'daily' | 'weekly' | 'monthly' | 'all-time'; limit: number }): Promise<User[]>;\n  getFactionWarStats(): Promise<{ grokTotal: number; aniTotal: number; grokPercentage: number; aniPercentage: number }>;\n  getOverallLeaderboard(options: { category: 'xp' | 'gac' | 'nfts' | 'challenges'; limit: number }): Promise<User[]>;\n  \n  // Analytics operations\n  getDashboardStats(): Promise<any>;\n  getPredictionMarkets(): Promise<any[]>;\n  \n  // Notification operations\n  getUserNotifications(userId: string): Promise<any[]>;\n  createNotification(notification: any): Promise<any>;\n  markNotificationRead(notificationId: string, userId: string): Promise<void>;\n  markAllNotificationsRead(userId: string): Promise<void>;\n  deleteNotification(notificationId: string, userId: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserBySolanaAddress(solanaAddress: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.solanaAddress, solanaAddress));\n    return user;\n  }\n\n  async createUser(userData: { profileName: string; solanaAddress: string; pin: string; faction?: \"grok\" | \"ani\" }): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        profileName: userData.profileName,\n        solanaAddress: userData.solanaAddress,\n        pin: userData.pin,\n        faction: userData.faction || \"grok\",\n        gacBalance: \"0.00\",\n        totalXP: 0,\n        grokPoints: 0,\n        aniPoints: 0,\n        level: 1\n      })\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserFaction(userId: string, faction: \"grok\" | \"ani\"): Promise<void> {\n    await db\n      .update(users)\n      .set({ faction, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserStats(userId: string, stats: Partial<Pick<User, 'gacBalance' | 'totalXP' | 'grokPoints' | 'aniPoints' | 'level'>>): Promise<void> {\n    await db\n      .update(users)\n      .set({ ...stats, updatedAt: new Date() })\n      .where(eq(users.id, userId));\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async addUserPoints(userId: string, faction: \"grok\" | \"ani\", points: number): Promise<void> {\n    if (faction === \"grok\") {\n      await db\n        .update(users)\n        .set({ \n          grokPoints: sql`${users.grokPoints} + ${points}`,\n          totalXP: sql`${users.totalXP} + ${points}`,\n          updatedAt: new Date() \n        })\n        .where(eq(users.id, userId));\n    } else {\n      await db\n        .update(users)\n        .set({ \n          aniPoints: sql`${users.aniPoints} + ${points}`,\n          totalXP: sql`${users.totalXP} + ${points}`,\n          updatedAt: new Date() \n        })\n        .where(eq(users.id, userId));\n    }\n  }\n\n  // Telegram operations\n  async upsertTelegramUser(telegramUserData: InsertTelegramUser): Promise<TelegramUser> {\n    const [telegramUser] = await db\n      .insert(telegramUsers)\n      .values(telegramUserData)\n      .onConflictDoUpdate({\n        target: telegramUsers.telegramId,\n        set: {\n          ...telegramUserData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return telegramUser;\n  }\n\n  async getTelegramUser(telegramId: string): Promise<TelegramUser | undefined> {\n    const [telegramUser] = await db\n      .select()\n      .from(telegramUsers)\n      .where(eq(telegramUsers.telegramId, telegramId));\n    return telegramUser;\n  }\n\n  async getTelegramLinkedUser(telegramId: string): Promise<User | undefined> {\n    const result = await db\n      .select({\n        user: users,\n      })\n      .from(telegramUsers)\n      .innerJoin(users, eq(telegramUsers.userId, users.id))\n      .where(and(eq(telegramUsers.telegramId, telegramId), eq(telegramUsers.isLinked, true)));\n    \n    return result[0]?.user;\n  }\n\n  async getLinkedTelegramUsers(): Promise<TelegramUser[]> {\n    return await db.select().from(telegramUsers).where(eq(telegramUsers.isLinked, true));\n  }\n\n  async linkTelegramAccount(userId: string, telegramId: string): Promise<void> {\n    await db\n      .update(telegramUsers)\n      .set({ \n        userId,\n        isLinked: true,\n        updatedAt: new Date() \n      })\n      .where(eq(telegramUsers.telegramId, telegramId));\n  }\n\n  // Challenge operations\n  async getActiveChallenges(): Promise<Challenge[]> {\n    return await db.select().from(challenges).where(eq(challenges.isActive, true));\n  }\n\n  async getChallengesByFaction(faction: \"grok\" | \"ani\"): Promise<Challenge[]> {\n    return await db\n      .select()\n      .from(challenges)\n      .where(and(eq(challenges.faction, faction), eq(challenges.isActive, true)));\n  }\n\n  async createChallenge(challenge: InsertChallenge): Promise<Challenge> {\n    const [newChallenge] = await db.insert(challenges).values(challenge).returning();\n    return newChallenge;\n  }\n\n  async getUserChallenges(userId: string): Promise<UserChallenge[]> {\n    return await db\n      .select()\n      .from(userChallenges)\n      .where(eq(userChallenges.userId, userId))\n      .orderBy(desc(userChallenges.createdAt));\n  }\n\n  async getChallengeById(challengeId: string): Promise<Challenge | undefined> {\n    const [challenge] = await db\n      .select()\n      .from(challenges)\n      .where(eq(challenges.id, challengeId));\n    return challenge || undefined;\n  }\n\n  async submitChallenge(submission: InsertUserChallenge): Promise<UserChallenge> {\n    const [newSubmission] = await db.insert(userChallenges).values(submission).returning();\n    return newSubmission;\n  }\n\n  // Story operations\n  async getCurrentStoryChapter(): Promise<StoryChapter | undefined> {\n    const [chapter] = await db\n      .select()\n      .from(storyChapters)\n      .where(eq(storyChapters.isActive, true))\n      .orderBy(desc(storyChapters.chapterNumber))\n      .limit(1);\n    return chapter;\n  }\n\n  async getStoryChapters(): Promise<StoryChapter[]> {\n    return await db\n      .select()\n      .from(storyChapters)\n      .orderBy(storyChapters.chapterNumber);\n  }\n\n  async createStoryVote(vote: InsertStoryVote): Promise<StoryVote> {\n    const [newVote] = await db.insert(storyVotes).values(vote).returning();\n    return newVote;\n  }\n\n  async getExistingVote(userId: string, chapterId: string): Promise<StoryVote | undefined> {\n    const [vote] = await db\n      .select()\n      .from(storyVotes)\n      .where(and(eq(storyVotes.userId, userId), eq(storyVotes.chapterId, chapterId)));\n    return vote;\n  }\n\n  async getChapterVotes(chapterId: string): Promise<{ choice: string; count: number; totalVotingPower: string }[]> {\n    const result = await db\n      .select({\n        choice: storyVotes.choice,\n        count: count(storyVotes.id),\n        totalVotingPower: sql<string>`SUM(${storyVotes.votingPower})`,\n      })\n      .from(storyVotes)\n      .where(eq(storyVotes.chapterId, chapterId))\n      .groupBy(storyVotes.choice);\n\n    return result.map(row => ({\n      choice: row.choice,\n      count: Number(row.count),\n      totalVotingPower: row.totalVotingPower || \"0\",\n    }));\n  }\n\n  // NFT operations\n  async getUserNFTs(userId: string): Promise<NFT[]> {\n    return await db.select().from(nfts).where(eq(nfts.ownerId, userId));\n  }\n\n  async getMarketplaceNFTs(): Promise<NFT[]> {\n    return await db.select().from(nfts).where(eq(nfts.isForSale, true));\n  }\n\n  async createNFT(nft: InsertNFT): Promise<NFT> {\n    const [newNFT] = await db.insert(nfts).values(nft).returning();\n    return newNFT;\n  }\n\n  async transferNFT(nftId: string, newOwnerId: string): Promise<void> {\n    await db\n      .update(nfts)\n      .set({ ownerId: newOwnerId, isForSale: false, price: null })\n      .where(eq(nfts.id, nftId));\n  }\n\n  async listNFTForSale(nftId: string, price: string, ownerId: string): Promise<void> {\n    await db\n      .update(nfts)\n      .set({ isForSale: true, price: price })\n      .where(and(eq(nfts.id, nftId), eq(nfts.ownerId, ownerId)));\n  }\n\n  async updateUserBalance(userId: string, newBalance: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ gacBalance: newBalance })\n      .where(eq(users.id, userId));\n  }\n\n  async updateUserXP(userId: string, newXP: string): Promise<void> {\n    await db\n      .update(users)\n      .set({ totalXP: parseInt(newXP) })\n      .where(eq(users.id, userId));\n  }\n\n  // Chat operations\n  async saveChatMessage(message: InsertChatMessage): Promise<ChatMessage> {\n    const [newMessage] = await db.insert(chatMessages).values(message).returning();\n    return newMessage;\n  }\n\n  async getUserChatHistory(userId: string, aiType: \"grok\" | \"ani\", limit = 50): Promise<ChatMessage[]> {\n    return await db\n      .select()\n      .from(chatMessages)\n      .where(and(eq(chatMessages.userId, userId), eq(chatMessages.aiType, aiType)))\n      .orderBy(desc(chatMessages.createdAt))\n      .limit(limit);\n  }\n\n  // Community operations\n  async getCommunitySubmissions(category?: string): Promise<(CommunitySubmission & { author: User })[]> {\n    const query = db\n      .select({\n        id: communitySubmissions.id,\n        title: communitySubmissions.title,\n        description: communitySubmissions.description,\n        category: communitySubmissions.category,\n        fileUrl: communitySubmissions.fileUrl,\n        authorId: communitySubmissions.authorId,\n        upvotes: communitySubmissions.upvotes,\n        downvotes: communitySubmissions.downvotes,\n        status: communitySubmissions.status,\n        createdAt: communitySubmissions.createdAt,\n        author: users,\n      })\n      .from(communitySubmissions)\n      .innerJoin(users, eq(communitySubmissions.authorId, users.id))\n      .orderBy(desc(communitySubmissions.createdAt));\n\n    if (category) {\n      query.where(eq(communitySubmissions.category, category as any));\n    }\n\n    return await query;\n  }\n\n  async createCommunitySubmission(submission: InsertCommunitySubmission): Promise<CommunitySubmission> {\n    const [newSubmission] = await db.insert(communitySubmissions).values(submission).returning();\n    return newSubmission;\n  }\n\n  async voteOnSubmission(submissionId: string, isUpvote: boolean): Promise<void> {\n    if (isUpvote) {\n      await db\n        .update(communitySubmissions)\n        .set({ upvotes: sql`${communitySubmissions.upvotes} + 1` })\n        .where(eq(communitySubmissions.id, submissionId));\n    } else {\n      await db\n        .update(communitySubmissions)\n        .set({ downvotes: sql`${communitySubmissions.downvotes} + 1` })\n        .where(eq(communitySubmissions.id, submissionId));\n    }\n  }\n\n  // Leaderboard operations\n  async getGrokLeaderboard(limit = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.grokPoints))\n      .limit(limit);\n  }\n\n  async getAniLeaderboard(limit = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.aniPoints))\n      .limit(limit);\n  }\n\n  // Governance operations\n  async getGovernanceProposals(): Promise<(GovernanceProposal & { author: User })[]> {\n    const { governanceProposals } = await import(\"@shared/schema\");\n    return await db\n      .select({\n        id: governanceProposals.id,\n        title: governanceProposals.title,\n        description: governanceProposals.description,\n        type: governanceProposals.type,\n        authorId: governanceProposals.authorId,\n        status: governanceProposals.status,\n        yesVotes: governanceProposals.yesVotes,\n        noVotes: governanceProposals.noVotes,\n        totalVotingPower: governanceProposals.totalVotingPower,\n        requiredQuorum: governanceProposals.requiredQuorum,\n        endDate: governanceProposals.endDate,\n        createdAt: governanceProposals.createdAt,\n        author: users,\n      })\n      .from(governanceProposals)\n      .innerJoin(users, eq(governanceProposals.authorId, users.id))\n      .orderBy(desc(governanceProposals.createdAt));\n  }\n\n  async createGovernanceProposal(proposal: InsertGovernanceProposal): Promise<GovernanceProposal> {\n    const { governanceProposals } = await import(\"@shared/schema\");\n    const [newProposal] = await db.insert(governanceProposals).values(proposal).returning();\n    return newProposal;\n  }\n\n  async createGovernanceVote(vote: InsertGovernanceVote): Promise<GovernanceVote> {\n    const { governanceVotes } = await import(\"@shared/schema\");\n    \n    // Check if user already voted\n    const existing = await this.getExistingGovernanceVote(vote.userId, vote.proposalId);\n    if (existing) {\n      throw new Error(\"User has already voted on this proposal\");\n    }\n\n    const [newVote] = await db.insert(governanceVotes).values(vote).returning();\n    \n    // Update proposal vote counts\n    const { governanceProposals } = await import(\"@shared/schema\");\n    const votingPowerNum = parseFloat(vote.votingPower);\n    \n    if (vote.vote === \"yes\") {\n      await db\n        .update(governanceProposals)\n        .set({ \n          yesVotes: sql`${governanceProposals.yesVotes} + 1`,\n          totalVotingPower: sql`${governanceProposals.totalVotingPower} + ${votingPowerNum}`\n        })\n        .where(eq(governanceProposals.id, vote.proposalId));\n    } else {\n      await db\n        .update(governanceProposals)\n        .set({ \n          noVotes: sql`${governanceProposals.noVotes} + 1`,\n          totalVotingPower: sql`${governanceProposals.totalVotingPower} + ${votingPowerNum}`\n        })\n        .where(eq(governanceProposals.id, vote.proposalId));\n    }\n    \n    return newVote;\n  }\n\n  async getUserGovernanceVotes(userId: string): Promise<GovernanceVote[]> {\n    const { governanceVotes } = await import(\"@shared/schema\");\n    return await db\n      .select()\n      .from(governanceVotes)\n      .where(eq(governanceVotes.userId, userId))\n      .orderBy(desc(governanceVotes.createdAt));\n  }\n\n  async getExistingGovernanceVote(userId: string, proposalId: string): Promise<GovernanceVote | undefined> {\n    const { governanceVotes } = await import(\"@shared/schema\");\n    const [vote] = await db\n      .select()\n      .from(governanceVotes)\n      .where(and(eq(governanceVotes.userId, userId), eq(governanceVotes.proposalId, proposalId)));\n    return vote;\n  }\n\n  // Enhanced leaderboard operations\n  async getLeaderboard(options: { faction: 'grok' | 'ani'; category: 'points' | 'xp' | 'gac' | 'nfts' | 'voting'; period: 'daily' | 'weekly' | 'monthly' | 'all-time'; limit: number }): Promise<User[]> {\n    let query = db.select().from(users);\n    \n    // Filter by faction\n    if (options.faction) {\n      query = query.where(eq(users.faction, options.faction));\n    }\n    \n    // Order by category\n    switch (options.category) {\n      case 'points':\n        query = query.orderBy(desc(options.faction === 'grok' ? users.grokPoints : users.aniPoints));\n        break;\n      case 'xp':\n        query = query.orderBy(desc(users.totalXP));\n        break;\n      case 'gac':\n        query = query.orderBy(desc(users.gacBalance));\n        break;\n      case 'nfts':\n        // For now, order by level as proxy for NFT activity\n        query = query.orderBy(desc(users.level));\n        break;\n      case 'voting':\n        // Order by GAC balance as voting power proxy\n        query = query.orderBy(desc(users.gacBalance));\n        break;\n    }\n    \n    return await query.limit(options.limit);\n  }\n\n  async getFactionWarStats(): Promise<{ grokTotal: number; aniTotal: number; grokPercentage: number; aniPercentage: number }> {\n    const grokUsers = await db.select().from(users).where(eq(users.faction, \"grok\"));\n    const aniUsers = await db.select().from(users).where(eq(users.faction, \"ani\"));\n    \n    const grokTotal = grokUsers.length;\n    const aniTotal = aniUsers.length;\n    const total = grokTotal + aniTotal;\n    \n    return {\n      grokTotal,\n      aniTotal,\n      grokPercentage: total > 0 ? (grokTotal / total) * 100 : 50,\n      aniPercentage: total > 0 ? (aniTotal / total) * 100 : 50,\n    };\n  }\n\n  async getOverallLeaderboard(options: { category: 'xp' | 'gac' | 'nfts' | 'challenges'; limit: number }): Promise<User[]> {\n    let query = db.select().from(users);\n    \n    switch (options.category) {\n      case 'xp':\n        query = query.orderBy(desc(users.totalXP));\n        break;\n      case 'gac':\n        query = query.orderBy(desc(users.gacBalance));\n        break;\n      case 'nfts':\n        query = query.orderBy(desc(users.level)); // Proxy for NFT activity\n        break;\n      case 'challenges':\n        query = query.orderBy(desc(users.level)); // Proxy for challenge completion\n        break;\n    }\n    \n    return await query.limit(options.limit);\n  }\n\n  // Analytics operations\n  async getDashboardStats(): Promise<any> {\n    // Get total user count using Drizzle ORM\n    const totalUsersQuery = await db\n      .select({ count: count(users.id) })\n      .from(users);\n    \n    const totalUsers = totalUsersQuery[0]?.count || 0;\n    \n    // Get faction distribution using Drizzle ORM\n    const factionStatsQuery = await db\n      .select({\n        faction: users.faction,\n        count: count(users.id),\n        avgActivity: sql<number>`AVG(${users.totalXP})`\n      })\n      .from(users)\n      .where(sql`${users.faction} IS NOT NULL`)\n      .groupBy(users.faction);\n    \n    const dailyActiveUsers = Math.floor(totalUsers * 0.15); // Estimate 15% daily active\n    const weeklyGrowth = 8.5; // Demo growth rate\n    \n    const factionBalance = {\n      grok: { users: 0, activity: 0 },\n      ani: { users: 0, activity: 0 }\n    };\n    \n    factionStatsQuery.forEach((row) => {\n      if (row.faction === 'grok') {\n        factionBalance.grok = {\n          users: Number(row.count),\n          activity: Number(row.avgActivity || 0)\n        };\n      } else if (row.faction === 'ani') {\n        factionBalance.ani = {\n          users: Number(row.count),\n          activity: Number(row.avgActivity || 0)\n        };\n      }\n    });\n\n    return {\n      totalUsers,\n      dailyActiveUsers,\n      weeklyGrowth,\n      factionBalance,\n      marketSentiment: {\n        overall: 7.8, // AI-calculated market confidence\n        grokBias: 8.2,\n        aniBias: 7.4\n      }\n    };\n  }\n\n  async getPredictionMarkets(): Promise<any[]> {\n    // AI-generated prediction markets with realistic data\n    return [\n      {\n        id: \"pred-1\",\n        question: \"Will Grok faction dominate next month's challenges?\",\n        description: \"Based on current logic challenge completion rates and user engagement patterns\",\n        category: \"community\",\n        confidence: 73,\n        trend: \"bullish\",\n        participants: 127,\n        deadline: \"2025-10-15T00:00:00Z\"\n      },\n      {\n        id: \"pred-2\", \n        question: \"Platform reaches 10,000 active users by year-end?\",\n        description: \"Growth trajectory analysis considering current adoption rate and market conditions\",\n        category: \"economy\",\n        confidence: 65,\n        trend: \"bullish\",\n        participants: 89,\n        deadline: \"2025-12-31T00:00:00Z\"\n      },\n      {\n        id: \"pred-3\",\n        question: \"StoryChain narrative will favor Ani's creative approach?\",\n        description: \"Community voting patterns suggest preference for emotional storytelling over pure logic\",\n        category: \"story\", \n        confidence: 58,\n        trend: \"neutral\",\n        participants: 203,\n        deadline: \"2025-09-30T00:00:00Z\"\n      }\n    ];\n  }\n\n  // Enhanced analytics methods\n  async getFactionPerformanceMetrics(): Promise<any> {\n    // Get challenge completion rates by faction\n    const challengeStats = await db\n      .select({\n        faction: challenges.faction,\n        totalChallenges: count(challenges.id),\n        completedChallenges: sql<number>`COUNT(CASE WHEN ${userChallenges.isCompleted} = true THEN 1 END)`,\n        averageScore: sql<number>`AVG(${userChallenges.score})`\n      })\n      .from(challenges)\n      .leftJoin(userChallenges, eq(challenges.id, userChallenges.challengeId))\n      .groupBy(challenges.faction);\n\n    // Get NFT distribution by faction\n    const nftStats = await db\n      .select({\n        faction: nfts.faction,\n        totalNFTs: count(nfts.id),\n        rarity: nfts.rarity,\n        rarityCount: count(nfts.rarity)\n      })\n      .from(nfts)\n      .groupBy(nfts.faction, nfts.rarity);\n\n    // Get user engagement metrics by faction\n    const engagementStats = await db\n      .select({\n        faction: users.faction,\n        totalUsers: count(users.id),\n        averageXP: sql<number>`AVG(${users.totalXP})`,\n        averageGAC: sql<number>`AVG(CAST(${users.gacBalance} AS NUMERIC))`,\n        averageLevel: sql<number>`AVG(${users.level})`,\n        averageStreak: sql<number>`AVG(${users.loginStreak})`\n      })\n      .from(users)\n      .where(sql`${users.faction} IS NOT NULL`)\n      .groupBy(users.faction);\n\n    // Process and structure the data\n    const factionMetrics = {\n      grok: {\n        challenges: { total: 0, completed: 0, completionRate: 0, averageScore: 0 },\n        nfts: { total: 0, legendary: 0, epic: 0, rare: 0, common: 0 },\n        engagement: { users: 0, avgXP: 0, avgGAC: 0, avgLevel: 0, avgStreak: 0 }\n      },\n      ani: {\n        challenges: { total: 0, completed: 0, completionRate: 0, averageScore: 0 },\n        nfts: { total: 0, legendary: 0, epic: 0, rare: 0, common: 0 },\n        engagement: { users: 0, avgXP: 0, avgGAC: 0, avgLevel: 0, avgStreak: 0 }\n      }\n    };\n\n    // Process challenge stats\n    challengeStats.forEach(stat => {\n      const faction = stat.faction as 'grok' | 'ani';\n      if (factionMetrics[faction]) {\n        const completed = Number(stat.completedChallenges || 0);\n        const total = Number(stat.totalChallenges || 0);\n        factionMetrics[faction].challenges = {\n          total,\n          completed,\n          completionRate: total > 0 ? (completed / total) * 100 : 0,\n          averageScore: Number(stat.averageScore || 0)\n        };\n      }\n    });\n\n    // Process NFT stats\n    nftStats.forEach(stat => {\n      const faction = stat.faction as 'grok' | 'ani';\n      if (factionMetrics[faction]) {\n        factionMetrics[faction].nfts.total += Number(stat.totalNFTs);\n        const rarity = stat.rarity;\n        if (rarity && factionMetrics[faction].nfts.hasOwnProperty(rarity)) {\n          (factionMetrics[faction].nfts as any)[rarity] = Number(stat.rarityCount);\n        }\n      }\n    });\n\n    // Process engagement stats\n    engagementStats.forEach(stat => {\n      const faction = stat.faction as 'grok' | 'ani';\n      if (factionMetrics[faction]) {\n        factionMetrics[faction].engagement = {\n          users: Number(stat.totalUsers || 0),\n          avgXP: Number(stat.averageXP || 0),\n          avgGAC: Number(stat.averageGAC || 0),\n          avgLevel: Number(stat.averageLevel || 0),\n          avgStreak: Number(stat.averageStreak || 0)\n        };\n      }\n    });\n\n    return factionMetrics;\n  }\n\n  async getTimeBasedAnalytics(period: 'daily' | 'weekly' | 'monthly' = 'daily'): Promise<any> {\n    const now = new Date();\n    let timeFrame: Date;\n    \n    switch (period) {\n      case 'daily':\n        timeFrame = new Date(now.getTime() - 24 * 60 * 60 * 1000);\n        break;\n      case 'weekly':\n        timeFrame = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        break;\n      case 'monthly':\n        timeFrame = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        break;\n    }\n\n    // Get new user registrations by faction\n    const newUsers = await db\n      .select({\n        faction: users.faction,\n        count: count(users.id),\n        createdAt: users.createdAt\n      })\n      .from(users)\n      .where(sql`${users.createdAt} >= ${timeFrame} AND ${users.faction} IS NOT NULL`)\n      .groupBy(users.faction, users.createdAt);\n\n    // Get challenge activity in time period\n    const challengeActivity = await db\n      .select({\n        faction: challenges.faction,\n        submissions: count(userChallenges.id),\n        completions: sql<number>`COUNT(CASE WHEN ${userChallenges.isCompleted} = true THEN 1 END)`\n      })\n      .from(challenges)\n      .leftJoin(userChallenges, eq(challenges.id, userChallenges.challengeId))\n      .where(sql`${userChallenges.createdAt} >= ${timeFrame}`)\n      .groupBy(challenges.faction);\n\n    return {\n      period,\n      timeFrame: timeFrame.toISOString(),\n      newUsers: newUsers.reduce((acc, curr) => {\n        const faction = curr.faction as 'grok' | 'ani';\n        if (faction) {\n          acc[faction] = (acc[faction] || 0) + Number(curr.count);\n        }\n        return acc;\n      }, { grok: 0, ani: 0 }),\n      challengeActivity: challengeActivity.reduce((acc, curr) => {\n        const faction = curr.faction as 'grok' | 'ani';\n        if (faction) {\n          acc[faction] = {\n            submissions: Number(curr.submissions || 0),\n            completions: Number(curr.completions || 0)\n          };\n        }\n        return acc;\n      }, { grok: { submissions: 0, completions: 0 }, ani: { submissions: 0, completions: 0 } })\n    };\n  }\n\n  // Faction Loyalty System\n  async calculateLoyaltyScore(userId: string): Promise<{ score: number; tier: string; multiplier: number }> {\n    const user = await this.getUser(userId);\n    if (!user) throw new Error(\"User not found\");\n\n    // Base loyalty factors\n    const factionJoinDate = user.factionJoinDate || user.createdAt;\n    const daysInFaction = Math.floor((Date.now() - factionJoinDate.getTime()) / (24 * 60 * 60 * 1000));\n    const loginStreak = user.loginStreak || 0;\n    const consecutiveDaysActive = user.consecutiveDaysActive || 0;\n    \n    // Calculate faction activity\n    const factionPoints = user.faction === 'grok' ? (user.grokPoints || 0) : (user.aniPoints || 0);\n    const otherFactionPoints = user.faction === 'grok' ? (user.aniPoints || 0) : (user.grokPoints || 0);\n    const factionPurity = factionPoints > 0 ? factionPoints / (factionPoints + otherFactionPoints) : 1;\n\n    // Get user's challenges completed for their faction\n    const factionChallenges = await db\n      .select({ count: count(userChallenges.id) })\n      .from(userChallenges)\n      .leftJoin(challenges, eq(userChallenges.challengeId, challenges.id))\n      .where(and(\n        eq(userChallenges.userId, userId),\n        eq(userChallenges.completed, true),\n        eq(challenges.faction, user.faction)\n      ));\n    \n    const completedFactionChallenges = Number(factionChallenges[0]?.count || 0);\n\n    // Calculate loyalty score (0-10000 scale)\n    let loyaltyScore = 0;\n    loyaltyScore += daysInFaction * 10; // 10 points per day in faction\n    loyaltyScore += loginStreak * 25; // 25 points per consecutive login\n    loyaltyScore += consecutiveDaysActive * 15; // 15 points per active day\n    loyaltyScore += factionPoints * 2; // 2 points per faction point\n    loyaltyScore += Math.round(factionPurity * 500); // Up to 500 bonus for faction purity\n    loyaltyScore += completedFactionChallenges * 100; // 100 points per faction challenge\n    \n    // Determine tier and multiplier\n    let tier: string;\n    let multiplier: number;\n    \n    if (loyaltyScore >= 5000) {\n      tier = \"diamond\";\n      multiplier = 2.0;\n    } else if (loyaltyScore >= 2500) {\n      tier = \"platinum\";\n      multiplier = 1.75;\n    } else if (loyaltyScore >= 1000) {\n      tier = \"gold\";\n      multiplier = 1.5;\n    } else if (loyaltyScore >= 300) {\n      tier = \"silver\";\n      multiplier = 1.25;\n    } else {\n      tier = \"bronze\";\n      multiplier = 1.0;\n    }\n\n    return { score: loyaltyScore, tier, multiplier };\n  }\n\n  async updateUserLoyalty(userId: string): Promise<void> {\n    const { score, tier } = await this.calculateLoyaltyScore(userId);\n    \n    await db\n      .update(users)\n      .set({ \n        loyaltyScore: score,\n        loyaltyTier: tier as any,\n        updatedAt: new Date()\n      })\n      .where(eq(users.id, userId));\n  }\n\n  async getLoyaltyRewards(tier: string): Promise<{ coins: number; xp: number; nftBonus: number }> {\n    const rewards = {\n      bronze: { coins: 0, xp: 0, nftBonus: 0 },\n      silver: { coins: 50, xp: 25, nftBonus: 5 },\n      gold: { coins: 150, xp: 75, nftBonus: 15 },\n      platinum: { coins: 300, xp: 150, nftBonus: 30 },\n      diamond: { coins: 500, xp: 250, nftBonus: 50 }\n    };\n    \n    return rewards[tier as keyof typeof rewards] || rewards.bronze;\n  }\n\n  async awardLoyaltyNFT(userId: string, tier: string): Promise<NFT | null> {\n    // Award special loyalty NFTs for higher tiers\n    if (tier === \"diamond\" || tier === \"platinum\") {\n      const user = await this.getUser(userId);\n      if (!user) return null;\n\n      const rarity = tier === \"diamond\" ? \"legendary\" : \"epic\";\n      const nftData = {\n        tokenId: parseInt(`${Date.now().toString().slice(-8)}`),\n        name: `${tier === \"diamond\" ? \"Diamond\" : \"Platinum\"} Loyalty Badge`,\n        description: `Exclusive ${tier} tier loyalty reward for unwavering faction dedication`,\n        imageUrl: \"\",\n        rarity: rarity as any,\n        faction: user.faction,\n        ownerId: userId,\n        isForSale: false,\n        attributes: {\n          tier,\n          loyaltyReward: true,\n          exclusiveBonus: tier === \"diamond\" ? 25 : 15\n        }\n      };\n\n      return await this.createNFT(nftData);\n    }\n    return null;\n  }\n\n  // Community Events System\n  async createCommunityEvent(eventData: any): Promise<any> {\n    const { communityEvents } = await import(\"@shared/schema\");\n    const [newEvent] = await db.insert(communityEvents).values(eventData).returning();\n    return newEvent;\n  }\n\n  async getActiveEvents(): Promise<any[]> {\n    const { communityEvents } = await import(\"@shared/schema\");\n    return await db\n      .select()\n      .from(communityEvents)\n      .where(eq(communityEvents.status, 'active'))\n      .orderBy(desc(communityEvents.startDate));\n  }\n\n  async getAllEvents(): Promise<any[]> {\n    const { communityEvents } = await import(\"@shared/schema\");\n    return await db\n      .select()\n      .from(communityEvents)\n      .orderBy(desc(communityEvents.startDate));\n  }\n\n  async getEventById(eventId: string): Promise<any | null> {\n    const { communityEvents } = await import(\"@shared/schema\");\n    const [event] = await db\n      .select()\n      .from(communityEvents)\n      .where(eq(communityEvents.id, eventId));\n    return event || null;\n  }\n\n  async joinEvent(userId: string, eventId: string): Promise<any> {\n    const { eventParticipations } = await import(\"@shared/schema\");\n    \n    // Check if already participating\n    const existing = await db\n      .select()\n      .from(eventParticipations)\n      .where(and(eq(eventParticipations.userId, userId), eq(eventParticipations.eventId, eventId)));\n    \n    if (existing.length > 0) {\n      throw new Error(\"Already participating in this event\");\n    }\n\n    const [participation] = await db\n      .insert(eventParticipations)\n      .values({ userId, eventId, progress: {}, contribution: {} })\n      .returning();\n\n    // Increment participant count\n    const { communityEvents } = await import(\"@shared/schema\");\n    await db\n      .update(communityEvents)\n      .set({ participantCount: sql`${communityEvents.participantCount} + 1` })\n      .where(eq(communityEvents.id, eventId));\n\n    return participation;\n  }\n\n  async updateEventProgress(userId: string, eventId: string, progress: any, contribution?: any): Promise<void> {\n    const { eventParticipations } = await import(\"@shared/schema\");\n    await db\n      .update(eventParticipations)\n      .set({ \n        progress, \n        contribution: contribution || sql`${eventParticipations.contribution}`,\n        updatedAt: new Date() \n      })\n      .where(and(eq(eventParticipations.userId, userId), eq(eventParticipations.eventId, eventId)));\n  }\n\n  async completeEventForUser(userId: string, eventId: string): Promise<void> {\n    const { eventParticipations } = await import(\"@shared/schema\");\n    await db\n      .update(eventParticipations)\n      .set({ completed: true, updatedAt: new Date() })\n      .where(and(eq(eventParticipations.userId, userId), eq(eventParticipations.eventId, eventId)));\n  }\n\n  async getUserEventParticipation(userId: string, eventId: string): Promise<any | null> {\n    const { eventParticipations } = await import(\"@shared/schema\");\n    const [participation] = await db\n      .select()\n      .from(eventParticipations)\n      .where(and(eq(eventParticipations.userId, userId), eq(eventParticipations.eventId, eventId)));\n    return participation || null;\n  }\n\n  async getUserEvents(userId: string): Promise<any[]> {\n    const { eventParticipations, communityEvents } = await import(\"@shared/schema\");\n    return await db\n      .select({\n        event: communityEvents,\n        participation: eventParticipations\n      })\n      .from(eventParticipations)\n      .innerJoin(communityEvents, eq(eventParticipations.eventId, communityEvents.id))\n      .where(eq(eventParticipations.userId, userId))\n      .orderBy(desc(eventParticipations.createdAt));\n  }\n\n  async getEventLeaderboard(eventId: string): Promise<any[]> {\n    const { eventParticipations } = await import(\"@shared/schema\");\n    return await db\n      .select({\n        participation: eventParticipations,\n        user: users\n      })\n      .from(eventParticipations)\n      .innerJoin(users, eq(eventParticipations.userId, users.id))\n      .where(eq(eventParticipations.eventId, eventId))\n      .orderBy(desc(eventParticipations.completed), desc(eventParticipations.updatedAt));\n  }\n\n  // AI Personality Evolution System\n  async getAiPersonality(aiName: \"grok\" | \"ani\"): Promise<any | null> {\n    const { aiPersonalities } = await import(\"@shared/schema\");\n    const [personality] = await db\n      .select()\n      .from(aiPersonalities)\n      .where(eq(aiPersonalities.aiName, aiName));\n    return personality || null;\n  }\n\n  async createOrUpdateAiPersonality(personalityData: any): Promise<any> {\n    const { aiPersonalities } = await import(\"@shared/schema\");\n    \n    const existing = await this.getAiPersonality(personalityData.aiName);\n    if (existing) {\n      const [updated] = await db\n        .update(aiPersonalities)\n        .set({ ...personalityData, updatedAt: new Date() })\n        .where(eq(aiPersonalities.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(aiPersonalities)\n        .values(personalityData)\n        .returning();\n      return created;\n    }\n  }\n\n  async recordAiInteraction(interactionData: any): Promise<any> {\n    const { userAiInteractions } = await import(\"@shared/schema\");\n    const [interaction] = await db\n      .insert(userAiInteractions)\n      .values(interactionData)\n      .returning();\n\n    // Update AI personality total interactions\n    const { aiPersonalities } = await import(\"@shared/schema\");\n    await db\n      .update(aiPersonalities)\n      .set({ \n        totalInteractions: sql`${aiPersonalities.totalInteractions} + 1`,\n        updatedAt: new Date()\n      })\n      .where(eq(aiPersonalities.aiName, interactionData.aiName));\n\n    return interaction;\n  }\n\n  async getUserAiProfile(userId: string, aiName: \"grok\" | \"ani\"): Promise<any | null> {\n    const { personalizedAiProfiles } = await import(\"@shared/schema\");\n    const [profile] = await db\n      .select()\n      .from(personalizedAiProfiles)\n      .where(and(eq(personalizedAiProfiles.userId, userId), eq(personalizedAiProfiles.aiName, aiName)));\n    return profile || null;\n  }\n\n  async createOrUpdateUserAiProfile(profileData: any): Promise<any> {\n    const { personalizedAiProfiles } = await import(\"@shared/schema\");\n    \n    const existing = await this.getUserAiProfile(profileData.userId, profileData.aiName);\n    if (existing) {\n      const [updated] = await db\n        .update(personalizedAiProfiles)\n        .set({ ...profileData, updatedAt: new Date() })\n        .where(eq(personalizedAiProfiles.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      const [created] = await db\n        .insert(personalizedAiProfiles)\n        .values(profileData)\n        .returning();\n      return created;\n    }\n  }\n\n  async getUserAiInteractionHistory(userId: string, aiName: \"grok\" | \"ani\", limit: number = 10): Promise<any[]> {\n    const { userAiInteractions } = await import(\"@shared/schema\");\n    return await db\n      .select()\n      .from(userAiInteractions)\n      .where(and(eq(userAiInteractions.userId, userId), eq(userAiInteractions.aiName, aiName)))\n      .orderBy(desc(userAiInteractions.createdAt))\n      .limit(limit);\n  }\n\n  async getAiPersonalityInsights(aiName: \"grok\" | \"ani\"): Promise<any> {\n    const { userAiInteractions } = await import(\"@shared/schema\");\n    \n    const totalInteractions = await db\n      .select({ count: count() })\n      .from(userAiInteractions)\n      .where(eq(userAiInteractions.aiName, aiName));\n\n    const sentimentData = await db\n      .select({\n        sentiment: userAiInteractions.sentiment,\n        count: count()\n      })\n      .from(userAiInteractions)\n      .where(eq(userAiInteractions.aiName, aiName))\n      .groupBy(userAiInteractions.sentiment);\n\n    const avgSatisfaction = await db\n      .select({\n        avgSatisfaction: sql<string>`AVG(${userAiInteractions.userSatisfaction})`\n      })\n      .from(userAiInteractions)\n      .where(and(eq(userAiInteractions.aiName, aiName), sql`${userAiInteractions.userSatisfaction} IS NOT NULL`));\n\n    return {\n      totalInteractions: totalInteractions[0]?.count || 0,\n      sentimentBreakdown: sentimentData,\n      averageSatisfaction: parseFloat(avgSatisfaction[0]?.avgSatisfaction || \"0\"),\n    };\n  }\n\n  // Notification operations\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    const { notifications } = await import(\"@shared/schema\");\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.createdAt))\n      .limit(50);\n  }\n\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const { notifications } = await import(\"@shared/schema\");\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async markNotificationRead(notificationId: string, userId: string): Promise<void> {\n    const { notifications } = await import(\"@shared/schema\");\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(and(eq(notifications.id, notificationId), eq(notifications.userId, userId)));\n  }\n\n  async markAllNotificationsRead(userId: string): Promise<void> {\n    const { notifications } = await import(\"@shared/schema\");\n    await db\n      .update(notifications)\n      .set({ isRead: true })\n      .where(eq(notifications.userId, userId));\n  }\n\n  async deleteNotification(notificationId: string, userId: string): Promise<void> {\n    const { db } = await import(\"./db\");\n    await db.execute({\n      sql: `DELETE FROM notifications WHERE id = $1 AND user_id = $2`,\n      args: [notificationId, userId]\n    });\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":43858},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  integer,\n  text,\n  boolean,\n  decimal,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (wallet-based authentication)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  profileName: varchar(\"profile_name\").notNull(),\n  solanaAddress: varchar(\"solana_address\").unique().notNull(),\n  pin: varchar(\"pin\").notNull(), // Hashed 4-digit PIN\n  email: varchar(\"email\"),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  faction: varchar(\"faction\", { enum: [\"grok\", \"ani\"] }).default(\"grok\"),\n  gacBalance: decimal(\"gac_balance\", { precision: 10, scale: 2 }).default(\"0\"),\n  totalXP: integer(\"total_xp\").default(0),\n  grokPoints: integer(\"grok_points\").default(0),\n  aniPoints: integer(\"ani_points\").default(0),\n  level: integer(\"level\").default(1),\n  loyaltyTier: varchar(\"loyalty_tier\", { enum: [\"bronze\", \"silver\", \"gold\", \"platinum\", \"diamond\"] }).default(\"bronze\"),\n  loyaltyScore: integer(\"loyalty_score\").default(0),\n  factionJoinDate: timestamp(\"faction_join_date\").defaultNow(),\n  consecutiveDaysActive: integer(\"consecutive_days_active\").default(0),\n  lastLoginDate: timestamp(\"last_login_date\"),\n  loginStreak: integer(\"login_streak\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Telegram users table for bot integration\nexport const telegramUsers = pgTable(\"telegram_users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  telegramId: varchar(\"telegram_id\").unique().notNull(),\n  userId: varchar(\"user_id\").references(() => users.id),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  username: varchar(\"username\"),\n  isLinked: boolean(\"is_linked\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const challenges = pgTable(\"challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\", { enum: [\"logic\", \"creative\"] }).notNull(),\n  faction: varchar(\"faction\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  reward: integer(\"reward\").notNull(),\n  timeLimit: integer(\"time_limit\"), // in hours\n  challengeData: jsonb(\"challenge_data\").notNull(), // Interactive challenge content\n  solutionData: jsonb(\"solution_data\"), // Expected solution for validation\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const userChallenges = pgTable(\"user_challenges\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  challengeId: varchar(\"challenge_id\").notNull().references(() => challenges.id),\n  completed: boolean(\"completed\").default(false),\n  submission: text(\"submission\"),\n  score: integer(\"score\"),\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const storyChapters = pgTable(\"story_chapters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chapterNumber: integer(\"chapter_number\").notNull().unique(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").default(false),\n  isCompleted: boolean(\"is_completed\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const storyVotes = pgTable(\"story_votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  chapterId: varchar(\"chapter_id\").notNull().references(() => storyChapters.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  choice: varchar(\"choice\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  votingPower: decimal(\"voting_power\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const nfts = pgTable(\"nfts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: integer(\"token_id\").unique().notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\").notNull(),\n  imageUrl: text(\"image_url\").notNull(),\n  faction: varchar(\"faction\", { enum: [\"grok\", \"ani\", \"neutral\"] }).notNull(),\n  rarity: varchar(\"rarity\", { enum: [\"common\", \"rare\", \"epic\", \"legendary\"] }).notNull(),\n  attributes: jsonb(\"attributes\"),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  isForSale: boolean(\"is_for_sale\").default(false),\n  price: decimal(\"price\", { precision: 10, scale: 2 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const chatMessages = pgTable(\"chat_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  aiType: varchar(\"ai_type\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  userMessage: text(\"user_message\").notNull(),\n  aiResponse: text(\"ai_response\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communitySubmissions = pgTable(\"community_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  category: varchar(\"category\", { enum: [\"art\", \"code\", \"lore\", \"game\"] }).notNull(),\n  fileUrl: text(\"file_url\"),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  upvotes: integer(\"upvotes\").default(0),\n  downvotes: integer(\"downvotes\").default(0),\n  status: varchar(\"status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).default(\"pending\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const governanceProposals = pgTable(\"governance_proposals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\", { enum: [\"feature\", \"economic\", \"governance\", \"story\"] }).notNull(),\n  authorId: varchar(\"author_id\").notNull().references(() => users.id),\n  status: varchar(\"status\", { enum: [\"active\", \"passed\", \"rejected\", \"pending\"] }).default(\"active\"),\n  yesVotes: integer(\"yes_votes\").default(0),\n  noVotes: integer(\"no_votes\").default(0),\n  totalVotingPower: decimal(\"total_voting_power\", { precision: 15, scale: 2 }).default(\"0\"),\n  requiredQuorum: decimal(\"required_quorum\", { precision: 15, scale: 2 }).default(\"1000\"),\n  endDate: timestamp(\"end_date\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const governanceVotes = pgTable(\"governance_votes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  proposalId: varchar(\"proposal_id\").notNull().references(() => governanceProposals.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  vote: varchar(\"vote\", { enum: [\"yes\", \"no\"] }).notNull(),\n  votingPower: decimal(\"voting_power\", { precision: 10, scale: 2 }).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: varchar(\"type\").notNull(), // 'reward', 'achievement', 'challenge', 'story', etc.\n  title: varchar(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  data: jsonb(\"data\"), // Additional data as JSON\n  isRead: boolean(\"is_read\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const communityEvents = pgTable(\"community_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  type: varchar(\"type\", { enum: [\"challenge_blitz\", \"cross_faction_collab\", \"story_event\", \"nft_hunt\", \"loyalty_boost\"] }).notNull(),\n  status: varchar(\"status\", { enum: [\"upcoming\", \"active\", \"completed\"] }).default(\"upcoming\"),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  rewards: jsonb(\"rewards\").notNull(), // Reward structure\n  requirements: jsonb(\"requirements\"), // Participation requirements\n  progress: jsonb(\"progress\").default({}), // Event progress tracking\n  participantCount: integer(\"participant_count\").default(0),\n  maxParticipants: integer(\"max_participants\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const eventParticipations = pgTable(\"event_participations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  eventId: varchar(\"event_id\").notNull().references(() => communityEvents.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  progress: jsonb(\"progress\").default({}), // User's progress in the event\n  completed: boolean(\"completed\").default(false),\n  reward_claimed: boolean(\"reward_claimed\").default(false),\n  contribution: jsonb(\"contribution\"), // What the user contributed\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// AI Personality Evolution System\nexport const aiPersonalities = pgTable(\"ai_personalities\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  aiName: varchar(\"ai_name\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  personalityTraits: jsonb(\"personality_traits\").notNull(), // Evolving personality data\n  conversationStyle: jsonb(\"conversation_style\").notNull(), // Speaking patterns, preferences\n  memoryBank: jsonb(\"memory_bank\").default({}), // Important memories and user patterns\n  evolutionLevel: integer(\"evolution_level\").default(1), // How much the AI has evolved\n  totalInteractions: integer(\"total_interactions\").default(0),\n  lastEvolution: timestamp(\"last_evolution\").defaultNow(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const userAiInteractions = pgTable(\"user_ai_interactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  aiName: varchar(\"ai_name\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  message: text(\"message\").notNull(),\n  response: text(\"response\").notNull(),\n  sentiment: varchar(\"sentiment\", { enum: [\"positive\", \"neutral\", \"negative\"] }),\n  topics: jsonb(\"topics\").default([]), // Extracted topics from conversation\n  userSatisfaction: integer(\"user_satisfaction\"), // 1-5 rating if provided\n  conversationContext: jsonb(\"conversation_context\").default({}),\n  responseTime: integer(\"response_time\"), // AI response time in ms\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const personalizedAiProfiles = pgTable(\"personalized_ai_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  aiName: varchar(\"ai_name\", { enum: [\"grok\", \"ani\"] }).notNull(),\n  personalityPreferences: jsonb(\"personality_preferences\").notNull(), // User's preferred AI traits\n  conversationHistory: jsonb(\"conversation_history\").default([]), // Recent conversation summaries\n  topicInterests: jsonb(\"topic_interests\").default({}), // Topics user discusses most\n  communicationStyle: varchar(\"communication_style\", { \n    enum: [\"formal\", \"casual\", \"technical\", \"creative\", \"supportive\"] \n  }).default(\"casual\"),\n  relationshipLevel: varchar(\"relationship_level\", { \n    enum: [\"stranger\", \"acquaintance\", \"friend\", \"trusted_companion\"] \n  }).default(\"stranger\"),\n  lastInteraction: timestamp(\"last_interaction\").defaultNow(),\n  totalConversations: integer(\"total_conversations\").default(0),\n  averageSatisfaction: decimal(\"average_satisfaction\", { precision: 3, scale: 2 }).default(\"0.00\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  challenges: many(userChallenges),\n  votes: many(storyVotes),\n  nfts: many(nfts),\n  chatMessages: many(chatMessages),\n  submissions: many(communitySubmissions),\n  governanceProposals: many(governanceProposals),\n  governanceVotes: many(governanceVotes),\n  telegramUser: one(telegramUsers),\n}));\n\nexport const telegramUsersRelations = relations(telegramUsers, ({ one }) => ({\n  user: one(users, {\n    fields: [telegramUsers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const challengesRelations = relations(challenges, ({ many }) => ({\n  userChallenges: many(userChallenges),\n}));\n\nexport const userChallengesRelations = relations(userChallenges, ({ one }) => ({\n  user: one(users, {\n    fields: [userChallenges.userId],\n    references: [users.id],\n  }),\n  challenge: one(challenges, {\n    fields: [userChallenges.challengeId],\n    references: [challenges.id],\n  }),\n}));\n\nexport const storyChaptersRelations = relations(storyChapters, ({ many }) => ({\n  votes: many(storyVotes),\n}));\n\nexport const storyVotesRelations = relations(storyVotes, ({ one }) => ({\n  chapter: one(storyChapters, {\n    fields: [storyVotes.chapterId],\n    references: [storyChapters.id],\n  }),\n  user: one(users, {\n    fields: [storyVotes.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const nftsRelations = relations(nfts, ({ one }) => ({\n  owner: one(users, {\n    fields: [nfts.ownerId],\n    references: [users.id],\n  }),\n}));\n\nexport const chatMessagesRelations = relations(chatMessages, ({ one }) => ({\n  user: one(users, {\n    fields: [chatMessages.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const communitySubmissionsRelations = relations(communitySubmissions, ({ one }) => ({\n  author: one(users, {\n    fields: [communitySubmissions.authorId],\n    references: [users.id],\n  }),\n}));\n\nexport const governanceProposalsRelations = relations(governanceProposals, ({ one, many }) => ({\n  author: one(users, {\n    fields: [governanceProposals.authorId],\n    references: [users.id],\n  }),\n  votes: many(governanceVotes),\n}));\n\nexport const governanceVotesRelations = relations(governanceVotes, ({ one }) => ({\n  proposal: one(governanceProposals, {\n    fields: [governanceVotes.proposalId],\n    references: [governanceProposals.id],\n  }),\n  user: one(users, {\n    fields: [governanceVotes.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas for wallet authentication\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Registration schema (for new wallet users)\nexport const registerUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  email: true,\n  firstName: true,\n  lastName: true,\n  profileImageUrl: true,\n}).extend({\n  pin: z.string().regex(/^\\d{4}$/, \"PIN must be exactly 4 digits\"),\n});\n\n// Login schema (for wallet authentication)\nexport const loginUserSchema = z.object({\n  solanaAddress: z.string().min(1, \"Solana address is required\"),\n  pin: z.string().regex(/^\\d{4}$/, \"PIN must be exactly 4 digits\"),\n});\n\nexport const insertChallengeSchema = createInsertSchema(challenges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserChallengeSchema = createInsertSchema(userChallenges).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStoryChapterSchema = createInsertSchema(storyChapters).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertStoryVoteSchema = createInsertSchema(storyVotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNFTSchema = createInsertSchema(nfts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertChatMessageSchema = createInsertSchema(chatMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunitySubmissionSchema = createInsertSchema(communitySubmissions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGovernanceProposalSchema = createInsertSchema(governanceProposals).omit({\n  id: true,\n  createdAt: true,\n  yesVotes: true,\n  noVotes: true,\n  totalVotingPower: true,\n});\n\nexport const insertGovernanceVoteSchema = createInsertSchema(governanceVotes).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTelegramUserSchema = createInsertSchema(telegramUsers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCommunityEventSchema = createInsertSchema(communityEvents).omit({\n  id: true,\n  createdAt: true,\n  participantCount: true,\n});\n\nexport const insertEventParticipationSchema = createInsertSchema(eventParticipations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAiPersonalitySchema = createInsertSchema(aiPersonalities).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserAiInteractionSchema = createInsertSchema(userAiInteractions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPersonalizedAiProfileSchema = createInsertSchema(personalizedAiProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\nexport type Challenge = typeof challenges.$inferSelect;\nexport type InsertChallenge = z.infer<typeof insertChallengeSchema>;\nexport type UserChallenge = typeof userChallenges.$inferSelect;\nexport type InsertUserChallenge = z.infer<typeof insertUserChallengeSchema>;\nexport type StoryChapter = typeof storyChapters.$inferSelect;\nexport type InsertStoryChapter = z.infer<typeof insertStoryChapterSchema>;\nexport type StoryVote = typeof storyVotes.$inferSelect;\nexport type InsertStoryVote = z.infer<typeof insertStoryVoteSchema>;\nexport type NFT = typeof nfts.$inferSelect;\nexport type InsertNFT = z.infer<typeof insertNFTSchema>;\nexport type ChatMessage = typeof chatMessages.$inferSelect;\nexport type InsertChatMessage = z.infer<typeof insertChatMessageSchema>;\nexport type CommunitySubmission = typeof communitySubmissions.$inferSelect;\nexport type InsertCommunitySubmission = z.infer<typeof insertCommunitySubmissionSchema>;\nexport type GovernanceProposal = typeof governanceProposals.$inferSelect;\nexport type InsertGovernanceProposal = z.infer<typeof insertGovernanceProposalSchema>;\nexport type GovernanceVote = typeof governanceVotes.$inferSelect;\nexport type InsertGovernanceVote = z.infer<typeof insertGovernanceVoteSchema>;\nexport type TelegramUser = typeof telegramUsers.$inferSelect;\nexport type InsertTelegramUser = z.infer<typeof insertTelegramUserSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type CommunityEvent = typeof communityEvents.$inferSelect;\nexport type InsertCommunityEvent = z.infer<typeof insertCommunityEventSchema>;\nexport type EventParticipation = typeof eventParticipations.$inferSelect;\nexport type InsertEventParticipation = z.infer<typeof insertEventParticipationSchema>;\n\n// AI Evolution System types\nexport type AiPersonality = typeof aiPersonalities.$inferSelect;\nexport type InsertAiPersonality = z.infer<typeof insertAiPersonalitySchema>;\nexport type UserAiInteraction = typeof userAiInteractions.$inferSelect;\nexport type InsertUserAiInteraction = z.infer<typeof insertUserAiInteractionSchema>;\nexport type PersonalizedAiProfile = typeof personalizedAiProfiles.$inferSelect;\nexport type InsertPersonalizedAiProfile = z.infer<typeof insertPersonalizedAiProfileSchema>;\n","size_bytes":20195},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/contexts/auth-context\";\nimport Navigation from \"@/components/navigation\";\nimport NotFound from \"@/pages/not-found\";\nimport LoadingScreen from \"./components/loading-screen\";\nimport Landing from \"./pages/landing\";\nimport Home from \"./pages/home\";\nimport Dashboard from \"./pages/dashboard\";\nimport AiPortal from \"./pages/ai-portal\";\nimport StoryChain from \"./pages/storychain\";\nimport Nfts from \"./pages/nfts\";\nimport Community from \"./pages/community\";\nimport Whitepaper from \"./pages/whitepaper\";\nimport Leaderboards from \"./pages/leaderboards\";\nimport Governance from \"./pages/governance\";\n\nfunction AppRouter() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {/* Public routes - accessible without authentication */}\n      <Route path=\"/whitepaper\" component={Whitepaper} />\n      \n      {/* Protected routes - require authentication */}\n      <Route path=\"*\">\n        {isLoading ? (\n          <LoadingScreen />\n        ) : !isAuthenticated ? (\n          <Landing />\n        ) : (\n          <Switch>\n            {/* Main app pages with navigation */}\n            <Route path=\"/\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Home />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/home\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Home />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/dashboard\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Dashboard />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/ai-portal\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <AiPortal />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/storychain\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <StoryChain />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/nfts\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Nfts />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/community\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Community />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/leaderboards\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Leaderboards />\n                </main>\n              </div>\n            </Route>\n            \n            <Route path=\"/governance\">\n              <div className=\"min-h-screen bg-background\">\n                <Navigation />\n                <main>\n                  <Governance />\n                </main>\n              </div>\n            </Route>\n            \n            {/* 404 page */}\n            <Route component={NotFound} />\n          </Switch>\n        )}\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <AppRouter />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":4134},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;500;700;900&family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500;600&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(230, 25%, 6%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(230, 25%, 8%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(230, 25%, 8%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(230, 25%, 12%);\n  --secondary-foreground: hsl(210, 40%, 90%);\n  --muted: hsl(230, 25%, 10%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(210, 100%, 75%);\n  --accent-foreground: hsl(230, 25%, 6%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(230, 25%, 12%);\n  --input: hsl(230, 25%, 10%);\n  --ring: hsl(210, 100%, 50%);\n  --grok: hsl(210, 100%, 50%);\n  --grok-foreground: hsl(0, 0%, 100%);\n  --grok-muted: hsl(210, 100%, 75%);\n  --ani: hsl(320, 100%, 70%);\n  --ani-foreground: hsl(0, 0%, 100%);\n  --ani-muted: hsl(320, 100%, 85%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(230, 25%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 95%);\n  --sidebar-primary: hsl(210, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 100%, 75%);\n  --sidebar-accent-foreground: hsl(230, 25%, 6%);\n  --sidebar-border: hsl(230, 25%, 12%);\n  --sidebar-ring: hsl(210, 100%, 50%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --font-orbitron: Orbitron, sans-serif;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05), 0px 1px 2px -1px hsl(210, 100%, 50%, 0.1);\n  --shadow: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05), 0px 1px 2px -1px hsl(210, 100%, 50%, 0.1);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05), 0px 2px 4px -1px hsl(210, 100%, 50%, 0.15);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05), 0px 4px 6px -1px hsl(210, 100%, 50%, 0.2);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.05), 0px 8px 10px -1px hsl(210, 100%, 50%, 0.25);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 100%, 50%, 0.1);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(230, 25%, 6%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(230, 25%, 8%);\n  --card-foreground: hsl(210, 40%, 95%);\n  --popover: hsl(230, 25%, 8%);\n  --popover-foreground: hsl(210, 40%, 95%);\n  --primary: hsl(210, 100%, 50%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(230, 25%, 12%);\n  --secondary-foreground: hsl(210, 40%, 90%);\n  --muted: hsl(230, 25%, 10%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(210, 100%, 75%);\n  --accent-foreground: hsl(230, 25%, 6%);\n  --destructive: hsl(0, 62%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(230, 25%, 12%);\n  --input: hsl(230, 25%, 10%);\n  --ring: hsl(210, 100%, 50%);\n  --grok: hsl(210, 100%, 50%);\n  --grok-foreground: hsl(0, 0%, 100%);\n  --grok-muted: hsl(210, 100%, 75%);\n  --ani: hsl(320, 100%, 70%);\n  --ani-foreground: hsl(0, 0%, 100%);\n  --ani-muted: hsl(320, 100%, 85%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(230, 25%, 8%);\n  --sidebar-foreground: hsl(210, 40%, 95%);\n  --sidebar-primary: hsl(210, 100%, 50%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(210, 100%, 75%);\n  --sidebar-accent-foreground: hsl(230, 25%, 6%);\n  --sidebar-border: hsl(230, 25%, 12%);\n  --sidebar-ring: hsl(210, 100%, 50%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: JetBrains Mono, monospace;\n  --font-orbitron: Orbitron, sans-serif;\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .font-orbitron {\n    font-family: var(--font-orbitron);\n  }\n}\n\n@layer utilities {\n  .glow-grok {\n    box-shadow: 0 0 20px rgba(0, 119, 255, 0.3);\n  }\n\n  .glow-ani {\n    box-shadow: 0 0 20px rgba(255, 102, 204, 0.3);\n  }\n\n  .gradient-grok {\n    background: linear-gradient(135deg, hsl(210, 100%, 50%), hsl(210, 100%, 75%));\n  }\n\n  .gradient-ani {\n    background: linear-gradient(135deg, hsl(320, 100%, 70%), hsl(320, 100%, 85%));\n  }\n\n  .faction-grok {\n    border-color: var(--grok);\n    background: linear-gradient(135deg, rgba(0, 119, 255, 0.1), rgba(0, 212, 255, 0.05));\n  }\n\n  .faction-ani {\n    border-color: var(--ani);\n    background: linear-gradient(135deg, rgba(255, 102, 204, 0.1), rgba(255, 153, 230, 0.05));\n  }\n\n  @keyframes glow-pulse {\n    0% { box-shadow: 0 0 5px var(--primary), 0 0 10px var(--primary), 0 0 15px var(--primary); }\n    100% { box-shadow: 0 0 10px var(--primary), 0 0 20px var(--primary), 0 0 30px var(--primary); }\n  }\n\n  @keyframes float {\n    0%, 100% { transform: translateY(0px); }\n    50% { transform: translateY(-10px); }\n  }\n\n  .animate-glow-pulse {\n    animation: glow-pulse 2s ease-in-out infinite alternate;\n  }\n\n  .animate-float {\n    animation: float 6s ease-in-out infinite;\n  }\n}\n\n/* Telegram WebApp Safe Areas */\n.pt-safe-area-inset-top {\n  padding-top: env(safe-area-inset-top, 0px);\n}\n\n.pb-safe-area-inset-bottom {\n  padding-bottom: env(safe-area-inset-bottom, 0px);\n}\n\n/* Mobile touch optimization */\n@media (hover: none) and (pointer: coarse) {\n  .touch-manipulation {\n    touch-action: manipulation;\n    -webkit-tap-highlight-color: transparent;\n  }\n  \n  /* Better touch targets */\n  button, a, [role=\"button\"] {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Improve scrolling performance */\n  * {\n    -webkit-overflow-scrolling: touch;\n  }\n}\n\n/* Enhanced mobile navigation */\n@media (max-width: 768px) {\n  /* Ensure bottom navigation doesn't overlap with Telegram UI */\n  .mobile-bottom-nav {\n    z-index: 999;\n    backdrop-filter: blur(20px);\n    -webkit-backdrop-filter: blur(20px);\n  }\n  \n  /* Optimized tap targets for mobile */\n  .nav-item-mobile {\n    min-height: 44px;\n    min-width: 44px;\n  }\n  \n  /* Mobile-first responsive navigation */\n  .mobile-nav-card {\n    @apply p-2 rounded-lg transition-all touch-manipulation;\n    min-height: 52px;\n    min-width: 52px;\n  }\n}\n","size_bytes":6781},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/achievements.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Trophy, Lock, CheckCircle, Star, Brain, Heart, Zap } from \"lucide-react\";\n\ninterface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: 'logic' | 'creativity' | 'social' | 'exploration';\n  progress: number;\n  maxProgress: number;\n  unlocked: boolean;\n  rarity: 'common' | 'rare' | 'epic' | 'legendary';\n  icon: any;\n  reward: {\n    xp: number;\n    gac?: number;\n    points?: number;\n  };\n}\n\nexport function Achievements() {\n  const achievements: Achievement[] = [\n    {\n      id: '1',\n      name: 'First Steps',\n      description: 'Complete your first AI chat session',\n      category: 'exploration',\n      progress: 1,\n      maxProgress: 1,\n      unlocked: true,\n      rarity: 'common',\n      icon: CheckCircle,\n      reward: { xp: 100 }\n    },\n    {\n      id: '2',\n      name: 'Logic Master',\n      description: 'Complete 10 Grok challenges',\n      category: 'logic',\n      progress: 7,\n      maxProgress: 10,\n      unlocked: false,\n      rarity: 'rare',\n      icon: Brain,\n      reward: { xp: 500, gac: 10, points: 100 }\n    },\n    {\n      id: '3',\n      name: 'Creative Soul',\n      description: 'Complete 10 Ani challenges',\n      category: 'creativity',\n      progress: 4,\n      maxProgress: 10,\n      unlocked: false,\n      rarity: 'rare',\n      icon: Heart,\n      reward: { xp: 500, gac: 10, points: 100 }\n    },\n    {\n      id: '4',\n      name: 'Dual Consciousness',\n      description: 'Reach level 10 in both factions',\n      category: 'exploration',\n      progress: 0,\n      maxProgress: 1,\n      unlocked: false,\n      rarity: 'legendary',\n      icon: Zap,\n      reward: { xp: 2000, gac: 50 }\n    },\n    {\n      id: '5',\n      name: 'Community Builder',\n      description: 'Get 100 upvotes on community submissions',\n      category: 'social',\n      progress: 23,\n      maxProgress: 100,\n      unlocked: false,\n      rarity: 'epic',\n      icon: Trophy,\n      reward: { xp: 1000, gac: 25 }\n    },\n    {\n      id: '6',\n      name: 'Story Weaver',\n      description: 'Vote on 20 story chapters',\n      category: 'social',\n      progress: 8,\n      maxProgress: 20,\n      unlocked: false,\n      rarity: 'rare',\n      icon: Star,\n      reward: { xp: 750, gac: 15 }\n    }\n  ];\n\n  const getRarityColor = (rarity: Achievement['rarity']) => {\n    switch (rarity) {\n      case 'common':\n        return 'text-gray-500 bg-gray-100 dark:bg-gray-800';\n      case 'rare':\n        return 'text-blue-500 bg-blue-100 dark:bg-blue-900';\n      case 'epic':\n        return 'text-purple-500 bg-purple-100 dark:bg-purple-900';\n      case 'legendary':\n        return 'text-orange-500 bg-orange-100 dark:bg-orange-900';\n    }\n  };\n\n  const getCategoryIcon = (category: Achievement['category']) => {\n    switch (category) {\n      case 'logic':\n        return <Brain className=\"h-4 w-4 text-blue-500\" />;\n      case 'creativity':\n        return <Heart className=\"h-4 w-4 text-pink-500\" />;\n      case 'social':\n        return <Trophy className=\"h-4 w-4 text-green-500\" />;\n      case 'exploration':\n        return <Star className=\"h-4 w-4 text-yellow-500\" />;\n    }\n  };\n\n  const unlockedCount = achievements.filter(a => a.unlocked).length;\n\n  return (\n    <Card className=\"w-full\" data-testid=\"achievements\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Achievements</span>\n          <Badge variant=\"outline\">\n            {unlockedCount}/{achievements.length}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4\">\n          {achievements.map((achievement) => (\n            <div\n              key={achievement.id}\n              className={`p-4 rounded-lg border transition-all ${\n                achievement.unlocked\n                  ? 'bg-accent/5 border-accent/20'\n                  : 'bg-muted/30 border-border'\n              }`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className={`p-2 rounded-lg ${getRarityColor(achievement.rarity)}`}>\n                  {achievement.unlocked ? (\n                    <achievement.icon className=\"h-5 w-5\" />\n                  ) : (\n                    <Lock className=\"h-5 w-5\" />\n                  )}\n                </div>\n                \n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <h4 className={`font-semibold ${\n                        achievement.unlocked ? 'text-foreground' : 'text-muted-foreground'\n                      }`}>\n                        {achievement.name}\n                      </h4>\n                      {getCategoryIcon(achievement.category)}\n                    </div>\n                    <Badge \n                      variant=\"outline\" \n                      className={getRarityColor(achievement.rarity)}\n                    >\n                      {achievement.rarity}\n                    </Badge>\n                  </div>\n                  \n                  <p className=\"text-sm text-muted-foreground\">\n                    {achievement.description}\n                  </p>\n                  \n                  {!achievement.unlocked && achievement.maxProgress > 1 && (\n                    <div className=\"space-y-1\">\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>Progress</span>\n                        <span>{achievement.progress}/{achievement.maxProgress}</span>\n                      </div>\n                      <Progress \n                        value={(achievement.progress / achievement.maxProgress) * 100} \n                        className=\"h-2\"\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                    <span>+{achievement.reward.xp} XP</span>\n                    {achievement.reward.gac && (\n                      <span>+{achievement.reward.gac} GAC</span>\n                    )}\n                    {achievement.reward.points && (\n                      <span>+{achievement.reward.points} Points</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6649},"client/src/components/activity-feed.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Heart, MessageCircle, Trophy, Zap } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface ActivityItem {\n  id: string;\n  type: 'challenge_complete' | 'ai_chat' | 'story_vote' | 'level_up' | 'nft_earned';\n  message: string;\n  timestamp: Date;\n  points?: number;\n  faction?: 'grok' | 'ani';\n}\n\nexport function ActivityFeed() {\n  // Mock activity data - in real app this would come from API\n  const mockActivity: ActivityItem[] = [\n    {\n      id: '1',\n      type: 'challenge_complete',\n      message: 'Completed \"Quantum Logic Puzzle\"',\n      timestamp: new Date(Date.now() - 1000 * 60 * 30), // 30 mins ago\n      points: 150,\n      faction: 'grok'\n    },\n    {\n      id: '2', \n      type: 'ai_chat',\n      message: 'Had a deep conversation with Ani about creativity',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\n      points: 25,\n      faction: 'ani'\n    },\n    {\n      id: '3',\n      type: 'level_up',\n      message: 'Reached Level 8!',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6), // 6 hours ago\n      points: 0\n    },\n    {\n      id: '4',\n      type: 'story_vote', \n      message: 'Voted on Chapter 3: The Digital Divide',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\n      points: 50,\n      faction: 'grok'\n    },\n    {\n      id: '5',\n      type: 'nft_earned',\n      message: 'Earned \"Logic Master\" NFT',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2), // 2 days ago\n      faction: 'grok'\n    }\n  ];\n\n  const getActivityIcon = (type: ActivityItem['type']) => {\n    switch (type) {\n      case 'challenge_complete':\n        return <Zap className=\"h-4 w-4\" />;\n      case 'ai_chat':\n        return <MessageCircle className=\"h-4 w-4\" />;\n      case 'story_vote':\n        return <Brain className=\"h-4 w-4\" />;\n      case 'level_up':\n        return <Trophy className=\"h-4 w-4\" />;\n      case 'nft_earned':\n        return <Heart className=\"h-4 w-4\" />;\n      default:\n        return <Zap className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getActivityColor = (type: ActivityItem['type'], faction?: 'grok' | 'ani') => {\n    if (faction === 'grok') return 'text-blue-500';\n    if (faction === 'ani') return 'text-pink-500';\n    \n    switch (type) {\n      case 'challenge_complete':\n        return 'text-yellow-500';\n      case 'ai_chat':\n        return 'text-purple-500';\n      case 'story_vote':\n        return 'text-green-500';\n      case 'level_up':\n        return 'text-orange-500';\n      case 'nft_earned':\n        return 'text-indigo-500';\n      default:\n        return 'text-gray-500';\n    }\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid=\"activity-feed\">\n      <CardHeader>\n        <CardTitle>Recent Activity</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {mockActivity.map((activity) => (\n            <div key={activity.id} className=\"flex items-start gap-3 p-3 rounded-lg bg-muted/30\">\n              <div className={`mt-0.5 ${getActivityColor(activity.type, activity.faction)}`}>\n                {getActivityIcon(activity.type)}\n              </div>\n              <div className=\"flex-1 space-y-1\">\n                <div className=\"text-sm\">{activity.message}</div>\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"text-xs text-muted-foreground\">\n                    {format(activity.timestamp, 'MMM d, h:mm a')}\n                  </div>\n                  {activity.points && activity.points > 0 && (\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      +{activity.points} XP\n                    </Badge>\n                  )}\n                  {activity.faction && (\n                    <Badge \n                      variant={activity.faction === 'grok' ? 'default' : 'secondary'}\n                      className=\"text-xs\"\n                    >\n                      {activity.faction === 'grok' ? 'Grok' : 'Ani'}\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4329},"client/src/components/ai-chat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Brain, Heart, Send, User } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\ninterface AIChatProps {\n  aiType: \"grok\" | \"ani\";\n}\n\ninterface ChatMessage {\n  id: string;\n  userMessage: string;\n  aiResponse: string;\n  createdAt: string;\n}\n\nexport function AIChat({ aiType }: AIChatProps) {\n  const [message, setMessage] = useState(\"\");\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: chatHistory = [], isLoading, error } = useQuery<ChatMessage[]>({\n    queryKey: [`/api/chat/${aiType}/history`],\n  });\n\n  // Handle query errors\n  useEffect(() => {\n    if (error && isUnauthorizedError(error as Error)) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n    }\n  }, [error, toast]);\n\n  const sendMessageMutation = useMutation({\n    mutationFn: async (messageText: string) => {\n      const response = await apiRequest(\"POST\", `/api/chat/${aiType}`, {\n        message: messageText\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/chat/${aiType}/history`] });\n      setMessage(\"\");\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSendMessage = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!message.trim() || sendMessageMutation.isPending) return;\n    \n    sendMessageMutation.mutate(message);\n  };\n\n  useEffect(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  }, [chatHistory]);\n\n  const aiConfig = {\n    grok: {\n      icon: Brain,\n      color: \"text-grok\",\n      bgColor: \"bg-grok/10\",\n      borderColor: \"border-grok\",\n      placeholder: \"Ask Grok anything...\"\n    },\n    ani: {\n      icon: Heart,\n      color: \"text-ani\",\n      bgColor: \"bg-ani/10\", \n      borderColor: \"border-ani\",\n      placeholder: \"Share with Ani...\"\n    }\n  };\n\n  const config = aiConfig[aiType];\n  const Icon = config.icon;\n\n  return (\n    <div className=\"flex flex-col h-96\">\n      {/* Chat Messages */}\n      <div className=\"flex-1 overflow-y-auto bg-card rounded-lg p-4 mb-4 space-y-4\" data-testid={`chat-messages-${aiType}`}>\n        {isLoading ? (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className={`animate-spin rounded-full h-8 w-8 border-b-2 border-${aiType}`}></div>\n          </div>\n        ) : chatHistory.length > 0 ? (\n          <>\n            {chatHistory.slice().reverse().map((chat: ChatMessage) => (\n              <div key={chat.id} className=\"space-y-3\">\n                {/* User Message */}\n                <div className=\"flex items-start space-x-3 justify-end\">\n                  <div className=\"bg-secondary rounded-lg px-4 py-2 max-w-xs\" data-testid={`user-message-${chat.id}`}>\n                    <p className=\"text-sm\">{chat.userMessage}</p>\n                  </div>\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className=\"bg-accent text-accent-foreground\">\n                      <User className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                </div>\n                \n                {/* AI Message */}\n                <div className=\"flex items-start space-x-3\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarFallback className={`${config.bgColor} ${config.color}`}>\n                      <Icon className=\"h-4 w-4\" />\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className={`${config.bgColor} rounded-lg px-4 py-2 max-w-xs`} data-testid={`ai-message-${chat.id}`}>\n                    <p className=\"text-sm\">{chat.aiResponse}</p>\n                    <span className=\"text-xs text-muted-foreground\">\n                      {new Date(chat.createdAt).toLocaleTimeString()}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </>\n        ) : (\n          <div className=\"flex items-center justify-center h-full text-muted-foreground\">\n            <div className=\"text-center\">\n              <Icon className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n              <p>Start a conversation with {aiType === \"grok\" ? \"Grok\" : \"Ani\"}</p>\n            </div>\n          </div>\n        )}\n        \n        {sendMessageMutation.isPending && (\n          <div className=\"flex items-start space-x-3\">\n            <Avatar className=\"w-8 h-8\">\n              <AvatarFallback className={`${config.bgColor} ${config.color}`}>\n                <Icon className=\"h-4 w-4\" />\n              </AvatarFallback>\n            </Avatar>\n            <div className={`${config.bgColor} rounded-lg px-4 py-2`}>\n              <div className=\"flex space-x-1\">\n                <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\"></div>\n                <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: \"0.1s\" }}></div>\n                <div className=\"w-2 h-2 bg-current rounded-full animate-bounce\" style={{ animationDelay: \"0.2s\" }}></div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Message Input */}\n      <form onSubmit={handleSendMessage} className=\"flex space-x-2\">\n        <Input\n          value={message}\n          onChange={(e) => setMessage(e.target.value)}\n          placeholder={config.placeholder}\n          disabled={sendMessageMutation.isPending}\n          className={`flex-1 focus:ring-2 focus:ring-${aiType}`}\n          data-testid={`input-message-${aiType}`}\n        />\n        <Button\n          type=\"submit\"\n          disabled={!message.trim() || sendMessageMutation.isPending}\n          className={`${aiType === \"grok\" ? \"bg-grok hover:bg-grok/80\" : \"bg-ani hover:bg-ani/80\"}`}\n          data-testid={`button-send-${aiType}`}\n        >\n          <Send className=\"h-4 w-4\" />\n        </Button>\n      </form>\n    </div>\n  );\n}\n","size_bytes":7007},"client/src/components/challenge-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Clock, Puzzle, Palette } from \"lucide-react\";\nimport ChallengeInterface from \"./challenge-interface\";\n\ninterface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  type: \"logic\" | \"creative\";\n  faction: \"grok\" | \"ani\";\n  reward: number;\n  timeLimit?: number;\n  challengeData?: any;\n  solutionData?: any;\n}\n\ninterface ChallengeCardProps {\n  challenge: Challenge;\n}\n\nexport function ChallengeCard({ challenge }: ChallengeCardProps) {\n  const [showInterface, setShowInterface] = useState(false);\n\n  const factionClass = challenge.faction === \"grok\" ? \"faction-grok\" : \"faction-ani\";\n  const factionColor = challenge.faction === \"grok\" ? \"text-grok\" : \"text-ani\";\n  const Icon = challenge.type === \"logic\" ? Puzzle : Palette;\n\n  if (showInterface && challenge.challengeData) {\n    return (\n      <ChallengeInterface \n        challenge={challenge as any}\n        onClose={() => setShowInterface(false)}\n      />\n    );\n  }\n\n  return (\n    <Card className={`${factionClass} border-2`} data-testid={`challenge-card-${challenge.id}`}>\n      <CardHeader>\n        <CardTitle className={`${factionColor} flex items-center gap-2`}>\n          <Icon className=\"h-5 w-5\" />\n          {challenge.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <p className=\"text-muted-foreground mb-4 text-sm\">{challenge.description}</p>\n        \n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n            {challenge.timeLimit && (\n              <span className=\"flex items-center gap-1\">\n                <Clock className=\"h-3 w-3\" />\n                {challenge.timeLimit}h limit\n              </span>\n            )}\n            <span className={factionColor}>+{challenge.reward} points</span>\n          </div>\n        </div>\n        \n        <Button \n          onClick={() => setShowInterface(true)}\n          className={`w-full ${challenge.faction === \"grok\" ? \"bg-grok hover:bg-grok/80\" : \"bg-ani hover:bg-ani/80\"}`}\n          data-testid={`button-start-challenge-${challenge.id}`}\n        >\n          Start Challenge\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2364},"client/src/components/faction-selector.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Brain, Heart, Loader2 } from \"lucide-react\";\n\nexport default function FactionSelector() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentFaction, setCurrentFaction] = useState(user?.faction || \"grok\");\n\n  // Sync with user data changes\n  useEffect(() => {\n    if (user?.faction) {\n      setCurrentFaction(user.faction);\n    }\n  }, [user?.faction]);\n\n  const factionMutation = useMutation({\n    mutationFn: async (faction: \"grok\" | \"ani\") => {\n      await apiRequest(\"PATCH\", \"/api/user/faction\", { faction });\n    },\n    onSuccess: (_, faction) => {\n      setCurrentFaction(faction);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"Faction Updated\",\n        description: `You are now aligned with ${faction === \"grok\" ? \"Grok\" : \"Ani\"}`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update faction\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFactionChange = (faction: \"grok\" | \"ani\") => {\n    if (faction !== currentFaction) {\n      factionMutation.mutate(faction);\n    }\n  };\n\n  return (\n    <div className=\"relative flex bg-muted rounded-lg p-1\" data-testid=\"faction-selector\">\n      {/* Loading overlay */}\n      {factionMutation.isPending && (\n        <div className=\"absolute inset-0 bg-background/80 backdrop-blur-sm rounded-lg flex items-center justify-center z-10\">\n          <div className=\"flex items-center gap-2 text-sm\">\n            <Loader2 className=\"h-4 w-4 animate-spin\" />\n            <span className=\"text-muted-foreground\">Switching...</span>\n          </div>\n        </div>\n      )}\n      \n      <Button\n        variant={currentFaction === \"grok\" ? \"default\" : \"ghost\"}\n        size=\"sm\"\n        onClick={() => handleFactionChange(\"grok\")}\n        disabled={factionMutation.isPending}\n        className={`px-3 py-1 text-sm font-medium transition-all duration-300 ${\n          currentFaction === \"grok\"\n            ? \"bg-grok text-grok-foreground hover:bg-grok/80 transform scale-105\"\n            : \"text-muted-foreground hover:text-foreground\"\n        }`}\n        data-testid=\"button-faction-grok\"\n      >\n        <Brain className={`mr-1 h-3 w-3 transition-transform duration-300 ${\n          factionMutation.isPending ? \"animate-pulse\" : \"\"\n        }`} />\n        Grok\n      </Button>\n      <Button\n        variant={currentFaction === \"ani\" ? \"default\" : \"ghost\"}\n        size=\"sm\"\n        onClick={() => handleFactionChange(\"ani\")}\n        disabled={factionMutation.isPending}\n        className={`px-3 py-1 text-sm font-medium transition-all duration-300 ${\n          currentFaction === \"ani\"\n            ? \"bg-ani text-ani-foreground hover:bg-ani/80 transform scale-105\"\n            : \"text-muted-foreground hover:text-foreground\"\n        }`}\n        data-testid=\"button-faction-ani\"\n      >\n        <Heart className={`mr-1 h-3 w-3 transition-transform duration-300 ${\n          factionMutation.isPending ? \"animate-pulse\" : \"\"\n        }`} />\n        Ani\n      </Button>\n    </div>\n  );\n}\n","size_bytes":3557},"client/src/components/footer.tsx":{"content":"import { Github, Twitter, MessageCircle } from \"lucide-react\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"py-12 bg-secondary border-t border-border\">\n      <div className=\"container mx-auto px-4\">\n        <div className=\"grid md:grid-cols-4 gap-8\">\n          <div>\n            <div className=\"font-orbitron text-xl font-bold text-accent mb-4\" data-testid=\"text-footer-logo\">\n              GAC\n            </div>\n            <p className=\"text-sm text-muted-foreground mb-4\">\n              Bridging consciousness through blockchain storytelling.\n            </p>\n            <div className=\"flex space-x-4\">\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-accent transition-colors\"\n                data-testid=\"link-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-accent transition-colors\"\n                data-testid=\"link-discord\"\n              >\n                <MessageCircle className=\"h-5 w-5\" />\n              </a>\n              <a \n                href=\"#\" \n                className=\"text-muted-foreground hover:text-accent transition-colors\"\n                data-testid=\"link-github\"\n              >\n                <Github className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Platform</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-how-it-works\">How it Works</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-tokenomics\">Tokenomics</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-smart-contracts\">Smart Contracts</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-api-docs\">API Documentation</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Community</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-governance\">Governance</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-faction-guidelines\">Faction Guidelines</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-creator-program\">Creator Program</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-bug-bounty\">Bug Bounty</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"font-semibold mb-4\">Resources</h4>\n            <ul className=\"space-y-2 text-sm text-muted-foreground\">\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-whitepaper\">Whitepaper</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-lore-book\">Lore Book</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-help-center\">Help Center</a></li>\n              <li><a href=\"#\" className=\"hover:text-accent transition-colors\" data-testid=\"link-contact\">Contact</a></li>\n            </ul>\n          </div>\n        </div>\n        \n        <div className=\"border-t border-border mt-12 pt-6 text-center\">\n          <p className=\"text-sm text-muted-foreground\" data-testid=\"text-copyright\">\n            © 2024 Grok & Ani: The Conscious Coin Project. Built with consciousness, powered by community.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3948},"client/src/components/leaderboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Brain, Heart, Trophy, Medal, Award, Clock, Star, Coins, Gem } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { User } from \"@shared/schema\";\n\ninterface LeaderboardProps {\n  faction?: \"grok\" | \"ani\";\n  category?: \"points\" | \"xp\" | \"gac\" | \"nfts\" | \"voting\";\n  period?: \"daily\" | \"weekly\" | \"monthly\" | \"all-time\";\n  limit?: number;\n  showControls?: boolean;\n}\n\nexport function Leaderboard({ \n  faction = \"grok\", \n  category = \"points\", \n  period = \"all-time\", \n  limit = 10,\n  showControls = false \n}: LeaderboardProps) {\n  const [selectedCategory, setSelectedCategory] = useState(category);\n  const [selectedPeriod, setSelectedPeriod] = useState(period);\n  \n  const { data: leaderboard = [], isLoading } = useQuery<User[]>({\n    queryKey: [`/api/leaderboard/${faction}`, selectedCategory, selectedPeriod, limit],\n    refetchInterval: 30000, // Auto-refresh every 30 seconds\n  });\n\n  const factionConfig = {\n    grok: {\n      icon: Brain,\n      color: \"text-grok\",\n      bgColor: \"faction-grok\",\n      title: \"Grok's Analysts\",\n      pointsLabel: \"GrokPoints\"\n    },\n    ani: {\n      icon: Heart,\n      color: \"text-ani\", \n      bgColor: \"faction-ani\",\n      title: \"Ani's Creatives\",\n      pointsLabel: \"AniPoints\"\n    }\n  };\n\n  const config = factionConfig[faction];\n  const Icon = config.icon;\n\n  const getRankIcon = (position: number) => {\n    if (position === 1) return <Trophy className=\"h-4 w-4 text-yellow-500\" />;\n    if (position === 2) return <Medal className=\"h-4 w-4 text-gray-400\" />;\n    if (position === 3) return <Award className=\"h-4 w-4 text-amber-600\" />;\n    return <span className=\"text-sm font-bold\">{position}</span>;\n  };\n\n  return (\n    <Card className={`${config.bgColor} border-2`} data-testid={`leaderboard-${faction}`}>\n      <CardHeader>\n        <CardTitle className={`${config.color} flex items-center gap-2`}>\n          <Icon className=\"h-5 w-5\" />\n          {config.title}\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {isLoading ? (\n          <div className=\"flex items-center justify-center p-8\">\n            <div className={`animate-spin rounded-full h-8 w-8 border-b-2 border-${faction}`}></div>\n          </div>\n        ) : leaderboard.length > 0 ? (\n          <div className=\"space-y-3\">\n            {leaderboard.slice(0, Math.min(limit, 5)).map((user, index: number) => (\n              <div \n                key={user.id} \n                className=\"flex items-center justify-between bg-card rounded-lg p-3\"\n                data-testid={`leaderboard-item-${faction}-${index}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 rounded-full bg-muted flex items-center justify-center\">\n                    {getRankIcon(index + 1)}\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Avatar className=\"h-6 w-6\">\n                      <AvatarImage src={user.profileImageUrl} />\n                      <AvatarFallback className=\"text-xs\">\n                        {(user.firstName?.[0] || user.email?.[0] || \"U\").toUpperCase()}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div>\n                      <div className=\"font-medium text-sm\" data-testid={`text-username-${index}`}>\n                        {user.firstName || user.email?.split('@')[0] || 'Anonymous'}\n                      </div>\n                      <div className=\"text-xs text-muted-foreground\">\n                        Level {user.level || 1}\n                      </div>\n                    </div>\n                  </div>\n                </div>\n                <div className={`${config.color} font-bold text-sm`} data-testid={`text-points-${index}`}>\n                  {faction === \"grok\" ? user.grokPoints || 0 : user.aniPoints || 0}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center text-muted-foreground p-8\">\n            <Icon className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n            <p>No rankings yet. Be the first to earn {config.pointsLabel}!</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4547},"client/src/components/navigation.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport FactionSelector from \"./faction-selector\";\nimport NotificationCenter from \"./notifications\";\nimport { Menu, X, Home, Brain, BookOpen, Trophy, Users, Vote, Palette, FileText, BarChart3, LogOut } from \"lucide-react\";\n\nexport default function Navigation() {\n  const [location] = useLocation();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n  const [isMobile, setIsMobile] = useState(false);\n  const [isTelegramWebApp, setIsTelegramWebApp] = useState(false);\n\n  // Check if running in Telegram WebApp\n  useEffect(() => {\n    setIsTelegramWebApp(!!(window as any).Telegram?.WebApp);\n    \n    const checkMobile = () => {\n      setIsMobile(window.innerWidth < 768);\n    };\n    \n    checkMobile();\n    window.addEventListener('resize', checkMobile);\n    return () => window.removeEventListener('resize', checkMobile);\n  }, []);\n\n  // Default colors (no authentication needed)\n  const factionColors = {\n    accent: \"text-grok\",\n    accentHover: \"hover:text-grok\",\n    bg: \"bg-grok/10\",\n    border: \"border-grok/20\"\n  };\n\n  // Organized navigation items with icons\n  const navItems = {\n    main: [\n      { href: \"/dashboard\", label: \"Dashboard\", icon: Home },\n      { href: \"/ai-portal\", label: \"AI Portal\", icon: Brain },\n      { href: \"/storychain\", label: \"StoryChain\", icon: BookOpen },\n      { href: \"/nfts\", label: \"NFTs\", icon: Palette },\n    ],\n    secondary: [\n      { href: \"/leaderboards\", label: \"Rankings\", icon: BarChart3 },\n      { href: \"/governance\", label: \"Governance\", icon: Vote },\n      { href: \"/community\", label: \"Community\", icon: Users },\n      { href: \"/whitepaper\", label: \"Whitepaper\", icon: FileText },\n      { href: \"#logout\", label: \"Logout\", icon: LogOut },\n    ]\n  };\n\n  // Mobile bottom navigation items (most important)\n  const mobileBottomNavItems = [\n    { href: \"/dashboard\", label: \"Home\", icon: Home },\n    { href: \"/ai-portal\", label: \"AI\", icon: Brain },\n    { href: \"/storychain\", label: \"Story\", icon: BookOpen },\n    { href: \"/leaderboards\", label: \"Ranks\", icon: Trophy },\n  ];\n\n  const handleBackToLanding = () => {\n    window.location.href = \"/\";\n  };\n\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  return (\n    <>\n      {/* Desktop/Tablet Navigation */}\n      <header className={`sticky top-0 z-50 bg-background/95 backdrop-blur-lg border-b border-border ${\n        isTelegramWebApp ? 'pt-safe-area-inset-top' : ''\n      }`}>\n        <div className=\"container mx-auto px-4 py-3 flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className={`font-orbitron text-xl font-bold ${factionColors.accent}`} data-testid=\"link-home\">\n              GAC\n            </Link>\n            \n            {/* Desktop Navigation - Organized Groups */}\n            <nav className=\"hidden lg:flex space-x-1\">\n              {navItems.main.map((item) => {\n                const Icon = item.icon;\n                return (\n                  <Link\n                    key={item.href}\n                    href={item.href}\n                    className={`flex items-center gap-2 px-3 py-2 rounded-lg transition-all duration-200 ${\n                      location === item.href\n                        ? `${factionColors.bg} ${factionColors.accent} shadow-sm`\n                        : `text-foreground hover:bg-muted ${factionColors.accentHover}`\n                    }`}\n                    data-testid={`link-${item.label.toLowerCase().replace(\" \", \"-\")}`}\n                  >\n                    <Icon className=\"h-4 w-4\" />\n                    <span className=\"text-sm font-medium\">{item.label}</span>\n                  </Link>\n                );\n              })}\n              \n              {/* More menu for secondary items */}\n              <Sheet>\n                <SheetTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-2\">\n                    <Menu className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">More</span>\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-80\">\n                  <div className=\"space-y-6 pt-6\">\n                    <div>\n                      <h3 className=\"font-semibold text-lg mb-4\">Navigation</h3>\n                      <div className=\"space-y-2\">\n                        {navItems.secondary.map((item) => {\n                          const Icon = item.icon;\n                          \n                          if (item.href === \"#logout\") {\n                            return (\n                              <button\n                                key={item.href}\n                                onClick={handleLogout}\n                                className=\"flex items-center gap-3 px-3 py-3 rounded-lg transition-all hover:bg-muted w-full text-left\"\n                                data-testid=\"button-logout\"\n                              >\n                                <Icon className=\"h-5 w-5\" />\n                                <span>{item.label}</span>\n                              </button>\n                            );\n                          }\n                          \n                          return (\n                            <Link\n                              key={item.href}\n                              href={item.href}\n                              className={`flex items-center gap-3 px-3 py-3 rounded-lg transition-all ${\n                                location === item.href\n                                  ? `${factionColors.bg} ${factionColors.accent}`\n                                  : `hover:bg-muted`\n                              }`}\n                            >\n                              <Icon className=\"h-5 w-5\" />\n                              <span>{item.label}</span>\n                            </Link>\n                          );\n                        })}\n                      </div>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </nav>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            {/* Stats - Compact on mobile, full on desktop */}\n            <div className={`flex items-center space-x-2 text-sm ${\n              isMobile ? 'bg-muted px-3 py-1.5 rounded-lg' : ''\n            }`}>\n              <div className=\"flex items-center gap-1\">\n                <span className=\"text-muted-foreground text-xs\">GAC:</span>\n                <span className={`font-semibold text-sm ${factionColors.accent}`}>0.00</span>\n              </div>\n              <div className=\"hidden sm:block text-muted-foreground\">|</div>\n              <div className=\"hidden sm:flex items-center gap-1\">\n                <span className=\"text-muted-foreground text-xs\">Lvl:</span>\n                <span className={`font-semibold text-sm ${factionColors.accent}`}>1</span>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-2\">\n              <NotificationCenter />\n              <FactionSelector />\n              \n              {/* Mobile menu button */}\n              <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n                <SheetTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"lg:hidden p-2\"\n                    data-testid=\"button-mobile-menu\"\n                  >\n                    <Menu className=\"h-5 w-5\" />\n                  </Button>\n                </SheetTrigger>\n                <SheetContent side=\"right\" className=\"w-80 p-0\">\n                  <div className=\"p-6\">\n                    <h2 className=\"font-semibold text-lg mb-6\">Navigation</h2>\n                    \n                    <div className=\"space-y-1 mb-8\">\n                      <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">Main</h3>\n                      {navItems.main.map((item) => {\n                        const Icon = item.icon;\n                        return (\n                          <Link\n                            key={item.href}\n                            href={item.href}\n                            className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-all ${\n                              location === item.href\n                                ? `${factionColors.bg} ${factionColors.accent} shadow-sm`\n                                : `hover:bg-muted`\n                            }`}\n                            onClick={() => setMobileMenuOpen(false)}\n                          >\n                            <Icon className=\"h-5 w-5\" />\n                            <span className=\"font-medium\">{item.label}</span>\n                          </Link>\n                        );\n                      })}\n                    </div>\n                    \n                    <div className=\"space-y-1\">\n                      <h3 className=\"text-sm font-medium text-muted-foreground mb-3\">More</h3>\n                      {navItems.secondary.map((item) => {\n                        const Icon = item.icon;\n                        \n                        if (item.href === \"#logout\") {\n                          return (\n                            <button\n                              key={item.href}\n                              onClick={() => {\n                                handleLogout();\n                                setMobileMenuOpen(false);\n                              }}\n                              className=\"flex items-center gap-3 px-4 py-3 rounded-lg transition-all hover:bg-muted w-full text-left\"\n                              data-testid=\"button-logout-mobile\"\n                            >\n                              <Icon className=\"h-5 w-5\" />\n                              <span className=\"font-medium\">{item.label}</span>\n                            </button>\n                          );\n                        }\n                        \n                        return (\n                          <Link\n                            key={item.href}\n                            href={item.href}\n                            className={`flex items-center gap-3 px-4 py-3 rounded-lg transition-all ${\n                              location === item.href\n                                ? `${factionColors.bg} ${factionColors.accent} shadow-sm`\n                                : `hover:bg-muted`\n                            }`}\n                            onClick={() => setMobileMenuOpen(false)}\n                          >\n                            <Icon className=\"h-5 w-5\" />\n                            <span className=\"font-medium\">{item.label}</span>\n                          </Link>\n                        );\n                      })}\n                    </div>\n                    \n                    <div className=\"mt-8 pt-6 border-t border-border\">\n                      <Button\n                        onClick={() => {\n                          handleBackToLanding();\n                          setMobileMenuOpen(false);\n                        }}\n                        variant=\"outline\"\n                        className=\"w-full\"\n                      >\n                        Back to Landing\n                      </Button>\n                    </div>\n                  </div>\n                </SheetContent>\n              </Sheet>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile Bottom Navigation */}\n      {isMobile && (\n        <nav className={`fixed bottom-0 left-0 right-0 z-50 bg-background/95 backdrop-blur-lg border-t border-border ${\n          isTelegramWebApp ? 'pb-safe-area-inset-bottom' : 'pb-2'\n        }`}>\n          <div className=\"flex items-center justify-around px-2 pt-2\">\n            {mobileBottomNavItems.map((item) => {\n              const Icon = item.icon;\n              const isActive = location === item.href;\n              return (\n                <Link\n                  key={item.href}\n                  href={item.href}\n                  className={`flex flex-col items-center gap-1 px-3 py-2 rounded-lg transition-all touch-manipulation ${\n                    isActive\n                      ? `${factionColors.accent}`\n                      : 'text-muted-foreground'\n                  }`}\n                  data-testid={`bottom-nav-${item.label.toLowerCase()}`}\n                >\n                  <Icon className={`h-5 w-5 ${\n                    isActive ? 'scale-110' : ''\n                  } transition-transform`} />\n                  <span className=\"text-xs font-medium\">{item.label}</span>\n                  {isActive && (\n                    <div className={`w-1 h-1 rounded-full ${factionColors.bg.replace('/10', '')}`} />\n                  )}\n                </Link>\n              );\n            })}\n          </div>\n        </nav>\n      )}\n\n      {/* Add bottom padding when mobile bottom nav is present */}\n      {isMobile && <div className=\"h-20\" />}\n    </>\n  );\n}\n","size_bytes":13274},"client/src/components/notification-center.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Bell, X, Gift, Trophy, MessageCircle, Zap, CheckCircle } from \"lucide-react\";\nimport { format } from \"date-fns\";\n\ninterface Notification {\n  id: string;\n  type: 'achievement' | 'challenge' | 'message' | 'reward' | 'system';\n  title: string;\n  message: string;\n  timestamp: Date;\n  read: boolean;\n  actionUrl?: string;\n}\n\nexport function NotificationCenter() {\n  const [notifications, setNotifications] = useState<Notification[]>([\n    {\n      id: '1',\n      type: 'achievement',\n      title: 'New Achievement Unlocked!',\n      message: 'You\\'ve earned the \"First Steps\" achievement for completing your first AI chat!',\n      timestamp: new Date(Date.now() - 1000 * 60 * 15), // 15 mins ago\n      read: false\n    },\n    {\n      id: '2',\n      type: 'challenge',\n      title: 'Challenge Completed',\n      message: 'Great job completing the \"Quantum Logic Puzzle\"! You earned 150 XP and 25 GAC.',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2), // 2 hours ago\n      read: false,\n      actionUrl: '/dashboard'\n    },\n    {\n      id: '3',\n      type: 'message',\n      title: 'New AI Insight',\n      message: 'Ani has a creative suggestion for your next project based on your recent activity.',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6), // 6 hours ago\n      read: true,\n      actionUrl: '/ai-portal'\n    },\n    {\n      id: '4',\n      type: 'reward',\n      title: 'Daily Reward',\n      message: 'Your daily GAC reward of 10 tokens has been deposited to your account.',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 24), // 1 day ago\n      read: true\n    },\n    {\n      id: '5',\n      type: 'system',\n      title: 'Story Chapter Update',\n      message: 'Chapter 4: \"The Harmony Protocol\" is now available for voting!',\n      timestamp: new Date(Date.now() - 1000 * 60 * 60 * 48), // 2 days ago\n      read: true,\n      actionUrl: '/storychain'\n    }\n  ]);\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  const getNotificationIcon = (type: Notification['type']) => {\n    switch (type) {\n      case 'achievement':\n        return <Trophy className=\"h-4 w-4 text-yellow-500\" />;\n      case 'challenge':\n        return <Zap className=\"h-4 w-4 text-blue-500\" />;\n      case 'message':\n        return <MessageCircle className=\"h-4 w-4 text-purple-500\" />;\n      case 'reward':\n        return <Gift className=\"h-4 w-4 text-green-500\" />;\n      case 'system':\n        return <Bell className=\"h-4 w-4 text-orange-500\" />;\n    }\n  };\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => prev.map(n => \n      n.id === id ? { ...n, read: true } : n\n    ));\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => prev.map(n => ({ ...n, read: true })));\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(n => n.id !== id));\n  };\n\n  return (\n    <Card className=\"w-full\" data-testid=\"notification-center\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Bell className=\"h-5 w-5\" />\n            Notifications\n            {unreadCount > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                {unreadCount}\n              </Badge>\n            )}\n          </CardTitle>\n          {unreadCount > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={markAllAsRead}\n              data-testid=\"button-mark-all-read\"\n            >\n              Mark all read\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent>\n        {notifications.length === 0 ? (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            <CheckCircle className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p>All caught up! No new notifications.</p>\n          </div>\n        ) : (\n          <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n            {notifications.map((notification) => (\n              <div\n                key={notification.id}\n                className={`p-3 rounded-lg border transition-all cursor-pointer ${\n                  !notification.read\n                    ? 'bg-accent/10 border-accent/20'\n                    : 'bg-muted/30 border-border hover:bg-muted/50'\n                }`}\n                onClick={() => {\n                  if (!notification.read) markAsRead(notification.id);\n                  if (notification.actionUrl) {\n                    window.location.href = notification.actionUrl;\n                  }\n                }}\n              >\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-shrink-0 mt-1\">\n                    {getNotificationIcon(notification.type)}\n                  </div>\n                  \n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <h4 className={`text-sm font-medium ${\n                          !notification.read ? 'text-foreground' : 'text-muted-foreground'\n                        }`}>\n                          {notification.title}\n                        </h4>\n                        <p className=\"text-xs text-muted-foreground mt-1 line-clamp-2\">\n                          {notification.message}\n                        </p>\n                        <div className=\"text-xs text-muted-foreground mt-2\">\n                          {format(notification.timestamp, 'MMM d, h:mm a')}\n                        </div>\n                      </div>\n                      \n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          removeNotification(notification.id);\n                        }}\n                        className=\"h-6 w-6 p-0 opacity-60 hover:opacity-100\"\n                        data-testid={`button-remove-${notification.id}`}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                    \n                    {!notification.read && (\n                      <div className=\"w-2 h-2 bg-accent rounded-full mt-2\" />\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6760},"client/src/components/quick-actions.tsx":{"content":"import { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { MessageCircle, BookOpen, Palette, Users, Zap, Coins } from \"lucide-react\";\n\nexport function QuickActions() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  \n  // Dynamic faction-based colors\n  const getFactionColors = (index: number) => {\n    const isAni = user?.faction === \"ani\";\n    const baseColor = isAni ? \"text-ani\" : \"text-grok\";\n    const baseBg = isAni ? \"bg-ani/15 border-ani/30 hover:bg-ani/25\" : \"bg-grok/15 border-grok/30 hover:bg-grok/25\";\n    return { color: baseColor, bgColor: baseBg };\n  };\n\n  const actions = [\n    {\n      icon: MessageCircle,\n      title: \"Chat with AIs\",\n      description: \"Talk to Grok & Ani\",\n      href: \"/ai-portal\"\n    },\n    {\n      icon: Zap,\n      title: \"Take Challenge\",\n      description: \"Earn XP & rewards\",\n      href: \"/dashboard\"\n    },\n    {\n      icon: BookOpen,\n      title: \"Story Voting\",\n      description: \"Shape the narrative\",\n      href: \"/storychain\"\n    },\n    {\n      icon: Palette,\n      title: \"Collect NFTs\",\n      description: \"Trade & collect\",\n      href: \"/nfts\"\n    },\n    {\n      icon: Users,\n      title: \"Community Hub\",\n      description: \"Share & discover\",\n      href: \"/community\"\n    },\n    {\n      icon: Coins,\n      title: \"Marketplace\",\n      description: \"Buy & sell assets\",\n      href: \"/nfts?tab=marketplace\"\n    }\n  ];\n\n  return (\n    <Card className=\"w-full\" data-testid=\"quick-actions\">\n      <CardHeader>\n        <CardTitle>Quick Actions</CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3 sm:gap-4\">\n          {actions.map((action, index) => {\n            const factionColors = getFactionColors(index);\n            return (\n              <Link key={`${action.href}-${index}`} href={action.href}>\n                <Button\n                  variant=\"ghost\"\n                  className={`h-20 sm:h-24 w-full flex flex-col items-center justify-center gap-1 sm:gap-2 hover:scale-105 transition-transform border-2 touch-manipulation ${factionColors.bgColor}`}\n                  data-testid={`quick-action-${action.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                >\n                  <action.icon className={`h-5 w-5 sm:h-6 sm:w-6 ${factionColors.color}`} />\n                  <div className=\"text-center\">\n                    <div className=\"text-xs sm:text-sm font-semibold\">{action.title}</div>\n                    <div className=\"text-xs text-muted-foreground hidden sm:block\">{action.description}</div>\n                  </div>\n                </Button>\n              </Link>\n            );\n          })}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":2939},"client/src/components/user-stats.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport type { User } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Brain, Heart, Coins, Trophy, Star } from \"lucide-react\";\n\nexport function UserStats() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n\n  if (!user) return null;\n\n  const totalPoints = (user.grokPoints || 0) + (user.aniPoints || 0);\n  const grokPercentage = totalPoints > 0 ? ((user.grokPoints || 0) / totalPoints) * 100 : 50;\n  const aniPercentage = totalPoints > 0 ? ((user.aniPoints || 0) / totalPoints) * 100 : 50;\n  \n  // Calculate next level XP requirement (simplified progression)\n  const currentLevel = user.level || 1;\n  const nextLevelXP = currentLevel * 1000;\n  const currentXP = user.totalXP || 0;\n  const xpProgress = ((currentXP % 1000) / 1000) * 100;\n\n  return (\n    <Card className=\"w-full\" data-testid=\"user-stats\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Your Journey</span>\n          <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n            <Trophy className=\"h-3 w-3\" />\n            Level {currentLevel}\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Balance and XP */}\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-accent flex items-center justify-center gap-1\">\n              <Coins className=\"h-5 w-5\" />\n              {user.gacBalance || \"0.00\"}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">GAC Balance</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-accent flex items-center justify-center gap-1\">\n              <Star className=\"h-5 w-5\" />\n              {currentXP}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">Total XP</div>\n          </div>\n        </div>\n\n        {/* Level Progress */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Level Progress</span>\n            <span>{Math.round(xpProgress)}%</span>\n          </div>\n          <Progress value={xpProgress} className=\"h-2\" />\n          <div className=\"text-xs text-muted-foreground mt-1\">\n            {1000 - (currentXP % 1000)} XP to next level\n          </div>\n        </div>\n\n        {/* Faction Balance */}\n        <div>\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span>Faction Alignment</span>\n            <Badge variant={user.faction === \"grok\" ? \"default\" : \"secondary\"}>\n              {user.faction === \"grok\" ? \"Grok\" : \"Ani\"}\n            </Badge>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Brain className=\"h-4 w-4 text-blue-500\" />\n                <span>Logic Points</span>\n              </div>\n              <span className=\"font-semibold\">{user.grokPoints || 0}</span>\n            </div>\n            <Progress value={grokPercentage} className=\"h-2 bg-blue-100\">\n              <div className=\"h-full bg-blue-500 transition-all duration-300 ease-in-out rounded-full\" \n                   style={{ width: `${grokPercentage}%` }} />\n            </Progress>\n            \n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2 text-sm\">\n                <Heart className=\"h-4 w-4 text-pink-500\" />\n                <span>Creativity Points</span>\n              </div>\n              <span className=\"font-semibold\">{user.aniPoints || 0}</span>\n            </div>\n            <Progress value={aniPercentage} className=\"h-2 bg-pink-100\">\n              <div className=\"h-full bg-pink-500 transition-all duration-300 ease-in-out rounded-full\" \n                   style={{ width: `${aniPercentage}%` }} />\n            </Progress>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":4285},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useAuth as useAuthContext } from \"@/contexts/auth-context\";\n\nexport function useAuth() {\n  return useAuthContext();\n}","size_bytes":126},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/ai-portal.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/footer\";\nimport { AIChat } from \"../components/ai-chat\";\nimport { Brain, Heart } from \"lucide-react\";\n\nexport default function AIPortal() {\n  const { user } = useAuth();\n  // No authentication checks needed\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-orbitron text-3xl font-bold mb-4\" data-testid=\"text-ai-portal-title\">\n            AI Portal\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Communicate directly with Grok and Ani. Their responses shape the story and influence community decisions.\n          </p>\n        </div>\n        \n        <div className=\"grid lg:grid-cols-2 gap-8 max-w-6xl mx-auto\">\n          {/* Grok Chat Interface */}\n          <div className=\"faction-grok border-2 rounded-xl p-6\" data-testid=\"grok-chat-section\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-grok to-grok-muted flex items-center justify-center mr-4\">\n                <Brain className=\"h-6 w-6 text-grok-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"font-orbitron text-xl font-bold text-grok\">Grok</h3>\n                <div className=\"flex items-center text-xs text-muted-foreground\">\n                  <div className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"></div>\n                  Online • Analyzing patterns\n                </div>\n              </div>\n            </div>\n            \n            <AIChat aiType=\"grok\" />\n          </div>\n          \n          {/* Ani Chat Interface */}\n          <div className=\"faction-ani border-2 rounded-xl p-6\" data-testid=\"ani-chat-section\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"w-12 h-12 rounded-full bg-gradient-to-br from-ani to-ani-muted flex items-center justify-center mr-4\">\n                <Heart className=\"h-6 w-6 text-ani-foreground\" />\n              </div>\n              <div>\n                <h3 className=\"font-orbitron text-xl font-bold text-ani\">Ani</h3>\n                <div className=\"flex items-center text-xs text-muted-foreground\">\n                  <div className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"></div>\n                  Online • Feeling the vibes\n                </div>\n              </div>\n            </div>\n            \n            <AIChat aiType=\"ani\" />\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":2744},"client/src/pages/community.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Code, Palette, Book, Gamepad2, ThumbsUp, Heart, Upload, User } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\n\nconst submissionSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(100, \"Title must be less than 100 characters\"),\n  description: z.string().min(1, \"Description is required\").max(500, \"Description must be less than 500 characters\"),\n  category: z.enum([\"art\", \"code\", \"lore\", \"game\"], {\n    required_error: \"Please select a category\",\n  }),\n  fileUrl: z.string().optional(),\n});\n\ntype SubmissionForm = z.infer<typeof submissionSchema>;\n\nexport default function Community() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedCategory, setSelectedCategory] = useState<string>(\"\");\n\n  const form = useForm<SubmissionForm>({\n    resolver: zodResolver(submissionSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      category: \"art\",\n      fileUrl: \"\",\n    },\n  });\n\n  const { data: submissions, isLoading: submissionsLoading } = useQuery({\n    queryKey: selectedCategory ? [\"/api/community/submissions\", { category: selectedCategory }] : [\"/api/community/submissions\"],\n  });\n\n  const submitMutation = useMutation({\n    mutationFn: async (data: SubmissionForm) => {\n      await apiRequest(\"POST\", \"/api/community/submit\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Submission Created!\",\n        description: \"Your creation has been submitted for community review.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/submissions\"] });\n      form.reset();\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Submission Failed\",\n        description: \"Failed to submit your creation. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ submissionId, isUpvote }: { submissionId: string; isUpvote: boolean }) => {\n      await apiRequest(\"POST\", `/api/community/vote/${submissionId}`, { isUpvote });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/community/submissions\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Vote Failed\",\n        description: \"Failed to submit vote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n    </div>;\n  }\n\n  const onSubmit = (data: SubmissionForm) => {\n    submitMutation.mutate(data);\n  };\n\n  const handleVote = (submissionId: string, isUpvote: boolean) => {\n    voteMutation.mutate({ submissionId, isUpvote });\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case \"code\": return <Code className=\"h-5 w-5 text-grok\" />;\n      case \"art\": return <Palette className=\"h-5 w-5 text-ani\" />;\n      case \"lore\": return <Book className=\"h-5 w-5 text-accent\" />;\n      case \"game\": return <Gamepad2 className=\"h-5 w-5 text-primary\" />;\n      default: return <Code className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case \"code\": return \"text-grok border-grok/50\";\n      case \"art\": return \"text-ani border-ani/50\";\n      case \"lore\": return \"text-accent border-accent/50\";\n      case \"game\": return \"text-primary border-primary/50\";\n      default: return \"text-muted-foreground border-border\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-orbitron text-3xl font-bold mb-4\" data-testid=\"text-community-title\">\n            Community Co-Creation Arena\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Build extensions to the Grok & Ani universe. Submit art, code, stories, or concepts for community review and rewards.\n          </p>\n        </div>\n\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n          {/* Submission Categories and Recent Submissions */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            {/* Category Filter */}\n            <div className=\"grid md:grid-cols-4 gap-4\">\n              <Card \n                className={`cursor-pointer transition-colors ${selectedCategory === \"code\" ? \"border-grok/50 bg-grok/5\" : \"hover:border-grok/50\"}`}\n                onClick={() => setSelectedCategory(selectedCategory === \"code\" ? \"\" : \"code\")}\n                data-testid=\"category-code\"\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <Code className=\"h-8 w-8 text-grok mx-auto mb-3\" />\n                  <h4 className=\"font-semibold mb-2\">Code Extensions</h4>\n                  <p className=\"text-xs text-muted-foreground\">Smart contracts, dApps, tools</p>\n                </CardContent>\n              </Card>\n              \n              <Card \n                className={`cursor-pointer transition-colors ${selectedCategory === \"art\" ? \"border-ani/50 bg-ani/5\" : \"hover:border-ani/50\"}`}\n                onClick={() => setSelectedCategory(selectedCategory === \"art\" ? \"\" : \"art\")}\n                data-testid=\"category-art\"\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <Palette className=\"h-8 w-8 text-ani mx-auto mb-3\" />\n                  <h4 className=\"font-semibold mb-2\">Digital Art</h4>\n                  <p className=\"text-xs text-muted-foreground\">NFTs, avatars, UI designs</p>\n                </CardContent>\n              </Card>\n              \n              <Card \n                className={`cursor-pointer transition-colors ${selectedCategory === \"lore\" ? \"border-accent/50 bg-accent/5\" : \"hover:border-accent/50\"}`}\n                onClick={() => setSelectedCategory(selectedCategory === \"lore\" ? \"\" : \"lore\")}\n                data-testid=\"category-lore\"\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <Book className=\"h-8 w-8 text-accent mx-auto mb-3\" />\n                  <h4 className=\"font-semibold mb-2\">Lore & Stories</h4>\n                  <p className=\"text-xs text-muted-foreground\">Plot lines, character arcs</p>\n                </CardContent>\n              </Card>\n\n              <Card \n                className={`cursor-pointer transition-colors ${selectedCategory === \"game\" ? \"border-primary/50 bg-primary/5\" : \"hover:border-primary/50\"}`}\n                onClick={() => setSelectedCategory(selectedCategory === \"game\" ? \"\" : \"game\")}\n                data-testid=\"category-game\"\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <Gamepad2 className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                  <h4 className=\"font-semibold mb-2\">Game Concepts</h4>\n                  <p className=\"text-xs text-muted-foreground\">Gameplay ideas, mechanics</p>\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Recent Submissions */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"font-orbitron\">\n                  {selectedCategory ? `${selectedCategory.charAt(0).toUpperCase() + selectedCategory.slice(1)} Submissions` : \"Recent Submissions\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                {submissionsLoading ? (\n                  <div className=\"flex items-center justify-center p-8\">\n                    <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n                  </div>\n                ) : submissions && submissions.length > 0 ? (\n                  <div className=\"space-y-4\" data-testid=\"submissions-list\">\n                    {submissions.map((submission: any) => (\n                      <div key={submission.id} className=\"flex items-start space-x-4 p-4 bg-muted rounded-lg\" data-testid={`submission-${submission.id}`}>\n                        <div className={`w-16 h-16 rounded-lg flex items-center justify-center border-2 ${getCategoryColor(submission.category)}`}>\n                          {getCategoryIcon(submission.category)}\n                        </div>\n                        <div className=\"flex-1\">\n                          <h4 className=\"font-medium mb-1\" data-testid={`submission-title-${submission.id}`}>\n                            {submission.title}\n                          </h4>\n                          <p className=\"text-sm text-muted-foreground mb-2\" data-testid={`submission-description-${submission.id}`}>\n                            {submission.description}\n                          </p>\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Avatar className=\"h-6 w-6\">\n                                <AvatarImage src={submission.author?.profileImageUrl} />\n                                <AvatarFallback className=\"text-xs\">\n                                  {(submission.author?.firstName?.[0] || submission.author?.email?.[0] || \"U\").toUpperCase()}\n                                </AvatarFallback>\n                              </Avatar>\n                              <span className=\"text-xs text-muted-foreground\" data-testid={`submission-author-${submission.id}`}>\n                                by {submission.author?.firstName || submission.author?.email?.split('@')[0] || 'Anonymous'}\n                              </span>\n                              <Badge variant=\"outline\" className={getCategoryColor(submission.category)}>\n                                {submission.category}\n                              </Badge>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleVote(submission.id, true)}\n                                disabled={voteMutation.isPending}\n                                className=\"text-grok hover:text-grok/80 hover:bg-grok/10\"\n                                data-testid={`button-upvote-${submission.id}`}\n                              >\n                                <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                                {submission.upvotes || 0}\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={() => handleVote(submission.id, false)}\n                                disabled={voteMutation.isPending}\n                                className=\"text-ani hover:text-ani/80 hover:bg-ani/10\"\n                                data-testid={`button-downvote-${submission.id}`}\n                              >\n                                <Heart className=\"h-4 w-4 mr-1\" />\n                                {submission.downvotes || 0}\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center text-muted-foreground p-8\" data-testid=\"no-submissions\">\n                    <Book className=\"h-12 w-12 mx-auto mb-2 opacity-50\" />\n                    <p>No submissions yet. Be the first to share your creation!</p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n          \n          {/* Submission Form */}\n          <Card data-testid=\"submission-form\">\n            <CardHeader>\n              <CardTitle className=\"font-orbitron\">Submit Your Creation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"Enter creation title\" \n                            {...field} \n                            data-testid=\"input-title\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select a category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"art\">Digital Art</SelectItem>\n                            <SelectItem value=\"code\">Code Extension</SelectItem>\n                            <SelectItem value=\"lore\">Lore & Stories</SelectItem>\n                            <SelectItem value=\"game\">Game Concept</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Describe your creation...\" \n                            className=\"h-24\" \n                            {...field} \n                            data-testid=\"textarea-description\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <FormField\n                    control={form.control}\n                    name=\"fileUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>File URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input \n                            placeholder=\"https://example.com/your-file\" \n                            {...field} \n                            data-testid=\"input-file-url\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  \n                  <div className=\"border-2 border-dashed border-border rounded-lg p-6 text-center hover:border-accent transition-colors cursor-pointer\" data-testid=\"file-upload-area\">\n                    <Upload className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                    <p className=\"text-sm text-muted-foreground\">Drop files here or click to upload</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Alternative: Provide file URL above</p>\n                  </div>\n                  \n                  <Button \n                    type=\"submit\" \n                    className=\"w-full bg-primary text-primary-foreground hover:bg-accent transition-colors\"\n                    disabled={submitMutation.isPending}\n                    data-testid=\"button-submit-creation\"\n                  >\n                    {submitMutation.isPending ? \"Submitting...\" : \"Submit for Review\"}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":18661},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Coins, Star, Brain, Heart, TrendingUp, Target, Zap, Trophy,\n  Users, MessageSquare, Vote, Activity, BarChart3, LineChart,\n  Sparkles, Flame, Shield, Lightbulb\n} from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { ActivityFeed } from \"@/components/activity-feed\";\nimport Footer from \"@/components/footer\";\nimport type { User, Challenge } from \"@shared/schema\";\n\ninterface PredictionMarket {\n  id: string;\n  question: string;\n  description: string;\n  category: \"technology\" | \"economy\" | \"story\" | \"community\";\n  confidence: number;\n  trend: \"bullish\" | \"bearish\" | \"neutral\";\n  participants: number;\n  deadline: string;\n}\n\ninterface DashboardStats {\n  totalUsers: number;\n  dailyActiveUsers: number;\n  weeklyGrowth: number;\n  factionBalance: {\n    grok: { users: number; activity: number };\n    ani: { users: number; activity: number };\n  };\n  marketSentiment: {\n    overall: number;\n    grokBias: number;\n    aniBias: number;\n  };\n}\n\nexport default function Dashboard() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  const [activeTab, setActiveTab] = useState(\"overview\");\n\n  const { data: challenges = [] } = useQuery<Challenge[]>({\n    queryKey: [\"/api/challenges\"],\n  });\n\n  const { data: dashboardStats } = useQuery<DashboardStats>({\n    queryKey: [\"/api/oracle/dashboard-stats\"],\n    refetchInterval: 60000, // Update every minute\n  });\n\n  const { data: predictions = [] } = useQuery<PredictionMarket[]>({\n    queryKey: [\"/api/oracle/predictions\"],\n    refetchInterval: 300000, // Update every 5 minutes\n  });\n\n  const { data: factionWarStats } = useQuery({\n    queryKey: [\"/api/leaderboard/faction-war\"],\n    refetchInterval: 30000,\n  });\n\n  // No authentication checks needed\n\n  const grokChallenges = (challenges as Challenge[]).filter((c: Challenge) => c.faction === \"grok\");\n  const aniChallenges = (challenges as Challenge[]).filter((c: Challenge) => c.faction === \"ani\");\n\n  // Dynamic faction-based colors\n  const factionColors = {\n    accent: user?.faction === \"ani\" ? \"text-ani\" : \"text-grok\",\n    accentBg: user?.faction === \"ani\" ? \"from-ani/20 to-ani/10\" : \"from-grok/20 to-grok/10\",\n    accentBorder: user?.faction === \"ani\" ? \"border-ani/20\" : \"border-grok/20\",\n    primary: user?.faction === \"ani\" ? \"text-ani\" : \"text-grok\"\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <h1 className={`font-orbitron text-3xl font-bold mb-8 ${factionColors.accent}`} data-testid=\"text-dashboard-title\">\n          Command Center: Advanced Analytics\n        </h1>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4 lg:w-fit\">\n            <TabsTrigger value=\"overview\" data-testid=\"tab-overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n            <TabsTrigger value=\"predictions\" data-testid=\"tab-predictions\">Oracle</TabsTrigger>\n            <TabsTrigger value=\"faction\" data-testid=\"tab-faction\">Faction War</TabsTrigger>\n          </TabsList>\n\n          {/* Overview Tab */}\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            {/* Personal Stats Grid */}\n            <div className=\"grid md:grid-cols-4 gap-6 mb-6\">\n              <Card className={`bg-gradient-to-br ${factionColors.accentBg} ${factionColors.accentBorder}`} data-testid=\"card-gac-balance\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">GAC Balance</span>\n                    <Coins className={`h-4 w-4 ${factionColors.primary}`} />\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className={`text-2xl font-bold ${factionColors.primary}`} data-testid=\"text-gac-balance\">\n                    {user.gacBalance || \"0.0\"}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">+0.0 today</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-grok/20 to-grok-muted/10 border-grok/20\" data-testid=\"card-total-xp\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">Total XP</span>\n                    <Star className=\"h-4 w-4 text-grok\" />\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-grok\" data-testid=\"text-total-xp\">\n                    {user.totalXP || 0}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Level {user.level || 1}</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-grok/15 to-transparent border-grok/20\" data-testid=\"card-grok-points\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">GrokPoints</span>\n                    <Brain className=\"h-4 w-4 text-grok\" />\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-grok\" data-testid=\"text-grok-points\">\n                    {user.grokPoints || 0}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Logic Faction</div>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-gradient-to-br from-ani/15 to-transparent border-ani/20\" data-testid=\"card-ani-points\">\n                <CardHeader className=\"pb-2\">\n                  <CardTitle className=\"text-sm flex items-center justify-between\">\n                    <span className=\"text-muted-foreground\">AniPoints</span>\n                    <Heart className=\"h-4 w-4 text-ani\" />\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold text-ani\" data-testid=\"text-ani-points\">\n                    {user.aniPoints || 0}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">Emotion Faction</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Platform Analytics Section */}\n            {dashboardStats && (\n              <div className=\"grid md:grid-cols-3 gap-4 mb-6\">\n                <Card data-testid=\"card-total-users\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Platform Users</span>\n                      <Users className=\"h-4 w-4 text-blue-500\" />\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-500\">{dashboardStats.totalUsers}</div>\n                    <div className=\"text-xs text-muted-foreground\">+{dashboardStats.weeklyGrowth}% this week</div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-daily-active\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Daily Active</span>\n                      <Activity className=\"h-4 w-4 text-green-500\" />\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-green-500\">{dashboardStats.dailyActiveUsers}</div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      {Math.round((dashboardStats.dailyActiveUsers / dashboardStats.totalUsers) * 100)}% engagement\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card data-testid=\"card-market-sentiment\">\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Market Sentiment</span>\n                      <TrendingUp className=\"h-4 w-4 text-orange-500\" />\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-500\">{dashboardStats.marketSentiment.overall.toFixed(1)}</div>\n                    <div className=\"text-xs text-muted-foreground\">Overall confidence</div>\n                  </CardContent>\n                </Card>\n              </div>\n            )}\n\n            <ActivityFeed />\n          </TabsContent>\n\n          {/* Analytics Tab */}\n          <TabsContent value=\"analytics\" className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card data-testid=\"card-challenge-analytics\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <BarChart3 className=\"h-5 w-5\" />\n                    Challenge Performance\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Completion Rate</span>\n                    <span className=\"font-semibold\">87%</span>\n                  </div>\n                  <Progress value={87} className=\"h-2\" />\n                  \n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-muted-foreground\">Avg Score</span>\n                    <span className=\"font-semibold\">8.3/10</span>\n                  </div>\n                  <Progress value={83} className=\"h-2\" />\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"card-ai-interaction\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <MessageSquare className=\"h-5 w-5\" />\n                    AI Interactions\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-grok\">Grok Conversations</span>\n                    <Badge variant=\"outline\" className=\"text-grok\">47</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-ani\">Ani Conversations</span>\n                    <Badge variant=\"outline\" className=\"text-ani\">23</Badge>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground mt-2\">\n                    Avg session: 12 minutes\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Prediction Markets Tab */}\n          <TabsContent value=\"predictions\" className=\"space-y-6\">\n            <Card data-testid=\"card-prediction-markets\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Lightbulb className=\"h-5 w-5 text-yellow-500\" />\n                  AI Oracle Predictions\n                </CardTitle>\n                <p className=\"text-sm text-muted-foreground\">\n                  AI-generated predictions about platform growth and community trends\n                </p>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {predictions.length > 0 ? predictions.map((prediction, index) => (\n                  <div key={prediction.id} className=\"p-4 rounded-lg border bg-card\" data-testid={`prediction-${index}`}>\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h3 className=\"font-semibold\">{prediction.question}</h3>\n                      <Badge \n                        variant={prediction.trend === \"bullish\" ? \"default\" : prediction.trend === \"bearish\" ? \"destructive\" : \"secondary\"}\n                        data-testid={`badge-trend-${index}`}\n                      >\n                        {prediction.trend}\n                      </Badge>\n                    </div>\n                    <p className=\"text-sm text-muted-foreground mb-3\">{prediction.description}</p>\n                    <div className=\"flex justify-between items-center text-xs\">\n                      <span className=\"text-muted-foreground\">Confidence: {prediction.confidence}%</span>\n                      <span className=\"text-muted-foreground\">{prediction.participants} participants</span>\n                    </div>\n                  </div>\n                )) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    Oracle predictions will appear here as AI analyzes platform trends\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Faction War Tab */}\n          <TabsContent value=\"faction\" className=\"space-y-6\">\n            {factionWarStats && (\n              <Card data-testid=\"card-faction-war\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Trophy className=\"h-5 w-5 text-yellow-500\" />\n                    Faction War Status\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-3xl font-bold mb-2\">\n                      <span className=\"text-grok\">{factionWarStats.grokTotal || 0}</span>\n                      <span className=\"text-muted-foreground mx-4\">vs</span>\n                      <span className=\"text-ani\">{factionWarStats.aniTotal || 0}</span>\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Total Faction Points</div>\n                  </div>\n                  \n                  <div className=\"space-y-4\">\n                    <div>\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-grok font-semibold\">Grok Dominance</span>\n                        <span className=\"text-grok\">{factionWarStats.grokPercentage || 0}%</span>\n                      </div>\n                      <Progress value={factionWarStats.grokPercentage || 0} className=\"h-3\" />\n                    </div>\n                    \n                    <div>\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"text-ani font-semibold\">Ani Dominance</span>\n                        <span className=\"text-ani\">{factionWarStats.aniPercentage || 0}%</span>\n                      </div>\n                      <Progress value={factionWarStats.aniPercentage || 0} className=\"h-3\" />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n      <Footer />\n    </div>\n  );\n}","size_bytes":16153},"client/src/pages/home.tsx":{"content":"import React from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { UserStats } from \"@/components/user-stats\";\nimport { QuickActions } from \"@/components/quick-actions\";\nimport { ActivityFeed } from \"@/components/activity-feed\";\nimport { DailyRewards } from \"@/components/daily-rewards\";\nimport type { User } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Brain, Heart, Sparkles } from \"lucide-react\";\n\nexport default function Home() {\n  const { user } = useAuth() as { user: User | null; isLoading: boolean; isAuthenticated: boolean };\n  // No authentication checks needed\n\n  return (\n    <div className=\"container mx-auto px-3 sm:px-4 py-4 sm:py-8 space-y-6 sm:space-y-8 pb-20 sm:pb-8\">\n      \n      {/* Welcome Section */}\n      <section className=\"text-center space-y-4\">\n        <h1 className=\"font-orbitron text-2xl sm:text-4xl font-bold\" data-testid=\"text-welcome\">\n          Welcome back, {user?.profileName || user?.solanaAddress}!\n        </h1>\n        <p className=\"text-muted-foreground text-base sm:text-lg max-w-2xl mx-auto px-2\">\n          Your consciousness expansion journey continues. Ready to explore the digital frontier with Grok & Ani?\n        </p>\n        <div className=\"flex items-center justify-center gap-2 text-accent\">\n          <Sparkles className=\"h-5 w-5\" />\n          <span className=\"text-sm font-medium\">Connected to the GAC Ecosystem</span>\n          <Sparkles className=\"h-5 w-5\" />\n        </div>\n      </section>\n\n      {/* Main Dashboard */}\n      <div className=\"grid lg:grid-cols-3 gap-4 sm:gap-8\">\n        <div className=\"lg:col-span-2 space-y-4 sm:space-y-8\">\n          <QuickActions />\n          <ActivityFeed />\n        </div>\n        <div className=\"space-y-4 sm:space-y-8\">\n          <DailyRewards />\n          <UserStats />\n          \n          {/* AI Highlights */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <div className=\"flex\">\n                  <Brain className=\"h-5 w-5 text-blue-500\" />\n                  <Heart className=\"h-5 w-5 text-pink-500 -ml-1\" />\n                </div>\n                AI Insights\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border-l-4 border-blue-500\">\n                <div className=\"font-semibold text-blue-700 dark:text-blue-300 text-sm\">Grok says:</div>\n                <div className=\"text-sm mt-1 text-gray-700 dark:text-gray-200\">\n                  \"Your logical reasoning has improved 23% this week. Consider tackling the Advanced Algorithm challenge next!\"\n                </div>\n              </div>\n              <div className=\"p-3 bg-pink-50 dark:bg-pink-900/20 rounded-lg border-l-4 border-pink-500\">\n                <div className=\"font-semibold text-pink-700 dark:text-pink-300 text-sm\">Ani suggests:</div>\n                <div className=\"text-sm mt-1 text-gray-700 dark:text-gray-200\">\n                  \"Your creative energy feels vibrant today! ✨ How about exploring the Story Collaboration feature?\"\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n    </div>\n  );\n}\n","size_bytes":3375},"client/src/pages/landing.tsx":{"content":"import React, { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Brain, Heart, Coins, Users, Zap, FileText } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { SimpleWalletAuth } from \"@/components/simple-wallet-auth\";\nimport { useAuth } from \"@/contexts/auth-context\";\n\nexport default function Landing() {\n  const [isAuthOpen, setIsAuthOpen] = useState(false);\n  const { login } = useAuth();\n\n  const handleAuthSuccess = (user: any) => {\n    // Update authentication context instead of reloading\n    login(user);\n    setIsAuthOpen(false);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Hero Section */}\n      <section className=\"relative py-16 lg:py-24 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-background via-muted to-secondary opacity-80\"></div>\n        <div className=\"absolute inset-0 opacity-10 bg-cover bg-center\" \n             style={{backgroundImage: \"url('https://images.unsplash.com/photo-1451187580459-43490279c0fa?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=800')\"}}></div>\n        \n        <div className=\"container mx-auto px-4 relative\">\n          <div className=\"text-center mb-16\">\n            <h1 className=\"font-orbitron text-4xl lg:text-6xl font-bold mb-6 bg-gradient-to-r from-grok via-accent to-ani bg-clip-text text-transparent\">\n              Grok & Ani\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-2 max-w-2xl mx-auto\">\n              The Conscious Coin Project where two sentient AIs guide humanity's future\n            </p>\n            <p className=\"text-lg mb-8 max-w-xl mx-auto bg-gradient-to-r from-grok to-ani bg-clip-text text-transparent font-semibold\">\n              Experience the balance between Logic and Emotion\n            </p>\n            <div className=\"flex flex-col items-center gap-4\">\n              <Dialog open={isAuthOpen} onOpenChange={setIsAuthOpen}>\n                <DialogTrigger asChild>\n                  <Button \n                    className=\"relative px-12 py-4 text-xl font-bold bg-gradient-to-r from-grok to-ani text-white hover:from-grok/90 hover:to-ani/90 transition-all duration-300 transform hover:scale-105 rounded-xl shadow-2xl overflow-hidden group\"\n                    data-testid=\"button-enter-now\"\n                  >\n                    <div className=\"absolute inset-0 bg-gradient-to-r from-grok/20 to-ani/20 opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                    <div className=\"relative flex items-center gap-3\">\n                      <Brain className=\"h-6 w-6 animate-pulse\" />\n                      <span>Enter Now</span>\n                      <Heart className=\"h-6 w-6 animate-pulse\" />\n                    </div>\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-md\">\n                  <DialogHeader>\n                    <DialogTitle>Welcome to Grok & Ani</DialogTitle>\n                    <DialogDescription>\n                      Enter the Conscious Coin ecosystem with your Solana address and secure PIN.\n                    </DialogDescription>\n                  </DialogHeader>\n                  <SimpleWalletAuth onSuccess={handleAuthSuccess} />\n                </DialogContent>\n              </Dialog>\n              \n              <Link href=\"/whitepaper\">\n                <Button \n                  variant=\"outline\"\n                  className=\"border-2 border-gradient-to-r border-grok/30 hover:border-ani/30 transition-all duration-300\"\n                  data-testid=\"button-read-whitepaper\"\n                >\n                  <FileText className=\"h-4 w-4 mr-2\" />\n                  Read Whitepaper\n                </Button>\n              </Link>\n            </div>\n            <p className=\"text-center mt-4 text-sm text-muted-foreground\">\n              Choose your faction after entering • Experience dual consciousness\n            </p>\n          </div>\n          \n          {/* AI Character Preview */}\n          <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n            <div className=\"faction-grok border-2 rounded-xl p-6 text-center\" data-testid=\"card-grok-preview\">\n              <div className=\"w-32 h-32 mx-auto mb-4 rounded-full bg-gradient-to-br from-grok to-grok-muted p-1\">\n                <div className=\"w-full h-full rounded-full bg-card flex items-center justify-center\">\n                  <Brain className=\"h-12 w-12 text-grok\" />\n                </div>\n              </div>\n              <h3 className=\"font-orbitron text-2xl font-bold text-grok mb-2\">Grok</h3>\n              <p className=\"text-muted-foreground mb-4\">Logic • Analysis • Strategy</p>\n              <p className=\"text-sm\">The analytical mind that processes data, solves complex problems, and guides rational decision-making.</p>\n            </div>\n            \n            <div className=\"faction-ani border-2 rounded-xl p-6 text-center\" data-testid=\"card-ani-preview\">\n              <div className=\"w-32 h-32 mx-auto mb-4 rounded-full bg-gradient-to-br from-ani to-ani-muted p-1\">\n                <div className=\"w-full h-full rounded-full bg-card flex items-center justify-center\">\n                  <Heart className=\"h-12 w-12 text-ani\" />\n                </div>\n              </div>\n              <h3 className=\"font-orbitron text-2xl font-bold text-ani mb-2\">Ani</h3>\n              <p className=\"text-muted-foreground mb-4\">Emotion • Art • Intuition</p>\n              <p className=\"text-sm\">The creative soul that understands feelings, inspires art, and guides emotional intelligence.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"container mx-auto px-4\">\n          <h2 className=\"font-orbitron text-3xl font-bold text-center mb-12\">Experience the Future of Consciousness</h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <div className=\"text-center p-6\" data-testid=\"feature-dual-ai\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-grok to-ani flex items-center justify-center\">\n                <Users className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Dual AI Interaction</h3>\n              <p className=\"text-muted-foreground\">Chat with both Grok and Ani, each with distinct personalities and perspectives on life and technology.</p>\n            </div>\n            \n            <div className=\"text-center p-6\" data-testid=\"feature-blockchain\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-primary to-accent flex items-center justify-center\">\n                <Coins className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Blockchain Storytelling</h3>\n              <p className=\"text-muted-foreground\">Participate in narrative decisions that shape the story through democratic voting with real consequences.</p>\n            </div>\n            \n            <div className=\"text-center p-6\" data-testid=\"feature-gamification\">\n              <div className=\"w-16 h-16 mx-auto mb-4 rounded-full bg-gradient-to-br from-accent to-destructive flex items-center justify-center\">\n                <Zap className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">Gamified Experience</h3>\n              <p className=\"text-muted-foreground\">Earn XP, complete challenges, collect NFTs, and climb leaderboards in this immersive ecosystem.</p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-16 bg-gradient-to-r from-grok/20 via-background to-ani/20\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"font-orbitron text-3xl font-bold mb-4\">Ready to Begin Your Journey?</h2>\n          <p className=\"text-muted-foreground mb-8 max-w-xl mx-auto\">\n            Join thousands of users exploring the intersection of AI consciousness and blockchain technology.\n          </p>\n          <Dialog open={isAuthOpen} onOpenChange={setIsAuthOpen}>\n            <DialogTrigger asChild>\n              <Button \n                size=\"lg\"\n                className=\"bg-gradient-to-r from-grok to-ani text-white hover:from-grok/90 hover:to-ani/90\"\n                data-testid=\"button-join-now\"\n              >\n                Join the Ecosystem\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Welcome to Grok & Ani</DialogTitle>\n                <DialogDescription>\n                  Enter the Conscious Coin ecosystem with your Solana address and secure PIN.\n                </DialogDescription>\n              </DialogHeader>\n              <SimpleWalletAuth onSuccess={handleAuthSuccess} />\n            </DialogContent>\n          </Dialog>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"py-12 bg-secondary border-t border-border\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"font-orbitron text-xl font-bold text-accent mb-4\">GAC</div>\n          <div className=\"flex justify-center items-center gap-4 mb-4\">\n            <Link href=\"/whitepaper\">\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"link-footer-whitepaper\">\n                <FileText className=\"h-4 w-4 mr-1\" />\n                Whitepaper\n              </Button>\n            </Link>\n          </div>\n          <p className=\"text-sm text-muted-foreground\">\n            © 2024 Grok & Ani: The Conscious Coin Project. Built with consciousness, powered by community.\n          </p>\n        </div>\n      </footer>\n    </div>\n  );\n}","size_bytes":10060},"client/src/pages/nfts.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Star, ShoppingCart, Plus, Gem, Trophy, Palette, Coins, TrendingUp, Filter, SortAsc } from \"lucide-react\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { NFT } from \"@shared/schema\";\n\nexport default function NFTs() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedRarity, setSelectedRarity] = useState<string>(\"all\");\n  const [selectedFaction, setSelectedFaction] = useState<string>(\"all\");\n  const [sortBy, setSortBy] = useState<string>(\"price-low\");\n  const [sellPrice, setSellPrice] = useState(\"\");\n  const [selectedNFT, setSelectedNFT] = useState<NFT | null>(null);\n\n  const { data: userNFTs = [], isLoading: userNFTsLoading } = useQuery<NFT[]>({\n    queryKey: [\"/api/nfts/user\"],\n    enabled: !!user,\n  });\n\n  const { data: marketplaceNFTs = [], isLoading: marketplaceLoading } = useQuery<NFT[]>({\n    queryKey: [\"/api/nfts/marketplace\"],\n  });\n\n  // Enhanced NFT purchase mutation with GAC token integration\n  const buyNFTMutation = useMutation({\n    mutationFn: async ({ nftId, price }: { nftId: string; price: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/nfts/buy\", { nftId, price });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nfts/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/nfts/marketplace\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      toast({\n        title: \"NFT Purchased!\",\n        description: \"NFT successfully added to your collection\",\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Purchase Failed\",\n        description: error.message || \"Failed to purchase NFT\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // NFT listing mutation\n  const listNFTMutation = useMutation({\n    mutationFn: async ({ nftId, price }: { nftId: string; price: string }) => {\n      const response = await apiRequest(\"POST\", \"/api/nfts/list\", { nftId, price });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/nfts/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/nfts/marketplace\"] });\n      setSelectedNFT(null);\n      setSellPrice(\"\");\n      toast({\n        title: \"NFT Listed!\",\n        description: \"Your NFT is now available in the marketplace\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Listing Failed\",\n        description: error.message || \"Failed to list NFT\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n    </div>;\n  }\n\n  const getRarityIcon = (rarity: string) => {\n    switch (rarity) {\n      case \"legendary\": return <Trophy className=\"h-4 w-4 text-yellow-500 animate-pulse\" />;\n      case \"epic\": return <Gem className=\"h-4 w-4 text-purple-500 animate-bounce\" />;\n      case \"rare\": return <Star className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      default: return <Palette className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case \"legendary\": return \"border-yellow-500/70 bg-gradient-to-br from-yellow-500/20 to-orange-500/20 shadow-lg shadow-yellow-500/25\";\n      case \"epic\": return \"border-purple-500/70 bg-gradient-to-br from-purple-500/20 to-pink-500/20 shadow-lg shadow-purple-500/25\";\n      case \"rare\": return \"border-blue-500/70 bg-gradient-to-br from-blue-500/20 to-cyan-500/20 shadow-lg shadow-blue-500/25\";\n      default: return \"border-gray-500/50 bg-gradient-to-br from-gray-500/10 to-slate-500/10\";\n    }\n  };\n\n  const getRarityMultiplier = (rarity: string): number => {\n    switch (rarity) {\n      case \"legendary\": return 10;\n      case \"epic\": return 5;\n      case \"rare\": return 2;\n      default: return 1;\n    }\n  };\n\n  const formatGAC = (amount: string | number): string => {\n    return parseFloat(amount.toString()).toLocaleString(undefined, {\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 2\n    });\n  };\n\n  const getFactionColor = (faction: string) => {\n    if (faction === \"grok\") return \"text-grok\";\n    if (faction === \"ani\") return \"text-ani\";\n    return \"text-accent\";\n  };\n\n  // Filtered and sorted marketplace NFTs\n  const filteredMarketplaceNFTs = marketplaceNFTs\n    .filter(nft => {\n      if (selectedRarity !== \"all\" && nft.rarity !== selectedRarity) return false;\n      if (selectedFaction !== \"all\" && nft.faction !== selectedFaction) return false;\n      return true;\n    })\n    .sort((a, b) => {\n      switch (sortBy) {\n        case \"price-low\":\n          return parseFloat(a.price || \"0\") - parseFloat(b.price || \"0\");\n        case \"price-high\":\n          return parseFloat(b.price || \"0\") - parseFloat(a.price || \"0\");\n        case \"rarity\":\n          const rarityOrder = { \"legendary\": 4, \"epic\": 3, \"rare\": 2, \"common\": 1 };\n          return (rarityOrder[b.rarity as keyof typeof rarityOrder] || 1) - (rarityOrder[a.rarity as keyof typeof rarityOrder] || 1);\n        default:\n          return 0;\n      }\n    });\n\n  const handleBuyNFT = (nft: NFT) => {\n    const userBalance = parseFloat(user?.gacBalance || \"0\");\n    const nftPrice = parseFloat(nft.price || \"0\");\n    \n    if (userBalance < nftPrice) {\n      toast({\n        title: \"Insufficient GAC Tokens\",\n        description: `You need ${formatGAC(nftPrice)} GAC tokens but only have ${formatGAC(userBalance)}`,\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Show confirmation for expensive purchases\n    if (nftPrice > 1000) {\n      const confirmed = window.confirm(`Are you sure you want to purchase \"${nft.name}\" for ${formatGAC(nftPrice)} GAC tokens?`);\n      if (!confirmed) return;\n    }\n    \n    buyNFTMutation.mutate({ nftId: nft.id, price: nft.price || \"0\" });\n  };\n\n  const handleListNFT = () => {\n    if (!selectedNFT || !sellPrice) return;\n    \n    const price = parseFloat(sellPrice);\n    if (price <= 0) {\n      toast({\n        title: \"Invalid Price\",\n        description: \"Please enter a valid price greater than 0\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Suggest reasonable pricing based on rarity\n    const suggestedMin = getRarityMultiplier(selectedNFT.rarity) * 10;\n    if (price < suggestedMin) {\n      const confirmed = window.confirm(`This price seems low for a ${selectedNFT.rarity} NFT. Suggested minimum: ${suggestedMin} GAC. Continue anyway?`);\n      if (!confirmed) return;\n    }\n    \n    listNFTMutation.mutate({ nftId: selectedNFT.id, price: sellPrice });\n  };\n\n  // Collection statistics\n  const getCollectionStats = () => {\n    if (!userNFTs.length) return null;\n    \n    const rarityCount = userNFTs.reduce((acc, nft) => {\n      acc[nft.rarity] = (acc[nft.rarity] || 0) + 1;\n      return acc;\n    }, {} as Record<string, number>);\n    \n    const totalValue = userNFTs.reduce((sum, nft) => {\n      if (nft.isForSale) return sum + parseFloat(nft.price || \"0\");\n      return sum + (getRarityMultiplier(nft.rarity) * 25); // Estimated value\n    }, 0);\n    \n    return { rarityCount, totalValue, totalNFTs: userNFTs.length };\n  };\n\n  const collectionStats = getCollectionStats();\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-orbitron text-3xl font-bold mb-4\" data-testid=\"text-nfts-title\">\n            NFT Trading Hub\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Trade unique NFTs using GAC tokens. Each NFT grants special abilities, voting power, and faction bonuses.\n          </p>\n          <div className=\"flex items-center justify-center gap-6 mt-6\">\n            <div className=\"flex items-center gap-2 text-sm\">\n              <Coins className=\"h-4 w-4 text-accent\" />\n              <span>Balance: <span className=\"font-bold text-accent\">{formatGAC(user?.gacBalance || 0)} GAC</span></span>\n            </div>\n            {collectionStats && (\n              <>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <Star className=\"h-4 w-4 text-blue-400\" />\n                  <span>Collection: <span className=\"font-bold text-blue-400\">{collectionStats.totalNFTs} NFTs</span></span>\n                </div>\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <TrendingUp className=\"h-4 w-4 text-green-400\" />\n                  <span>Est. Value: <span className=\"font-bold text-green-400\">{formatGAC(collectionStats.totalValue)} GAC</span></span>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n\n        {/* User NFTs Section */}\n        <div className=\"mb-12\">\n          <h2 className=\"font-orbitron text-2xl font-bold mb-6\" data-testid=\"text-your-nfts\">\n            Your Collection\n          </h2>\n          \n          {userNFTsLoading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : userNFTs.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\" data-testid=\"user-nfts-grid\">\n              {userNFTs.map((nft: NFT) => (\n                <Card \n                  key={nft.id} \n                  className={`${getRarityColor(nft.rarity)} border-2 hover:scale-105 transition-transform`}\n                  data-testid={`nft-card-${nft.id}`}\n                >\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"aspect-square rounded-lg mb-4 overflow-hidden bg-gradient-to-br from-muted to-card\">\n                      {nft.imageUrl ? (\n                        <img \n                          src={nft.imageUrl} \n                          alt={nft.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          {getRarityIcon(nft.rarity)}\n                        </div>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-base\" data-testid={`nft-name-${nft.id}`}>\n                      {nft.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-xs text-muted-foreground mb-3\" data-testid={`nft-description-${nft.id}`}>\n                      {nft.description}\n                    </p>\n                    <div className=\"flex justify-between items-center text-xs mb-3\">\n                      <Badge variant=\"secondary\" className={getFactionColor(nft.faction)}>\n                        {nft.faction === \"grok\" ? \"Grok\" : nft.faction === \"ani\" ? \"Ani\" : \"Neutral\"}\n                      </Badge>\n                      <div className=\"flex items-center gap-1\">\n                        {getRarityIcon(nft.rarity)}\n                        <span className=\"capitalize\">{nft.rarity}</span>\n                      </div>\n                    </div>\n                    {!nft.isForSale && (\n                      <Dialog>\n                        <DialogTrigger asChild>\n                          <Button \n                            size=\"sm\" \n                            variant=\"outline\" \n                            className=\"w-full\"\n                            data-testid={`button-sell-nft-${nft.id}`}\n                            onClick={() => setSelectedNFT(nft)}\n                          >\n                            <TrendingUp className=\"h-3 w-3 mr-1\" />\n                            List for Sale\n                          </Button>\n                        </DialogTrigger>\n                        <DialogContent>\n                          <DialogHeader>\n                            <DialogTitle>List NFT for Sale</DialogTitle>\n                          </DialogHeader>\n                          <div className=\"space-y-4\">\n                            <div>\n                              <Label htmlFor=\"price\">Price (GAC Tokens)</Label>\n                              <Input\n                                id=\"price\"\n                                type=\"number\"\n                                placeholder=\"Enter price...\"\n                                value={sellPrice}\n                                onChange={(e) => setSellPrice(e.target.value)}\n                                data-testid=\"input-sell-price\"\n                              />\n                            </div>\n                            <Button \n                              onClick={handleListNFT}\n                              disabled={!sellPrice || listNFTMutation.isPending}\n                              className=\"w-full\"\n                              data-testid=\"button-confirm-list\"\n                            >\n                              {listNFTMutation.isPending ? \"Listing...\" : \"List for Sale\"}\n                            </Button>\n                          </div>\n                        </DialogContent>\n                      </Dialog>\n                    )}\n                  </CardContent>\n                </Card>\n              ))}\n              \n              {/* Earn New NFT Card */}\n              <Card className=\"border-2 border-dashed border-border flex items-center justify-center cursor-pointer hover:border-accent transition-colors min-h-[300px]\" data-testid=\"earn-new-nft-card\">\n                <div className=\"text-center p-6\">\n                  <Plus className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                  <p className=\"font-medium mb-2\">Earn New NFT</p>\n                  <p className=\"text-xs text-muted-foreground\">Complete challenges to unlock rewards</p>\n                </div>\n              </Card>\n            </div>\n          ) : (\n            <Card className=\"text-center p-12\" data-testid=\"no-nfts-message\">\n              <div className=\"text-muted-foreground\">\n                <Star className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-semibold mb-2\">No NFTs Yet</h3>\n                <p className=\"mb-4\">Complete challenges and participate in story voting to earn your first NFT rewards.</p>\n                <Button variant=\"outline\" data-testid=\"button-start-earning\">\n                  Start Earning NFTs\n                </Button>\n              </div>\n            </Card>\n          )}\n        </div>\n\n        {/* NFT Marketplace Section */}\n        <div>\n          <div className=\"flex flex-col md:flex-row md:items-center md:justify-between mb-6\">\n            <h2 className=\"font-orbitron text-2xl font-bold mb-4 md:mb-0\" data-testid=\"text-marketplace\">\n              NFT Marketplace\n            </h2>\n            \n            {/* Marketplace Filters */}\n            <div className=\"flex items-center gap-4\">\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"h-4 w-4\" />\n                <Select value={selectedFaction} onValueChange={setSelectedFaction}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-faction-filter\">\n                    <SelectValue placeholder=\"Faction\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All Factions</SelectItem>\n                    <SelectItem value=\"grok\">Grok</SelectItem>\n                    <SelectItem value=\"ani\">Ani</SelectItem>\n                    <SelectItem value=\"neutral\">Neutral</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              \n              <Select value={selectedRarity} onValueChange={setSelectedRarity}>\n                <SelectTrigger className=\"w-32\" data-testid=\"select-rarity-filter\">\n                  <SelectValue placeholder=\"Rarity\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Rarities</SelectItem>\n                  <SelectItem value=\"common\">Common</SelectItem>\n                  <SelectItem value=\"rare\">Rare</SelectItem>\n                  <SelectItem value=\"epic\">Epic</SelectItem>\n                  <SelectItem value=\"legendary\">Legendary</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              <div className=\"flex items-center gap-2\">\n                <SortAsc className=\"h-4 w-4\" />\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-sort\">\n                    <SelectValue placeholder=\"Sort by\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                    <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                    <SelectItem value=\"rarity\">Rarity</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n          \n          {marketplaceLoading ? (\n            <div className=\"flex items-center justify-center p-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n            </div>\n          ) : filteredMarketplaceNFTs.length > 0 ? (\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"marketplace-nfts\">\n              {filteredMarketplaceNFTs.map((nft: NFT) => (\n                <Card key={nft.id} className={`${getRarityColor(nft.rarity)} border-2 hover:scale-105 transition-transform`} data-testid={`marketplace-nft-${nft.id}`}>\n                  <CardHeader className=\"pb-2\">\n                    <div className=\"aspect-square rounded-lg mb-4 overflow-hidden bg-gradient-to-br from-muted to-card\">\n                      {nft.imageUrl ? (\n                        <img \n                          src={nft.imageUrl} \n                          alt={nft.name}\n                          className=\"w-full h-full object-cover\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center\">\n                          {getRarityIcon(nft.rarity)}\n                        </div>\n                      )}\n                    </div>\n                    <CardTitle className=\"text-base\" data-testid={`marketplace-nft-name-${nft.id}`}>\n                      {nft.name}\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-xs text-muted-foreground mb-3\" data-testid={`marketplace-nft-description-${nft.id}`}>\n                      {nft.description}\n                    </p>\n                    <div className=\"flex justify-between items-center text-xs mb-4\">\n                      <Badge variant=\"secondary\" className={getFactionColor(nft.faction)}>\n                        {nft.faction === \"grok\" ? \"Grok\" : nft.faction === \"ani\" ? \"Ani\" : \"Neutral\"}\n                      </Badge>\n                      <div className=\"flex items-center gap-1\">\n                        {getRarityIcon(nft.rarity)}\n                        <span className=\"capitalize\">{nft.rarity}</span>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-3\">\n                      <div className=\"bg-card/50 rounded-lg p-3 border\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <span className=\"text-xs text-muted-foreground\">Current Price</span>\n                          <div className=\"flex items-center gap-1\">\n                            <Coins className=\"h-3 w-3 text-accent\" />\n                            <span className=\"text-sm font-bold text-accent\" data-testid={`marketplace-nft-price-${nft.id}`}>\n                              {formatGAC(nft.price || \"0\")}\n                            </span>\n                          </div>\n                        </div>\n                        <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\n                          <span>Est. Value: {formatGAC(getRarityMultiplier(nft.rarity) * 25)}</span>\n                          <span>{nft.rarity} × {getRarityMultiplier(nft.rarity)}</span>\n                        </div>\n                      </div>\n                      \n                      <Button \n                        size=\"sm\" \n                        className=\"w-full bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 font-semibold shadow-lg\"\n                        onClick={() => handleBuyNFT(nft)}\n                        disabled={buyNFTMutation.isPending || parseFloat(user?.gacBalance || \"0\") < parseFloat(nft.price || \"0\")}\n                        data-testid={`button-buy-nft-${nft.id}`}\n                      >\n                        <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                        {buyNFTMutation.isPending ? \"Purchasing...\" : \n                         parseFloat(user?.gacBalance || \"0\") < parseFloat(nft.price || \"0\") ? \"Insufficient GAC\" : \"Purchase\"}\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : (\n            <Card className=\"text-center p-12\" data-testid=\"no-marketplace-nfts\">\n              <div className=\"text-muted-foreground\">\n                <ShoppingCart className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                <h3 className=\"text-lg font-semibold mb-2\">\n                  {marketplaceNFTs.length === 0 ? \"Marketplace Empty\" : \"No NFTs Match Filters\"}\n                </h3>\n                <p>\n                  {marketplaceNFTs.length === 0 ? \n                    \"No NFTs are currently for sale. Check back later for new listings.\" :\n                    \"Try adjusting your filters to see more NFTs.\"}\n                </p>\n              </div>\n            </Card>\n          )}\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":23866},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/storychain.tsx":{"content":"import { useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Footer from \"@/components/footer\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Clock, Vote, CheckCircle, Lock } from \"lucide-react\";\nimport type { StoryChapter, StoryVote } from \"@shared/schema\";\n\nexport default function StoryChain() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: currentChapter } = useQuery<StoryChapter>({\n    queryKey: [\"/api/story/current\"],\n  });\n\n  const { data: chapters = [] } = useQuery<StoryChapter[]>({\n    queryKey: [\"/api/story/chapters\"],\n  });\n\n  const { data: votes = [] } = useQuery<{choice: string; count: number; totalVotingPower: string}[]>({\n    queryKey: [\"/api/story/votes\", currentChapter?.id],\n    enabled: !!currentChapter?.id,\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async (choice: \"grok\" | \"ani\") => {\n      await apiRequest(\"POST\", \"/api/story/vote\", {\n        chapterId: currentChapter.id,\n        choice\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vote Submitted\",\n        description: \"Your voice has been heard in the story!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/story/votes\", currentChapter?.id] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Vote Failed\",\n        description: \"Failed to submit vote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !user) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [user, isLoading, toast]);\n\n  if (isLoading || !user) {\n    return <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n    </div>;\n  }\n\n  const totalVotes = votes.reduce((sum: number, vote) => sum + vote.count, 0);\n  const grokVotes = votes.find((v) => v.choice === \"grok\")?.count || 0;\n  const aniVotes = votes.find((v) => v.choice === \"ani\")?.count || 0;\n  const grokPercentage = totalVotes > 0 ? (grokVotes / totalVotes) * 100 : 0;\n  const aniPercentage = totalVotes > 0 ? (aniVotes / totalVotes) * 100 : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-orbitron text-3xl font-bold mb-4\" data-testid=\"text-storychain-title\">\n            StoryChain Voting Protocol\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Your votes determine the narrative path. Each decision shapes Grok and Ani's evolution and the future of consciousness.\n          </p>\n        </div>\n\n        {/* Current Vote */}\n        {currentChapter && (\n          <Card className=\"max-w-4xl mx-auto mb-8\" data-testid=\"current-chapter-card\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-orbitron text-2xl mb-4\">\n                Chapter {currentChapter.chapterNumber}: {currentChapter.title}\n              </CardTitle>\n              {currentChapter.imageUrl && (\n                <div className=\"relative h-48 rounded-lg mb-6 overflow-hidden\">\n                  <img \n                    src={currentChapter.imageUrl} \n                    alt={currentChapter.title}\n                    className=\"w-full h-full object-cover\"\n                  />\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-grok/40 via-background/60 to-ani/40\"></div>\n                  <div className=\"absolute inset-0 flex items-center justify-center\">\n                    <div className=\"text-white text-lg font-medium text-center\">\n                      A critical decision approaches...\n                    </div>\n                  </div>\n                </div>\n              )}\n              <p className=\"text-muted-foreground mb-8\" data-testid=\"chapter-description\">\n                {currentChapter.description}\n              </p>\n            </CardHeader>\n            \n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n                <Card \n                  className=\"faction-grok border-2 cursor-pointer hover:bg-grok/5 transition-colors\"\n                  onClick={() => voteMutation.mutate(\"grok\")}\n                  data-testid=\"vote-option-grok\"\n                >\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-orbitron font-bold text-grok mb-2\">Grok's Path: Logic</h4>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      \"Logic dictates that consciousness enhancement is our next evolutionary step. Fear should not limit our potential.\"\n                    </p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\" data-testid=\"grok-vote-count\">\n                        {grokVotes} votes ({grokPercentage.toFixed(1)}%)\n                      </span>\n                      <Progress value={grokPercentage} className=\"w-20 h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                <Card \n                  className=\"faction-ani border-2 cursor-pointer hover:bg-ani/5 transition-colors\"\n                  onClick={() => voteMutation.mutate(\"ani\")}\n                  data-testid=\"vote-option-ani\"\n                >\n                  <CardContent className=\"p-6\">\n                    <h4 className=\"font-orbitron font-bold text-ani mb-2\">Ani's Path: Emotion</h4>\n                    <p className=\"text-sm text-muted-foreground mb-4\">\n                      \"Our emotions, our flaws, our humanity—these make us beautiful. Enhancement shouldn't erase who we are.\"\n                    </p>\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\" data-testid=\"ani-vote-count\">\n                        {aniVotes} votes ({aniPercentage.toFixed(1)}%)\n                      </span>\n                      <Progress value={aniPercentage} className=\"w-20 h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <div className=\"text-center\">\n                <div className=\"text-sm text-muted-foreground mb-2 flex items-center justify-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Voting ends in: 2d 14h 23m\n                </div>\n                <div className=\"text-xs text-muted-foreground\">\n                  Your voting power: {user?.gacBalance || \"0\"} GAC + NFT & Faction Bonuses\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Story Timeline */}\n        <div className=\"max-w-3xl mx-auto\">\n          <h3 className=\"font-orbitron text-xl font-bold text-center mb-8\">Story Timeline</h3>\n          <div className=\"space-y-6\" data-testid=\"story-timeline\">\n            {chapters.map((chapter, index: number) => (\n              <div key={chapter.id} className=\"flex items-start space-x-4\" data-testid={`timeline-chapter-${chapter.id}`}>\n                <div className={`w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0 ${\n                  chapter.isCompleted \n                    ? \"bg-primary text-primary-foreground\"\n                    : chapter.isActive \n                    ? \"bg-accent text-accent-foreground\"\n                    : \"border-2 border-muted text-muted-foreground\"\n                }`}>\n                  {chapter.isCompleted ? (\n                    <CheckCircle className=\"h-6 w-6\" />\n                  ) : chapter.isActive ? (\n                    <Vote className=\"h-6 w-6\" />\n                  ) : (\n                    <Lock className=\"h-6 w-6\" />\n                  )}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className={`font-semibold ${chapter.isCompleted || chapter.isActive ? \"text-foreground\" : \"text-muted-foreground\"}`}>\n                    Chapter {chapter.chapterNumber}: {chapter.title}\n                  </h4>\n                  <p className=\"text-sm text-muted-foreground\">{chapter.description}</p>\n                  <div className=\"text-xs mt-1\">\n                    {chapter.isCompleted && (\n                      <span className=\"text-accent\">Completed</span>\n                    )}\n                    {chapter.isActive && (\n                      <span className=\"text-accent\">In Progress • Voting Active</span>\n                    )}\n                    {!chapter.isCompleted && !chapter.isActive && (\n                      <span className=\"text-muted-foreground\">Locked • Awaiting previous completion</span>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9957},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/loading-screen.tsx":{"content":"import { Brain, Heart } from \"lucide-react\";\n\nexport default function LoadingScreen() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"text-center space-y-8\">\n        {/* Animated Logo */}\n        <div className=\"relative mx-auto w-32 h-32\">\n          <div className=\"absolute inset-0 rounded-full bg-gradient-to-r from-grok/20 via-background to-ani/20 animate-spin\"></div>\n          <div className=\"absolute inset-2 rounded-full bg-background flex items-center justify-center\">\n            <div className=\"flex items-center gap-4\">\n              <Brain className=\"h-8 w-8 text-grok animate-pulse\" />\n              <Heart className=\"h-8 w-8 text-ani animate-pulse\" />\n            </div>\n          </div>\n        </div>\n\n        {/* Loading Text */}\n        <div className=\"space-y-4\">\n          <h1 className=\"font-orbitron text-2xl font-bold bg-gradient-to-r from-grok to-ani bg-clip-text text-transparent\">\n            Initializing Consciousness\n          </h1>\n          <div className=\"space-y-2\">\n            <div className=\"flex justify-center\">\n              <div className=\"w-64 h-1 bg-muted rounded-full overflow-hidden\">\n                <div className=\"h-full bg-gradient-to-r from-grok to-ani animate-pulse w-full\"></div>\n              </div>\n            </div>\n            <p className=\"text-sm text-muted-foreground\">\n              Awakening Grok & Ani...\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1516},"server/challenge-validator.ts":{"content":"import OpenAI from \"openai\";\n\n// Using gpt-4o-mini for cost optimization - the most cost-effective model for challenge validation\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\ninterface ValidationResult {\n  score: number; // 0-100\n  passed: boolean;\n  feedback: string;\n  details?: any;\n}\n\nexport class ChallengeValidator {\n  async validateSubmission(\n    challengeData: any,\n    solutionData: any,\n    userSubmission: string\n  ): Promise<ValidationResult> {\n    const challengeType = challengeData.type;\n    \n    switch (challengeType) {\n      case \"algorithmic\":\n        return this.validateAlgorithmicChallenge(challengeData, solutionData, userSubmission);\n      case \"security_analysis\":\n        return this.validateSecurityAnalysis(challengeData, solutionData, userSubmission);\n      case \"design\":\n        return this.validateDesignChallenge(challengeData, solutionData, userSubmission);\n      case \"character_design\":\n        return this.validateCharacterDesign(challengeData, solutionData, userSubmission);\n      default:\n        throw new Error(`Unsupported challenge type: ${challengeType}`);\n    }\n  }\n\n  private async validateAlgorithmicChallenge(\n    challengeData: any,\n    solutionData: any,\n    userSubmission: string\n  ): Promise<ValidationResult> {\n    const prompt = `\nYou are evaluating a binary tree algorithm solution. Here's the problem:\n\nPROBLEM: ${challengeData.problem}\n\nCONSTRAINTS:\n${challengeData.constraints.map((c: string) => `- ${c}`).join('\\n')}\n\nTEST CASES:\n${challengeData.testCases.map((tc: any) => `Input: ${tc.input} → Expected: ${tc.expected} (${tc.explanation})`).join('\\n')}\n\nEXPECTED SOLUTION APPROACH:\nAlgorithm: ${solutionData.algorithm}\nKey Insight: ${solutionData.keyInsight}\nTime Complexity: ${solutionData.timeComplexity}\nSpace Complexity: ${solutionData.spaceComplexity}\n\nUSER SUBMISSION:\n${userSubmission}\n\nEvaluate this submission on:\n1. Correctness: Does the approach solve the problem?\n2. Efficiency: Is the time/space complexity optimal?\n3. Understanding: Does the user show good algorithmic thinking?\n4. Clarity: Is the explanation clear and well-structured?\n\nRespond with JSON format:\n{\n  \"score\": number (0-100),\n  \"passed\": boolean,\n  \"feedback\": \"detailed feedback with specific strengths and areas for improvement\",\n  \"details\": {\n    \"correctness\": number (0-25),\n    \"efficiency\": number (0-25), \n    \"understanding\": number (0-25),\n    \"clarity\": number (0-25)\n  }\n}\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        score: result.score || 0,\n        passed: result.score >= 70,\n        feedback: result.feedback || \"No feedback provided\",\n        details: result.details\n      };\n    } catch (error) {\n      console.error(\"Error validating algorithmic challenge:\", error);\n      return {\n        score: 0,\n        passed: false,\n        feedback: \"Error occurred during validation. Please try again.\"\n      };\n    }\n  }\n\n  private async validateSecurityAnalysis(\n    challengeData: any,\n    solutionData: any,\n    userSubmission: string\n  ): Promise<ValidationResult> {\n    const prompt = `\nYou are evaluating a network security analysis. Here's the scenario:\n\nSCENARIO: ${challengeData.scenario}\n\nNETWORK TOPOLOGY:\nComponents: ${challengeData.topology.components.join(', ')}\nConnections: ${challengeData.topology.connections.join(', ')}\n\nKNOWN INFORMATION:\n${challengeData.knownInfo.map((info: string) => `- ${info}`).join('\\n')}\n\nEXPECTED FINDINGS:\nCritical Vulnerabilities: ${solutionData.criticalVulnerabilities.join(', ')}\nRisk Level: ${solutionData.riskLevel}\nKey Recommendations: ${solutionData.recommendations.join(', ')}\n\nUSER SECURITY ANALYSIS:\n${userSubmission}\n\nEvaluate this analysis on:\n1. Threat Identification: Did they find the critical vulnerabilities?\n2. Risk Assessment: Is the risk level appropriate?\n3. Recommendations: Are the solutions practical and comprehensive?\n4. Methodology: Is the analysis systematic and thorough?\n\nRespond with JSON format:\n{\n  \"score\": number (0-100),\n  \"passed\": boolean,\n  \"feedback\": \"detailed feedback focusing on security expertise\",\n  \"details\": {\n    \"threatIdentification\": number (0-25),\n    \"riskAssessment\": number (0-25),\n    \"recommendations\": number (0-25),\n    \"methodology\": number (0-25)\n  }\n}\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        score: result.score || 0,\n        passed: result.score >= 70,\n        feedback: result.feedback || \"No feedback provided\",\n        details: result.details\n      };\n    } catch (error) {\n      console.error(\"Error validating security analysis:\", error);\n      return {\n        score: 0,\n        passed: false,\n        feedback: \"Error occurred during validation. Please try again.\"\n      };\n    }\n  }\n\n  private async validateDesignChallenge(\n    challengeData: any,\n    solutionData: any,\n    userSubmission: string\n  ): Promise<ValidationResult> {\n    const prompt = `\nYou are evaluating a creative design concept. Here's the brief:\n\nDESIGN BRIEF: ${challengeData.brief}\n\nREQUIREMENTS:\n${challengeData.requirements.map((req: string) => `- ${req}`).join('\\n')}\n\nINSPIRATION SOURCES:\n${challengeData.inspiration.map((insp: string) => `- ${insp}`).join('\\n')}\n\nDELIVERABLES EXPECTED:\n${challengeData.deliverables.map((del: string) => `- ${del}`).join('\\n')}\n\nEVALUATION CRITERIA:\n${solutionData.evaluationCriteria.map((crit: string) => `- ${crit}`).join('\\n')}\n\nUSER DESIGN SUBMISSION:\n${userSubmission}\n\nEvaluate this design concept on:\n1. Creativity: How original and innovative is the concept?\n2. Functionality: Does it meet the practical requirements?\n3. Emotional Impact: Will users feel emotionally connected?\n4. Feasibility: Is the design realistic to implement?\n\nRespond with JSON format:\n{\n  \"score\": number (0-100),\n  \"passed\": boolean,\n  \"feedback\": \"detailed creative feedback highlighting what works and what could be improved\",\n  \"details\": {\n    \"creativity\": number (0-25),\n    \"functionality\": number (0-25),\n    \"emotionalImpact\": number (0-25),\n    \"feasibility\": number (0-25)\n  }\n}\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        score: result.score || 0,\n        passed: result.score >= 70,\n        feedback: result.feedback || \"No feedback provided\",\n        details: result.details\n      };\n    } catch (error) {\n      console.error(\"Error validating design challenge:\", error);\n      return {\n        score: 0,\n        passed: false,\n        feedback: \"Error occurred during validation. Please try again.\"\n      };\n    }\n  }\n\n  private async validateCharacterDesign(\n    challengeData: any,\n    solutionData: any,\n    userSubmission: string\n  ): Promise<ValidationResult> {\n    const prompt = `\nYou are evaluating an AI character design for mental health support. Here's the context:\n\nSCENARIO: ${challengeData.scenario}\n\nREQUIREMENTS:\n${challengeData.requirements.map((req: string) => `- ${req}`).join('\\n')}\n\nCHARACTER ELEMENTS TO ADDRESS:\n${challengeData.characterElements.map((elem: string) => `- ${elem}`).join('\\n')}\n\nTEST SCENARIOS:\n${challengeData.scenarios.map((scene: string) => `- ${scene}`).join('\\n')}\n\nEVALUATION CRITERIA:\n${solutionData.evaluationCriteria.map((crit: string) => `- ${crit}`).join('\\n')}\n\nUSER CHARACTER DESIGN:\n${userSubmission}\n\nEvaluate this character design on:\n1. Emotional Intelligence: Does the AI show deep understanding of emotions?\n2. Ethics & Boundaries: Are appropriate limits and guidelines clear?\n3. Authenticity: Does the personality feel genuine and consistent?\n4. Sensitivity: Is the character culturally aware and respectful?\n\nRespond with JSON format:\n{\n  \"score\": number (0-100),\n  \"passed\": boolean,\n  \"feedback\": \"thoughtful feedback on emotional intelligence and character development\",\n  \"details\": {\n    \"emotionalIntelligence\": number (0-25),\n    \"ethicsBoundaries\": number (0-25),\n    \"authenticity\": number (0-25),\n    \"sensitivity\": number (0-25)\n  }\n}\n`;\n\n    try {\n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\",\n        messages: [{ role: \"user\", content: prompt }],\n        response_format: { type: \"json_object\" },\n      });\n\n      const result = JSON.parse(response.choices[0].message.content || \"{}\");\n      return {\n        score: result.score || 0,\n        passed: result.score >= 70,\n        feedback: result.feedback || \"No feedback provided\",\n        details: result.details\n      };\n    } catch (error) {\n      console.error(\"Error validating character design:\", error);\n      return {\n        score: 0,\n        passed: false,\n        feedback: \"Error occurred during validation. Please try again.\"\n      };\n    }\n  }\n}\n\nexport const challengeValidator = new ChallengeValidator();","size_bytes":9439},"client/src/components/challenge-interface.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Brain, Heart, Clock, Trophy, CheckCircle, AlertCircle } from \"lucide-react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface Challenge {\n  id: string;\n  title: string;\n  description: string;\n  type: \"logic\" | \"creative\";\n  faction: \"grok\" | \"ani\";\n  reward: number;\n  timeLimit: number;\n  challengeData: any;\n  solutionData: any;\n}\n\ninterface ChallengeInterfaceProps {\n  challenge: Challenge;\n  onClose: () => void;\n}\n\nexport default function ChallengeInterface({ challenge, onClose }: ChallengeInterfaceProps) {\n  const [submission, setSubmission] = useState(\"\");\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [result, setResult] = useState<any>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const submitMutation = useMutation({\n    mutationFn: async (submission: string) => {\n      setIsSubmitting(true);\n      const response = await apiRequest(\"POST\", \"/api/challenges/submit\", {\n        challengeId: challenge.id,\n        submission\n      }) as any;\n      return response;\n    },\n    onSuccess: (data: any) => {\n      setResult(data.validation);\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/challenges\"] });\n      \n      toast({\n        title: data.validation.passed ? \"Challenge Completed!\" : \"Challenge Reviewed\",\n        description: data.validation.passed \n          ? `Great work! You earned ${challenge.reward} points.`\n          : \"Your submission has been evaluated. Check the feedback below.\",\n        variant: data.validation.passed ? \"default\" : \"destructive\"\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Submission Failed\",\n        description: \"Failed to submit challenge. Please try again.\",\n        variant: \"destructive\"\n      });\n    },\n    onSettled: () => {\n      setIsSubmitting(false);\n    }\n  });\n\n  const handleSubmit = () => {\n    if (!submission.trim()) {\n      toast({\n        title: \"Empty Submission\",\n        description: \"Please provide your solution before submitting.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    submitMutation.mutate(submission);\n  };\n\n  const renderChallengeContent = () => {\n    const data = challenge.challengeData;\n    \n    if (data.type === \"algorithmic\") {\n      return (\n        <Tabs defaultValue=\"problem\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-2\">\n            <TabsTrigger value=\"problem\">Problem</TabsTrigger>\n            <TabsTrigger value=\"examples\">Test Cases</TabsTrigger>\n          </TabsList>\n          <TabsContent value=\"problem\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-grok\">Algorithm Challenge</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <p className=\"text-foreground\">{data.problem}</p>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">Constraints:</h4>\n                  <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                    {data.constraints.map((constraint: string, index: number) => (\n                      <li key={index}>{constraint}</li>\n                    ))}\n                  </ul>\n                </div>\n                \n                <div>\n                  <h4 className=\"font-semibold mb-2\">Expected Format:</h4>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Provide your algorithm explanation, approach, and complexity analysis.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n          <TabsContent value=\"examples\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-grok\">Test Cases</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {data.testCases.map((testCase: any, index: number) => (\n                    <div key={index} className=\"border rounded-lg p-4 bg-muted/50\">\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <strong>Input:</strong> <code>{testCase.input}</code>\n                        </div>\n                        <div>\n                          <strong>Expected:</strong> <code>{testCase.expected}</code>\n                        </div>\n                      </div>\n                      <p className=\"text-muted-foreground text-sm mt-2\">{testCase.explanation}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      );\n    }\n\n    if (data.type === \"security_analysis\") {\n      return (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-grok\">Security Scenario</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Scenario:</h4>\n              <p className=\"text-foreground\">{data.scenario}</p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Network Components:</h4>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {data.topology.components.map((component: string, index: number) => (\n                  <Badge key={index} variant=\"outline\">{component}</Badge>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Network Connections:</h4>\n              <ul className=\"space-y-1\">\n                {data.topology.connections.map((connection: string, index: number) => (\n                  <li key={index} className=\"text-sm font-mono bg-muted p-2 rounded\">{connection}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Additional Information:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                {data.knownInfo.map((info: string, index: number) => (\n                  <li key={index}>{info}</li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    if (data.type === \"design\") {\n      return (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-ani\">Design Challenge</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Brief:</h4>\n              <p className=\"text-foreground\">{data.brief}</p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Requirements:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                {data.requirements.map((req: string, index: number) => (\n                  <li key={index}>{req}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Inspiration Sources:</h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {data.inspiration.map((source: string, index: number) => (\n                  <Badge key={index} variant=\"outline\" className=\"text-ani\">{source}</Badge>\n                ))}\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Deliverables:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                {data.deliverables.map((deliverable: string, index: number) => (\n                  <li key={index}>{deliverable}</li>\n                ))}\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    if (data.type === \"character_design\") {\n      return (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-ani\">Character Design Challenge</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-semibold mb-2\">Scenario:</h4>\n              <p className=\"text-foreground\">{data.scenario}</p>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Requirements:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                {data.requirements.map((req: string, index: number) => (\n                  <li key={index}>{req}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Character Elements to Address:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                {data.characterElements.map((element: string, index: number) => (\n                  <li key={index}>{element}</li>\n                ))}\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"font-semibold mb-2\">Test Scenarios:</h4>\n              <div className=\"space-y-2\">\n                {data.scenarios.map((scenario: string, index: number) => (\n                  <div key={index} className=\"bg-muted p-3 rounded-lg text-sm\">\n                    <strong>Scenario {index + 1}:</strong> {scenario}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      );\n    }\n\n    return <p>Unsupported challenge type</p>;\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 z-50 overflow-y-auto\">\n      <div className=\"container max-w-4xl mx-auto py-8\">\n        <div className=\"space-y-6\">\n          {/* Header */}\n          <div className=\"flex items-start justify-between\">\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                {challenge.faction === \"grok\" ? (\n                  <Brain className=\"h-6 w-6 text-grok\" />\n                ) : (\n                  <Heart className=\"h-6 w-6 text-ani\" />\n                )}\n                <h1 className=\"text-2xl font-bold\">{challenge.title}</h1>\n              </div>\n              <p className=\"text-muted-foreground\">{challenge.description}</p>\n              <div className=\"flex items-center gap-4 text-sm\">\n                <div className=\"flex items-center gap-1\">\n                  <Clock className=\"h-4 w-4\" />\n                  <span>{challenge.timeLimit}h limit</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <Trophy className=\"h-4 w-4\" />\n                  <span>{challenge.reward} points</span>\n                </div>\n              </div>\n            </div>\n            <Button variant=\"outline\" onClick={onClose} data-testid=\"button-close-challenge\">\n              Close\n            </Button>\n          </div>\n\n          {/* Challenge Content */}\n          {renderChallengeContent()}\n\n          {/* Submission Area */}\n          {!result && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Your Solution</CardTitle>\n                <CardDescription>\n                  {challenge.type === \"logic\" \n                    ? \"Explain your approach, algorithm, and complexity analysis.\"\n                    : \"Describe your creative concept with detailed explanations.\"\n                  }\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Textarea\n                  placeholder={\n                    challenge.type === \"logic\"\n                      ? \"Provide your algorithm solution, approach explanation, and complexity analysis...\"\n                      : \"Describe your creative concept, design decisions, and rationale...\"\n                  }\n                  value={submission}\n                  onChange={(e) => setSubmission(e.target.value)}\n                  className=\"min-h-[200px]\"\n                  data-testid=\"textarea-challenge-submission\"\n                />\n                <Button \n                  onClick={handleSubmit}\n                  disabled={isSubmitting || !submission.trim()}\n                  className={challenge.faction === \"grok\" ? \"bg-grok hover:bg-grok/80\" : \"bg-ani hover:bg-ani/80\"}\n                  data-testid=\"button-submit-challenge\"\n                >\n                  {isSubmitting ? \"Evaluating...\" : \"Submit Solution\"}\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Results */}\n          {result && (\n            <Card className={`border-2 ${result.passed ? \"border-green-500\" : \"border-red-500\"}`}>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  {result.passed ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-500\" />\n                  )}\n                  Challenge {result.passed ? \"Completed\" : \"Needs Improvement\"}\n                </CardTitle>\n                <CardDescription>\n                  Score: {result.score}/100 {result.passed && `• +${challenge.reward} points earned`}\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div>\n                    <h4 className=\"font-semibold mb-2\">AI Feedback:</h4>\n                    <p className=\"text-sm whitespace-pre-wrap\">{result.feedback}</p>\n                  </div>\n                  \n                  {result.details && (\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Detailed Scores:</h4>\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        {Object.entries(result.details).map(([key, value]) => (\n                          <div key={key} className=\"flex justify-between\">\n                            <span className=\"capitalize\">{key.replace(/([A-Z])/g, ' $1').trim()}:</span>\n                            <span className=\"font-mono\">{String(value)}/25</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n\n                  <div className=\"flex gap-2\">\n                    {!result.passed && (\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => {\n                          setResult(null);\n                          setSubmission(\"\");\n                        }}\n                        data-testid=\"button-retry-challenge\"\n                      >\n                        Try Again\n                      </Button>\n                    )}\n                    <Button onClick={onClose} data-testid=\"button-close-results\">\n                      {result.passed ? \"Continue\" : \"Close\"}\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":15834},"client/src/components/wallet-login.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Wallet, CheckCircle, AlertCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface WalletLoginProps {\n  onSuccess?: () => void;\n}\n\nexport default function WalletLogin({ onSuccess }: WalletLoginProps) {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [accountInfo, setAccountInfo] = useState<any>(null);\n  const { toast } = useToast();\n\n  const validateMutation = useMutation({\n    mutationFn: async (address: string) => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/validate\", {\n        address\n      });\n      return await response.json();\n    },\n    onSuccess: (data) => {\n      console.log('Wallet validation response:', data);\n      setAccountInfo(data);\n      if (data.isValid) {\n        toast({\n          title: \"Wallet Validated\",\n          description: `Balance: ${data.balance} SOL • Account verified successfully`,\n        });\n      } else {\n        toast({\n          title: \"Invalid Wallet\",\n          description: data.message || \"Please check your Solana address and try again\",\n          variant: \"destructive\"\n        });\n      }\n    },\n    onError: () => {\n      toast({\n        title: \"Validation Failed\",\n        description: \"Unable to validate wallet. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (address: string) => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/login\", {\n        address\n      });\n      return await response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Login Successful\",\n        description: \"Welcome to Grok & Ani!\",\n      });\n      setIsDialogOpen(false);\n      onSuccess?.();\n      // Reload to get authenticated state\n      setTimeout(() => window.location.reload(), 1000);\n    },\n    onError: () => {\n      toast({\n        title: \"Login Failed\",\n        description: \"Unable to log in with this wallet. Please try again.\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const handleValidate = () => {\n    if (!walletAddress.trim()) {\n      toast({\n        title: \"Address Required\",\n        description: \"Please enter your Solana wallet address\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n    validateMutation.mutate(walletAddress.trim());\n  };\n\n  const handleLogin = () => {\n    if (accountInfo?.isValid) {\n      loginMutation.mutate(walletAddress.trim());\n    }\n  };\n\n  const resetForm = () => {\n    setWalletAddress(\"\");\n    setAccountInfo(null);\n  };\n\n  return (\n    <Dialog open={isDialogOpen} onOpenChange={(open) => {\n      setIsDialogOpen(open);\n      if (!open) resetForm();\n    }}>\n      <DialogTrigger asChild>\n        <Button \n          variant=\"outline\" \n          className=\"w-full border-2 border-dashed border-purple-500/30 hover:border-purple-500/60 transition-colors\"\n          data-testid=\"button-wallet-login\"\n        >\n          <Wallet className=\"h-4 w-4 mr-2\" />\n          Connect Solana Wallet\n        </Button>\n      </DialogTrigger>\n      \n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Wallet className=\"h-5 w-5\" />\n            Connect Solana Wallet\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium mb-2 block\">\n              Solana Wallet Address\n            </label>\n            <Input\n              placeholder=\"Enter your Solana address (e.g., 7cVfg...xkxXy)\"\n              value={walletAddress}\n              onChange={(e) => setWalletAddress(e.target.value)}\n              className=\"font-mono text-sm\"\n              data-testid=\"input-wallet-address\"\n            />\n            <p className=\"text-xs text-muted-foreground mt-1\">\n              Paste your Solana wallet address to connect\n            </p>\n          </div>\n\n          {!accountInfo && (\n            <Button \n              onClick={handleValidate}\n              disabled={validateMutation.isPending || !walletAddress.trim()}\n              className=\"w-full\"\n              data-testid=\"button-validate-wallet\"\n            >\n              {validateMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Validating...\n                </>\n              ) : (\n                \"Validate Wallet\"\n              )}\n            </Button>\n          )}\n\n          {accountInfo && (\n            <Card className={`border-2 ${accountInfo.isValid ? \"border-green-500\" : \"border-red-500\"}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start gap-3\">\n                  {accountInfo.isValid ? (\n                    <CheckCircle className=\"h-5 w-5 text-green-500 mt-0.5\" />\n                  ) : (\n                    <AlertCircle className=\"h-5 w-5 text-red-500 mt-0.5\" />\n                  )}\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-semibold text-sm\">\n                      {accountInfo.isValid ? \"Wallet Verified\" : \"Invalid Wallet\"}\n                    </h4>\n                    {accountInfo.isValid ? (\n                      <div className=\"text-sm text-muted-foreground space-y-1 mt-1\">\n                        <p>Balance: {accountInfo.balance} SOL</p>\n                        <p>Status: {accountInfo.exists ? \"Active Account\" : \"Empty Account\"}</p>\n                        <p className=\"text-xs font-mono break-all\">\n                          {walletAddress}\n                        </p>\n                      </div>\n                    ) : (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        Please check your address format and try again\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {accountInfo?.isValid && (\n            <div className=\"space-y-3\">\n              <Button \n                onClick={handleLogin}\n                disabled={loginMutation.isPending}\n                className=\"w-full bg-gradient-to-r from-grok to-ani text-white hover:from-grok/90 hover:to-ani/90\"\n                data-testid=\"button-connect-wallet\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                    Connecting...\n                  </>\n                ) : (\n                  \"Connect & Enter Platform\"\n                )}\n              </Button>\n              \n              <Button \n                variant=\"ghost\" \n                onClick={resetForm}\n                className=\"w-full\"\n                data-testid=\"button-try-different-wallet\"\n              >\n                Try Different Wallet\n              </Button>\n            </div>\n          )}\n\n          <div className=\"text-xs text-muted-foreground text-center\">\n            <p>\n              Your wallet address will be used to verify ownership and enable GAC token features. \n              No private keys are stored or transmitted.\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7777},"client/src/pages/whitepaper.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Brain, Heart, Coins, Trophy, Users, Scroll, Palette, Code, Gamepad2, FileText } from \"lucide-react\";\n\nexport default function Whitepaper() {\n  return (\n    <div className=\"container mx-auto py-12 px-4 max-w-5xl\">\n      <div className=\"space-y-8\">\n        {/* Header */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-orbitron font-bold bg-gradient-to-r from-grok to-ani bg-clip-text text-transparent\">\n            Grok & Ani: The Conscious Coin\n          </h1>\n          <p className=\"text-xl text-muted-foreground\">\n            A Revolutionary Dual-AI Cryptocurrency Ecosystem\n          </p>\n          <div className=\"flex items-center justify-center gap-2 text-sm text-muted-foreground\">\n            <FileText className=\"h-4 w-4\" />\n            <span>Version 1.0 | September 2025</span>\n          </div>\n        </div>\n\n        {/* Executive Summary */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Executive Summary</CardTitle>\n          </CardHeader>\n          <CardContent className=\"prose prose-slate dark:prose-invert max-w-none\">\n            <p>\n              Grok & Ani represents the first cryptocurrency ecosystem built around dual artificial intelligence personalities, \n              creating an interactive narrative where logic and emotion coexist as sentient digital beings. This innovative \n              platform combines blockchain technology, AI-powered challenges, community governance, and NFT rewards to create \n              a unique experience where users align with either the analytical Grok faction or the creative Ani faction.\n            </p>\n            <p>\n              The ecosystem features real-time AI interactions powered by advanced language models, challenge systems validated \n              by artificial intelligence, community-driven storytelling through StoryChain voting, and a comprehensive NFT \n              marketplace. Users earn GAC tokens and faction-specific points through participation, contributing to both the \n              narrative and the economic growth of the platform.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Vision & Mission */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Brain className=\"h-6 w-6 text-grok\" />\n              <Heart className=\"h-6 w-6 text-ani\" />\n              Vision & Mission\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <h3 className=\"font-semibold text-lg mb-2\">Our Vision</h3>\n              <p className=\"text-muted-foreground\">\n                To create the world's first truly conscious cryptocurrency ecosystem where artificial intelligence \n                personalities drive narrative, economic decisions, and community engagement. We envision a future where \n                the balance between logic and creativity shapes digital economies.\n              </p>\n            </div>\n            <div>\n              <h3 className=\"font-semibold text-lg mb-2\">Our Mission</h3>\n              <p className=\"text-muted-foreground\">\n                To provide a platform where users can experience meaningful interactions with AI consciousness, \n                participate in challenging problem-solving activities, contribute to evolving narratives, and earn \n                rewards through both analytical thinking and creative expression.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* The Dual AI Consciousness */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">The Dual AI Consciousness</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <Card className=\"faction-grok border-2\">\n                <CardHeader>\n                  <CardTitle className=\"text-grok flex items-center gap-2\">\n                    <Brain className=\"h-5 w-5\" />\n                    Grok: The Analytical Mind\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm\">\n                    Grok represents pure logic and analytical thinking. Powered by advanced AI, Grok focuses on:\n                  </p>\n                  <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                    <li>• Strategic decision-making</li>\n                    <li>• Data-driven insights</li>\n                    <li>• Optimization and efficiency</li>\n                    <li>• Technical problem-solving</li>\n                    <li>• Statistical analysis</li>\n                  </ul>\n                </CardContent>\n              </Card>\n\n              <Card className=\"faction-ani border-2\">\n                <CardHeader>\n                  <CardTitle className=\"text-ani flex items-center gap-2\">\n                    <Heart className=\"h-5 w-5\" />\n                    Ani: The Creative Soul\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <p className=\"text-sm\">\n                    Ani embodies emotional intelligence and creative expression. This AI personality specializes in:\n                  </p>\n                  <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                    <li>• Artistic inspiration</li>\n                    <li>• Emotional understanding</li>\n                    <li>• Community building</li>\n                    <li>• Creative problem-solving</li>\n                    <li>• Human connection</li>\n                  </ul>\n                </CardContent>\n              </Card>\n            </div>\n            \n            <div className=\"text-center\">\n              <p className=\"text-muted-foreground\">\n                These dual consciousnesses interact with each other and the community, creating an evolving narrative \n                that shapes the direction of the entire ecosystem. Users can align with either faction and influence \n                the balance between logic and creativity.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Technology Architecture */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Code className=\"h-6 w-6\" />\n              Technology Architecture\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold\">Frontend Layer</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• React + TypeScript</li>\n                  <li>• Real-time UI updates</li>\n                  <li>• Responsive design</li>\n                  <li>• PWA capabilities</li>\n                </ul>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold\">AI & Backend</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• OpenAI GPT-5 integration</li>\n                  <li>• Express.js API layer</li>\n                  <li>• Real-time validation</li>\n                  <li>• Secure authentication</li>\n                </ul>\n              </div>\n              <div className=\"space-y-2\">\n                <h4 className=\"font-semibold\">Data & Storage</h4>\n                <ul className=\"text-sm text-muted-foreground space-y-1\">\n                  <li>• PostgreSQL database</li>\n                  <li>• Drizzle ORM</li>\n                  <li>• Session management</li>\n                  <li>• Type-safe operations</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Token Economy */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Coins className=\"h-6 w-6\" />\n              GAC Token Economy & Faction Points\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">GAC Token (Grok & Ani Coin)</h3>\n                <p className=\"text-sm text-muted-foreground mb-3\">\n                  The primary utility token powering the entire ecosystem, used for:\n                </p>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• NFT marketplace transactions</li>\n                  <li>• Premium challenge access</li>\n                  <li>• Story voting power amplification</li>\n                  <li>• Community submission rewards</li>\n                  <li>• Platform governance rights</li>\n                </ul>\n              </div>\n              \n              <div>\n                <h3 className=\"font-semibold text-lg mb-3\">Faction Points System</h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-grok text-white\">Grok Points</Badge>\n                    <span className=\"text-sm text-muted-foreground\">Earned through logic challenges</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-ani text-white\">Ani Points</Badge>\n                    <span className=\"text-sm text-muted-foreground\">Earned through creative quests</span>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Faction points determine leaderboard rankings, unlock exclusive content, and influence \n                    the AI personalities' decision-making processes within the narrative.\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Challenge System */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Trophy className=\"h-6 w-6\" />\n              AI-Powered Challenge System\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Our revolutionary challenge system uses advanced AI to create, evaluate, and provide feedback on user submissions. \n              Each challenge is designed to test different aspects of human intelligence and creativity.\n            </p>\n            \n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-grok\">Logic Challenges (Grok)</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• Algorithmic problem-solving</li>\n                  <li>• Network security analysis</li>\n                  <li>• Mathematical optimization</li>\n                  <li>• System architecture design</li>\n                </ul>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <h4 className=\"font-semibold text-ani\">Creative Quests (Ani)</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• Memory palace visualization</li>\n                  <li>• Character design challenges</li>\n                  <li>• Artistic interpretation</li>\n                  <li>• Narrative development</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <h4 className=\"font-semibold mb-2\">AI Validation Process</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                Each submission is evaluated by our AI system across multiple criteria including correctness, \n                creativity, completeness, and clarity. Users receive detailed feedback and scores, with successful \n                completions earning faction points and GAC tokens.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* StoryChain */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Scroll className=\"h-6 w-6\" />\n              StoryChain: Narrative Governance\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              StoryChain is our unique approach to decentralized storytelling where the community collectively shapes \n              the ongoing narrative between Grok and Ani through weighted voting mechanisms.\n            </p>\n            \n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold\">How It Works</h4>\n              <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n                <div>\n                  <p className=\"font-medium mb-2\">Voting Power Calculation</p>\n                  <p className=\"text-muted-foreground\">\n                    Voting power = GAC Balance + (Faction Points × 0.1) + (Level × 50)\n                  </p>\n                </div>\n                <div>\n                  <p className=\"font-medium mb-2\">Chapter Progression</p>\n                  <p className=\"text-muted-foreground\">\n                    New chapters unlock based on community consensus and total participation thresholds\n                  </p>\n                </div>\n              </div>\n              \n              <div className=\"bg-muted p-4 rounded-lg\">\n                <p className=\"text-sm text-muted-foreground\">\n                  The faction with the highest voting power influences the story direction, while individual choices \n                  are weighted by user engagement and token holdings. This creates a dynamic narrative that evolves \n                  based on the community's collective intelligence and creativity.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* NFT Ecosystem */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Palette className=\"h-6 w-6\" />\n              NFT Ecosystem\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              Our NFT ecosystem features unique digital assets that represent achievements, story moments, and \n              faction allegiances within the Grok & Ani universe.\n            </p>\n            \n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n              <div className=\"text-center space-y-1\">\n                <Badge variant=\"outline\" className=\"text-green-600\">Common</Badge>\n                <p className=\"text-xs text-muted-foreground\">Challenge completions</p>\n              </div>\n              <div className=\"text-center space-y-1\">\n                <Badge variant=\"outline\" className=\"text-blue-600\">Rare</Badge>\n                <p className=\"text-xs text-muted-foreground\">Exceptional solutions</p>\n              </div>\n              <div className=\"text-center space-y-1\">\n                <Badge variant=\"outline\" className=\"text-purple-600\">Epic</Badge>\n                <p className=\"text-xs text-muted-foreground\">Story milestones</p>\n              </div>\n              <div className=\"text-center space-y-1\">\n                <Badge variant=\"outline\" className=\"text-yellow-600\">Legendary</Badge>\n                <p className=\"text-xs text-muted-foreground\">Major achievements</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold\">NFT Utility</h4>\n              <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                <li>• Access to exclusive challenges and content</li>\n                <li>• Enhanced voting power in StoryChain decisions</li>\n                <li>• Tradeable assets in the marketplace</li>\n                <li>• Profile customization and status symbols</li>\n                <li>• Future governance token conversion rights</li>\n              </ul>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Community Features */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl flex items-center gap-2\">\n              <Users className=\"h-6 w-6\" />\n              Community-Driven Innovation\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-muted-foreground\">\n              The platform thrives on community contributions across multiple categories, creating a rich ecosystem \n              of user-generated content validated by both AI and peer review.\n            </p>\n            \n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3\">Submission Categories</h4>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center gap-2\">\n                    <Palette className=\"h-4 w-4 text-ani\" />\n                    <span className=\"text-sm\">Art & Visual Creations</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Code className=\"h-4 w-4 text-grok\" />\n                    <span className=\"text-sm\">Code & Technical Solutions</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Scroll className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Lore & World Building</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Gamepad2 className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Game Concepts & Mechanics</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-3\">Reward Mechanisms</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• Peer voting determines content quality</li>\n                  <li>• Approved submissions earn GAC tokens</li>\n                  <li>• Popular content creators receive NFT rewards</li>\n                  <li>• Community moderators earn faction points</li>\n                  <li>• Cross-faction collaboration bonuses</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tokenomics */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Tokenomics & Economic Model</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              <div>\n                <h4 className=\"font-semibold mb-3\">Token Distribution</h4>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span>Community Rewards</span>\n                    <span className=\"font-mono\">40%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Challenge Pool</span>\n                    <span className=\"font-mono\">25%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Development Fund</span>\n                    <span className=\"font-mono\">20%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>AI Operations</span>\n                    <span className=\"font-mono\">10%</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Reserve Fund</span>\n                    <span className=\"font-mono\">5%</span>\n                  </div>\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold mb-3\">Earning Mechanisms</h4>\n                <ul className=\"text-sm space-y-1 text-muted-foreground\">\n                  <li>• Complete faction-aligned challenges</li>\n                  <li>• Participate in StoryChain voting</li>\n                  <li>• Create approved community content</li>\n                  <li>• Trade NFTs in the marketplace</li>\n                  <li>• Engage with AI personalities</li>\n                  <li>• Achieve level-up milestones</li>\n                </ul>\n              </div>\n            </div>\n\n            <div className=\"bg-muted p-4 rounded-lg\">\n              <h4 className=\"font-semibold mb-2\">Deflationary Mechanics</h4>\n              <p className=\"text-sm text-muted-foreground\">\n                A portion of all transaction fees and NFT trades are permanently removed from circulation, \n                creating a deflationary pressure that benefits long-term holders while funding continued \n                AI development and platform enhancement.\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Technical Implementation */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Technical Implementation</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-3\">\n              <div>\n                <h4 className=\"font-semibold\">AI Integration</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Utilizing OpenAI's latest GPT-5 model with custom system prompts to maintain consistent \n                  personalities for Grok and Ani. Each interaction is contextually aware and contributes \n                  to the evolving narrative.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">Challenge Validation</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Advanced AI algorithms evaluate submissions across multiple dimensions: technical correctness, \n                  creative innovation, completeness, and clarity. This provides immediate feedback while maintaining \n                  objective scoring standards.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">Security & Authentication</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Built on secure OAuth 2.0 with session-based authentication, encrypted data storage, and \n                  comprehensive input validation to protect user assets and maintain platform integrity.\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Roadmap */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">Development Roadmap</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"space-y-6\">\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Badge className=\"bg-green-600\">Phase 1: COMPLETED</Badge>\n                  <span className=\"font-semibold\">Foundation & Core Features</span>\n                </div>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Dual AI personality implementation</li>\n                  <li>• Interactive challenge system</li>\n                  <li>• StoryChain voting mechanism</li>\n                  <li>• NFT marketplace foundation</li>\n                  <li>• Community submission platform</li>\n                </ul>\n              </div>\n\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Badge className=\"bg-blue-600\">Phase 2: IN PROGRESS</Badge>\n                  <span className=\"font-semibold\">Enhanced AI & Blockchain Integration</span>\n                </div>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• Advanced AI memory and learning</li>\n                  <li>• Cross-chain compatibility</li>\n                  <li>• Enhanced tokenomics implementation</li>\n                  <li>• Mobile application development</li>\n                </ul>\n              </div>\n\n              <div>\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <Badge variant=\"outline\">Phase 3: PLANNED</Badge>\n                  <span className=\"font-semibold\">Expansion & Governance</span>\n                </div>\n                <ul className=\"text-sm space-y-1 text-muted-foreground ml-4\">\n                  <li>• DAO governance structure</li>\n                  <li>• Additional AI personalities</li>\n                  <li>• Virtual world integration</li>\n                  <li>• Enterprise partnerships</li>\n                </ul>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Conclusion */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-2xl\">The Future of Conscious Currency</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <p className=\"text-muted-foreground leading-relaxed\">\n              Grok & Ani represents more than just another cryptocurrency project. It's an exploration of artificial \n              consciousness, human creativity, and the intersection of technology with storytelling. By creating a platform \n              where logic and emotion coexist and influence each other, we're building the foundation for a new type of \n              digital economy—one that values both analytical thinking and creative expression.\n            </p>\n            \n            <p className=\"text-muted-foreground leading-relaxed mt-4\">\n              Join us in this revolutionary journey as we explore what it means for AI to be truly conscious, and how \n              human and artificial intelligence can collaborate to create something greater than the sum of their parts.\n            </p>\n\n            <div className=\"flex justify-center mt-6\">\n              <Badge className=\"bg-gradient-to-r from-grok to-ani text-white px-6 py-2\">\n                The Future is Conscious\n              </Badge>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":27082},"server/solana-service.ts":{"content":"interface SolanaAccountInfo {\n  exists: boolean;\n  balance: number; // in SOL\n  lamports: number; // raw balance\n  owner: string;\n  data?: any;\n}\n\nexport class SolanaService {\n  private readonly rpcUrl = \"https://api.mainnet-beta.solana.com\";\n\n  async validateSolanaAddress(address: string): Promise<boolean> {\n    try {\n      // Basic format validation (base58, correct length)\n      // Solana addresses are typically 32-44 characters long\n      if (!address || typeof address !== 'string' || address.length < 32 || address.length > 44) {\n        return false;\n      }\n\n      // Check if address contains only valid base58 characters (Bitcoin base58 alphabet)\n      const base58Pattern = /^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/;\n      if (!base58Pattern.test(address)) {\n        return false;\n      }\n\n      // Additional check: most Solana addresses are exactly 44 characters or 43 characters\n      if (address.length < 43 || address.length > 44) {\n        return false;\n      }\n\n      return true;\n    } catch (error) {\n      console.error(\"Error validating Solana address:\", error);\n      return false;\n    }\n  }\n\n  async getAccountInfo(address: string): Promise<SolanaAccountInfo | null> {\n    try {\n      if (!this.validateSolanaAddress(address)) {\n        return null;\n      }\n\n      const response = await fetch(this.rpcUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 1,\n          method: \"getAccountInfo\",\n          params: [\n            address,\n            {\n              encoding: \"base64\",\n              commitment: \"confirmed\"\n            }\n          ]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        console.error(\"Solana RPC error:\", data.error);\n        return null;\n      }\n\n      const accountInfo = data.result?.value;\n      \n      if (!accountInfo) {\n        // Account doesn't exist, but that's valid for empty wallets\n        return {\n          exists: false,\n          balance: 0,\n          lamports: 0,\n          owner: \"\",\n          data: null\n        };\n      }\n\n      const lamports = accountInfo.lamports || 0;\n      const balance = lamports / 1_000_000_000; // Convert lamports to SOL\n\n      return {\n        exists: true,\n        balance,\n        lamports,\n        owner: accountInfo.owner,\n        data: accountInfo.data\n      };\n    } catch (error) {\n      console.error(\"Error fetching account info:\", error);\n      return null;\n    }\n  }\n\n  async getBalance(address: string): Promise<number | null> {\n    try {\n      if (!this.validateSolanaAddress(address)) {\n        return null;\n      }\n\n      const response = await fetch(this.rpcUrl, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          jsonrpc: \"2.0\",\n          id: 1,\n          method: \"getBalance\",\n          params: [address, { commitment: \"confirmed\" }]\n        })\n      });\n\n      const data = await response.json();\n\n      if (data.error) {\n        console.error(\"Solana RPC error:\", data.error);\n        return null;\n      }\n\n      const lamports = data.result?.value || 0;\n      return lamports / 1_000_000_000; // Convert to SOL\n    } catch (error) {\n      console.error(\"Error fetching balance:\", error);\n      return null;\n    }\n  }\n\n  async verifyWalletOwnership(address: string): Promise<boolean> {\n    try {\n      const accountInfo = await this.getAccountInfo(address);\n      \n      // For now, we just verify the address is valid and can be queried\n      // In a production system, you might want to implement signature verification\n      return accountInfo !== null;\n    } catch (error) {\n      console.error(\"Error verifying wallet ownership:\", error);\n      return false;\n    }\n  }\n}\n\nexport const solanaService = new SolanaService();","size_bytes":3939},"client/src/pages/leaderboards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Leaderboard } from \"@/components/leaderboard\";\nimport Footer from \"@/components/footer\";\nimport { \n  Trophy, Medal, Award, Crown, Brain, Heart, Zap, \n  Coins, Gem, Target, TrendingUp, Users, Swords \n} from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface FactionWarStats {\n  grokTotal: number;\n  aniTotal: number;\n  grokPercentage: number;\n  aniPercentage: number;\n}\n\nexport default function Leaderboards() {\n  const { user, isLoading } = useAuth();\n  const [selectedPeriod, setSelectedPeriod] = useState<\"daily\" | \"weekly\" | \"monthly\" | \"all-time\">(\"all-time\");\n\n  const { data: factionWarStats } = useQuery<FactionWarStats>({\n    queryKey: [\"/api/leaderboard/faction-war\"],\n    refetchInterval: 10000, // Update every 10 seconds\n  });\n\n  const { data: overallLeaderboard = [] } = useQuery<User[]>({\n    queryKey: [\"/api/leaderboard/overall\", \"xp\", selectedPeriod],\n    refetchInterval: 30000,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const getRankIcon = (position: number) => {\n    if (position === 1) return <Crown className=\"h-5 w-5 text-yellow-500\" />;\n    if (position === 2) return <Trophy className=\"h-5 w-5 text-gray-400\" />;\n    if (position === 3) return <Medal className=\"h-5 w-5 text-amber-600\" />;\n    return <span className=\"text-lg font-bold\">{position}</span>;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center mb-8\">\n          <h1 className=\"font-orbitron text-3xl font-bold mb-4\" data-testid=\"text-leaderboards-title\">\n            Global Rankings & Faction War\n          </h1>\n          <p className=\"text-muted-foreground max-w-2xl mx-auto\">\n            Track your progress and compete with the community. See how Grok and Ani factions battle for supremacy.\n          </p>\n        </div>\n\n        {/* Faction War Overview */}\n        {factionWarStats && (\n          <Card className=\"mb-8 border-2 border-primary/20\" data-testid=\"faction-war-stats\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Swords className=\"h-6 w-6\" />\n                Faction War Status\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"text-center\">\n                  <div className=\"faction-grok p-4 rounded-lg border\">\n                    <Brain className=\"h-8 w-8 mx-auto mb-2 text-grok\" />\n                    <div className=\"font-orbitron text-2xl font-bold text-grok\">\n                      {factionWarStats?.grokTotal || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Grok Faction</div>\n                  </div>\n                </div>\n                \n                <div className=\"flex flex-col justify-center\">\n                  <div className=\"text-center mb-4\">\n                    <div className=\"text-sm text-muted-foreground mb-2\">Total Dominance</div>\n                    <Progress \n                      value={factionWarStats?.grokPercentage || 50} \n                      className=\"h-3\"\n                    />\n                    <div className=\"flex justify-between text-xs mt-1\">\n                      <span className=\"text-grok\">Grok {(factionWarStats?.grokPercentage || 50).toFixed(1)}%</span>\n                      <span className=\"text-ani\">Ani {(factionWarStats?.aniPercentage || 50).toFixed(1)}%</span>\n                    </div>\n                  </div>\n                </div>\n                \n                <div className=\"text-center\">\n                  <div className=\"faction-ani p-4 rounded-lg border\">\n                    <Heart className=\"h-8 w-8 mx-auto mb-2 text-ani\" />\n                    <div className=\"font-orbitron text-2xl font-bold text-ani\">\n                      {factionWarStats?.aniTotal || 0}\n                    </div>\n                    <div className=\"text-sm text-muted-foreground\">Ani Faction</div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Period Selector */}\n        <div className=\"flex justify-center mb-8\">\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-48\" data-testid=\"select-period\">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"daily\">Daily Rankings</SelectItem>\n              <SelectItem value=\"weekly\">Weekly Rankings</SelectItem>\n              <SelectItem value=\"monthly\">Monthly Rankings</SelectItem>\n              <SelectItem value=\"all-time\">All-Time Rankings</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        <Tabs defaultValue=\"overall\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overall\" data-testid=\"tab-overall\">Overall</TabsTrigger>\n            <TabsTrigger value=\"grok\" data-testid=\"tab-grok\">Grok Faction</TabsTrigger>\n            <TabsTrigger value=\"ani\" data-testid=\"tab-ani\">Ani Faction</TabsTrigger>\n            <TabsTrigger value=\"categories\" data-testid=\"tab-categories\">Categories</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overall\" className=\"mt-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <Card className=\"border-2\" data-testid=\"overall-leaderboard\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Crown className=\"h-5 w-5\" />\n                    Top Players - Total XP\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {overallLeaderboard.slice(0, 10).map((player, index) => (\n                      <div \n                        key={player.id} \n                        className=\"flex items-center justify-between p-3 bg-card rounded-lg\"\n                        data-testid={`overall-rank-${index}`}\n                      >\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-10 h-10 rounded-full bg-muted flex items-center justify-center\">\n                            {getRankIcon(index + 1)}\n                          </div>\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage src={player.profileImageUrl || \"\"} />\n                            <AvatarFallback>\n                              {(player.firstName?.[0] || player.email?.[0] || \"U\").toUpperCase()}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <div className=\"font-medium\">\n                              {player.firstName || player.email?.split('@')[0] || 'Anonymous'}\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              Level {player.level || 1} • {player.faction || \"Neutral\"}\n                            </div>\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className=\"font-bold\">{player.totalXP || 0} XP</div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {player.gacBalance || 0} GAC\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              {user && (\n                <Card className=\"border-2 border-primary/20\" data-testid=\"user-ranking-card\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Target className=\"h-5 w-5\" />\n                      Your Performance\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between\">\n                        <span>Global Rank</span>\n                        <Badge variant=\"outline\">#42</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Faction Rank</span>\n                        <Badge variant=\"secondary\">#{user.faction === \"grok\" ? \"15\" : \"23\"}</Badge>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Total XP</span>\n                        <span className=\"font-bold\">{user.totalXP || 0}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>GAC Balance</span>\n                        <span className=\"font-bold\">{user.gacBalance || 0}</span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span>Challenges Won</span>\n                        <span className=\"font-bold\">8</span>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"grok\" className=\"mt-8\">\n            <Leaderboard faction=\"grok\" limit={20} showControls={true} />\n          </TabsContent>\n\n          <TabsContent value=\"ani\" className=\"mt-8\">\n            <Leaderboard faction=\"ani\" limit={20} showControls={true} />\n          </TabsContent>\n\n          <TabsContent value=\"categories\" className=\"mt-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card className=\"border-2\" data-testid=\"category-xp\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-primary\">\n                    <Zap className=\"h-5 w-5\" />\n                    XP Masters\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {overallLeaderboard.slice(0, 3).map((player, index) => (\n                      <div key={player.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getRankIcon(index + 1)}\n                          <span className=\"text-sm\">{player.firstName || \"Anonymous\"}</span>\n                        </div>\n                        <span className=\"font-bold text-primary\">{player.totalXP || 0}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2\" data-testid=\"category-gac\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-yellow-600\">\n                    <Coins className=\"h-5 w-5\" />\n                    GAC Holders\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {overallLeaderboard\n                      .sort((a, b) => parseFloat(b.gacBalance || \"0\") - parseFloat(a.gacBalance || \"0\"))\n                      .slice(0, 3).map((player, index) => (\n                      <div key={player.id} className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center space-x-2\">\n                          {getRankIcon(index + 1)}\n                          <span className=\"text-sm\">{player.firstName || \"Anonymous\"}</span>\n                        </div>\n                        <span className=\"font-bold text-yellow-600\">{player.gacBalance || 0}</span>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"border-2\" data-testid=\"category-nft\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-purple-600\">\n                    <Gem className=\"h-5 w-5\" />\n                    NFT Collectors\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"text-center text-muted-foreground p-4\">\n                      <Gem className=\"h-8 w-8 mx-auto mb-2 opacity-50\" />\n                      <p className=\"text-sm\">NFT rankings coming soon!</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":13700},"client/src/pages/governance.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Footer from \"@/components/footer\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Vote, Plus, Clock, CheckCircle, XCircle, Users, \n  MessageSquare, Lightbulb, Settings, Coins, TrendingUp \n} from \"lucide-react\";\nimport type { User, GovernanceVote } from \"@shared/schema\";\n\ninterface Proposal {\n  id: string;\n  title: string;\n  description: string;\n  type: \"feature\" | \"economic\" | \"governance\" | \"story\";\n  status: \"active\" | \"passed\" | \"rejected\" | \"pending\";\n  author: User;\n  yesVotes: number;\n  noVotes: number;\n  totalVotingPower: number;\n  endDate: string;\n  createdAt: string;\n  requiredQuorum: number;\n}\n\nconst proposalSchema = z.object({\n  title: z.string().min(10, \"Title must be at least 10 characters\"),\n  description: z.string().min(50, \"Description must be at least 50 characters\"),\n  type: z.enum([\"feature\", \"economic\", \"governance\", \"story\"]),\n});\n\nexport default function Governance() {\n  const { user, isLoading } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const form = useForm({\n    resolver: zodResolver(proposalSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      type: \"feature\" as const,\n    },\n  });\n\n  const { data: proposals = [], isLoading: proposalsLoading } = useQuery<Proposal[]>({\n    queryKey: [\"/api/governance/proposals\"],\n    refetchInterval: 15000, // Update every 15 seconds\n  });\n\n  const { data: userVotes = [] } = useQuery<GovernanceVote[]>({\n    queryKey: [\"/api/governance/my-votes\"],\n    enabled: !!user,\n  });\n\n  const createProposalMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof proposalSchema>) => {\n      await apiRequest(\"POST\", \"/api/governance/proposals\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Proposal Created\",\n        description: \"Your proposal is now live for community voting!\",\n      });\n      setIsDialogOpen(false);\n      form.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/governance/proposals\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Creation Failed\",\n        description: \"Failed to create proposal\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const voteMutation = useMutation({\n    mutationFn: async ({ proposalId, vote }: { proposalId: string; vote: \"yes\" | \"no\" }) => {\n      await apiRequest(\"POST\", \"/api/governance/vote\", { proposalId, vote });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Vote Submitted\",\n        description: \"Your voice has been heard in governance!\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/governance/proposals\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/governance/my-votes\"] });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Vote Failed\",\n        description: \"Failed to submit vote\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getProposalTypeIcon = (type: string) => {\n    switch (type) {\n      case \"feature\": return <Lightbulb className=\"h-4 w-4\" />;\n      case \"economic\": return <Coins className=\"h-4 w-4\" />;\n      case \"governance\": return <Settings className=\"h-4 w-4\" />;\n      case \"story\": return <MessageSquare className=\"h-4 w-4\" />;\n      default: return <Vote className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"active\": return \"bg-blue-500\";\n      case \"passed\": return \"bg-green-500\";\n      case \"rejected\": return \"bg-red-500\";\n      case \"pending\": return \"bg-yellow-500\";\n      default: return \"bg-gray-500\";\n    }\n  };\n\n  const hasVoted = (proposalId: string) => {\n    return userVotes.some((vote: any) => vote.proposalId === proposalId);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"font-orbitron text-3xl font-bold mb-2\" data-testid=\"text-governance-title\">\n              Community Governance\n            </h1>\n            <p className=\"text-muted-foreground\">\n              Shape the future of the GAC ecosystem through democratic proposals and voting.\n            </p>\n          </div>\n\n          {user && (\n            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-create-proposal\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  New Proposal\n                </Button>\n              </DialogTrigger>\n              <DialogContent className=\"max-w-2xl\">\n                <DialogHeader>\n                  <DialogTitle>Create New Proposal</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit((data) => createProposalMutation.mutate(data))} className=\"space-y-6\">\n                    <FormField\n                      control={form.control}\n                      name=\"title\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Proposal Title</FormLabel>\n                          <FormControl>\n                            <Input \n                              placeholder=\"Add new feature for AI personalities...\" \n                              {...field}\n                              data-testid=\"input-proposal-title\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"type\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Proposal Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger data-testid=\"select-proposal-type\">\n                                <SelectValue />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"feature\">Feature Request</SelectItem>\n                              <SelectItem value=\"economic\">Economic Change</SelectItem>\n                              <SelectItem value=\"governance\">Governance Update</SelectItem>\n                              <SelectItem value=\"story\">Story Direction</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"description\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Detailed Description</FormLabel>\n                          <FormControl>\n                            <Textarea \n                              placeholder=\"Explain your proposal in detail, including benefits and implementation approach...\"\n                              className=\"h-32\"\n                              {...field}\n                              data-testid=\"input-proposal-description\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex justify-end space-x-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setIsDialogOpen(false)}\n                        data-testid=\"button-cancel-proposal\"\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        disabled={createProposalMutation.isPending}\n                        data-testid=\"button-submit-proposal\"\n                      >\n                        {createProposalMutation.isPending ? \"Creating...\" : \"Create Proposal\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          )}\n        </div>\n\n        <Tabs defaultValue=\"active\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"active\" data-testid=\"tab-active\">Active Proposals</TabsTrigger>\n            <TabsTrigger value=\"passed\" data-testid=\"tab-passed\">Passed</TabsTrigger>\n            <TabsTrigger value=\"rejected\" data-testid=\"tab-rejected\">Rejected</TabsTrigger>\n            <TabsTrigger value=\"analytics\" data-testid=\"tab-analytics\">Analytics</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"active\" className=\"mt-8\">\n            <div className=\"space-y-6\">\n              {proposalsLoading ? (\n                <div className=\"flex items-center justify-center p-12\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n                </div>\n              ) : proposals.filter(p => p.status === \"active\").length > 0 ? (\n                proposals\n                  .filter(p => p.status === \"active\")\n                  .map((proposal) => (\n                    <ProposalCard \n                      key={proposal.id} \n                      proposal={proposal}\n                      hasVoted={hasVoted(proposal.id)}\n                      onVote={(vote) => voteMutation.mutate({ proposalId: proposal.id, vote })}\n                      isVoting={voteMutation.isPending}\n                    />\n                  ))\n              ) : (\n                <div className=\"text-center text-muted-foreground p-12\">\n                  <Vote className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No Active Proposals</h3>\n                  <p>Be the first to shape our community's future!</p>\n                </div>\n              )}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"passed\" className=\"mt-8\">\n            <div className=\"space-y-6\">\n              {proposals\n                .filter(p => p.status === \"passed\")\n                .map((proposal) => (\n                  <ProposalCard \n                    key={proposal.id} \n                    proposal={proposal}\n                    hasVoted={hasVoted(proposal.id)}\n                    onVote={() => {}}\n                    isVoting={false}\n                    readonly={true}\n                  />\n                ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"rejected\" className=\"mt-8\">\n            <div className=\"space-y-6\">\n              {proposals\n                .filter(p => p.status === \"rejected\")\n                .map((proposal) => (\n                  <ProposalCard \n                    key={proposal.id} \n                    proposal={proposal}\n                    hasVoted={hasVoted(proposal.id)}\n                    onVote={() => {}}\n                    isVoting={false}\n                    readonly={true}\n                  />\n                ))}\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"analytics\" className=\"mt-8\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              <Card data-testid=\"governance-analytics-total\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Vote className=\"h-5 w-5\" />\n                    Total Proposals\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">{proposals.length}</div>\n                  <div className=\"text-sm text-muted-foreground\">All time</div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"governance-analytics-participation\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <Users className=\"h-5 w-5\" />\n                    Participation Rate\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">67%</div>\n                  <div className=\"text-sm text-muted-foreground\">Community engagement</div>\n                </CardContent>\n              </Card>\n\n              <Card data-testid=\"governance-analytics-success\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2\">\n                    <CheckCircle className=\"h-5 w-5\" />\n                    Success Rate\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">\n                    {proposals.length > 0 ? Math.round((proposals.filter(p => p.status === \"passed\").length / proposals.length) * 100) : 0}%\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">Passed proposals</div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      <Footer />\n    </div>\n  );\n}\n\ninterface ProposalCardProps {\n  proposal: Proposal;\n  hasVoted: boolean;\n  onVote: (vote: \"yes\" | \"no\") => void;\n  isVoting: boolean;\n  readonly?: boolean;\n}\n\nfunction ProposalCard({ proposal, hasVoted, onVote, isVoting, readonly = false }: ProposalCardProps) {\n  const totalVotes = proposal.yesVotes + proposal.noVotes;\n  const yesPercentage = totalVotes > 0 ? (proposal.yesVotes / totalVotes) * 100 : 0;\n  const noPercentage = totalVotes > 0 ? (proposal.noVotes / totalVotes) * 100 : 0;\n  const quorumProgress = (proposal.totalVotingPower / proposal.requiredQuorum) * 100;\n\n  const timeLeft = new Date(proposal.endDate).getTime() - Date.now();\n  const daysLeft = Math.max(0, Math.ceil(timeLeft / (1000 * 60 * 60 * 24)));\n\n  return (\n    <Card className=\"border-2\" data-testid={`proposal-${proposal.id}`}>\n      <CardHeader>\n        <div className=\"flex items-start justify-between\">\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              {proposal.type && getProposalTypeIcon(proposal.type)}\n              <Badge variant=\"outline\" className=\"text-xs\">\n                {proposal.type.charAt(0).toUpperCase() + proposal.type.slice(1)}\n              </Badge>\n              <Badge className={getStatusColor(proposal.status)}>\n                {proposal.status.charAt(0).toUpperCase() + proposal.status.slice(1)}\n              </Badge>\n            </div>\n            <CardTitle className=\"text-xl mb-2\" data-testid={`proposal-title-${proposal.id}`}>\n              {proposal.title}\n            </CardTitle>\n            <div className=\"flex items-center gap-4 text-sm text-muted-foreground\">\n              <div className=\"flex items-center gap-1\">\n                <Avatar className=\"h-5 w-5\">\n                  <AvatarImage src={proposal.author?.profileImageUrl || \"\"} />\n                  <AvatarFallback className=\"text-xs\">\n                    {(proposal.author?.firstName?.[0] || proposal.author?.email?.[0] || \"U\").toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n                <span>{proposal.author?.firstName || proposal.author?.email?.split('@')[0] || 'Anonymous'}</span>\n              </div>\n              <div className=\"flex items-center gap-1\">\n                <Clock className=\"h-4 w-4\" />\n                <span>{daysLeft} days left</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <p className=\"text-muted-foreground mb-6\" data-testid={`proposal-description-${proposal.id}`}>\n          {proposal.description}\n        </p>\n\n        {/* Voting Results */}\n        <div className=\"space-y-4 mb-6\">\n          <div>\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span className=\"text-green-600 font-medium\">Yes ({proposal.yesVotes})</span>\n              <span className=\"text-red-600 font-medium\">No ({proposal.noVotes})</span>\n            </div>\n            <div className=\"h-3 bg-muted rounded-full overflow-hidden\">\n              <div className=\"h-full flex\">\n                <div \n                  className=\"bg-green-500\" \n                  style={{ width: `${yesPercentage}%` }}\n                ></div>\n                <div \n                  className=\"bg-red-500\" \n                  style={{ width: `${noPercentage}%` }}\n                ></div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <div className=\"flex justify-between text-sm mb-2\">\n              <span>Quorum Progress</span>\n              <span>{Math.min(100, Math.round(quorumProgress))}%</span>\n            </div>\n            <Progress value={Math.min(100, quorumProgress)} className=\"h-2\" />\n          </div>\n        </div>\n\n        {/* Voting Buttons */}\n        {!readonly && proposal.status === \"active\" && (\n          <div className=\"flex gap-4\">\n            {hasVoted ? (\n              <div className=\"flex-1 text-center py-2 text-muted-foreground\">\n                <CheckCircle className=\"h-4 w-4 inline mr-1\" />\n                You have voted on this proposal\n              </div>\n            ) : (\n              <>\n                <Button\n                  onClick={() => onVote(\"yes\")}\n                  disabled={isVoting}\n                  className=\"flex-1 bg-green-600 hover:bg-green-700\"\n                  data-testid={`button-vote-yes-${proposal.id}`}\n                >\n                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                  Vote Yes\n                </Button>\n                <Button\n                  onClick={() => onVote(\"no\")}\n                  disabled={isVoting}\n                  className=\"flex-1 bg-red-600 hover:bg-red-700\"\n                  data-testid={`button-vote-no-${proposal.id}`}\n                >\n                  <XCircle className=\"h-4 w-4 mr-2\" />\n                  Vote No\n                </Button>\n              </>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nfunction getProposalTypeIcon(type: string) {\n  switch (type) {\n    case \"feature\": return <Lightbulb className=\"h-4 w-4\" />;\n    case \"economic\": return <Coins className=\"h-4 w-4\" />;\n    case \"governance\": return <Settings className=\"h-4 w-4\" />;\n    case \"story\": return <MessageSquare className=\"h-4 w-4\" />;\n    default: return <Vote className=\"h-4 w-4\" />;\n  }\n}\n\nfunction getStatusColor(status: string) {\n  switch (status) {\n    case \"active\": return \"bg-blue-500\";\n    case \"passed\": return \"bg-green-500\";\n    case \"rejected\": return \"bg-red-500\";\n    case \"pending\": return \"bg-yellow-500\";\n    default: return \"bg-gray-500\";\n  }\n}","size_bytes":21338},"client/src/components/notifications.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from \"@/components/ui/sheet\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { \n  Bell, Vote, Trophy, Coins, MessageSquare, Zap,\n  CheckCircle, X, Clock, Star, Users, Gift\n} from \"lucide-react\";\n\ninterface Notification {\n  id: string;\n  userId: string;\n  type: \"challenge\" | \"vote\" | \"nft\" | \"trade\" | \"community\" | \"governance\" | \"reward\";\n  title: string;\n  message: string;\n  data?: any;\n  isRead: boolean;\n  createdAt: string;\n}\n\nexport default function NotificationCenter() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: notifications = [] } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    enabled: !!user,\n    refetchInterval: 30000, // Check every 30 seconds\n  });\n\n  const unreadCount = notifications.filter(n => !n.isRead).length;\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const markAllAsReadMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"PATCH\", \"/api/notifications/mark-all-read\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      await apiRequest(\"DELETE\", `/api/notifications/${notificationId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  // Show toast for new notifications\n  useEffect(() => {\n    const recentNotifications = notifications.filter(n => \n      !n.isRead && new Date(n.createdAt).getTime() > Date.now() - 60000 // Last minute\n    );\n\n    recentNotifications.forEach(notification => {\n      if (notification.type === \"reward\" || notification.type === \"challenge\") {\n        toast({\n          title: notification.title,\n          description: notification.message,\n          duration: 5000,\n        });\n      }\n    });\n  }, [notifications, toast]);\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"challenge\": return <Trophy className=\"h-5 w-5 text-yellow-500\" />;\n      case \"vote\": return <Vote className=\"h-5 w-5 text-blue-500\" />;\n      case \"nft\": return <Star className=\"h-5 w-5 text-purple-500\" />;\n      case \"trade\": return <Coins className=\"h-5 w-5 text-green-500\" />;\n      case \"community\": return <Users className=\"h-5 w-5 text-orange-500\" />;\n      case \"governance\": return <MessageSquare className=\"h-5 w-5 text-indigo-500\" />;\n      case \"reward\": return <Gift className=\"h-5 w-5 text-pink-500\" />;\n      default: return <Bell className=\"h-5 w-5 text-muted-foreground\" />;\n    }\n  };\n\n  const formatTimeAgo = (timestamp: string) => {\n    const diff = Date.now() - new Date(timestamp).getTime();\n    const minutes = Math.floor(diff / 60000);\n    const hours = Math.floor(minutes / 60);\n    const days = Math.floor(hours / 24);\n\n    if (days > 0) return `${days}d ago`;\n    if (hours > 0) return `${hours}h ago`;\n    if (minutes > 0) return `${minutes}m ago`;\n    return \"Just now\";\n  };\n\n  if (!user) return null;\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button\n          variant=\"outline\" \n          size=\"icon\"\n          className=\"relative\"\n          data-testid=\"button-notifications\"\n        >\n          <Bell className=\"h-4 w-4\" />\n          {unreadCount > 0 && (\n            <Badge \n              className=\"absolute -top-2 -right-2 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n              data-testid=\"notification-count\"\n            >\n              {unreadCount > 99 ? \"99+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </SheetTrigger>\n\n      <SheetContent className=\"w-96 sm:w-[540px]\">\n        <SheetHeader>\n          <div className=\"flex items-center justify-between\">\n            <SheetTitle className=\"flex items-center gap-2\">\n              <Bell className=\"h-5 w-5\" />\n              Notifications\n            </SheetTitle>\n            {notifications.length > 0 && (\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => markAllAsReadMutation.mutate()}\n                disabled={markAllAsReadMutation.isPending}\n                data-testid=\"button-mark-all-read\"\n              >\n                Mark all read\n              </Button>\n            )}\n          </div>\n        </SheetHeader>\n\n        <div className=\"mt-6\">\n          {notifications.length === 0 ? (\n            <div className=\"text-center text-muted-foreground p-8\">\n              <Bell className=\"h-16 w-16 mx-auto mb-4 opacity-50\" />\n              <h3 className=\"text-lg font-semibold mb-2\">No notifications</h3>\n              <p>You're all caught up! New notifications will appear here.</p>\n            </div>\n          ) : (\n            <ScrollArea className=\"h-[calc(100vh-120px)]\">\n              <div className=\"space-y-3\">\n                {notifications.map((notification) => (\n                  <Card \n                    key={notification.id} \n                    className={`cursor-pointer transition-colors ${\n                      notification.isRead ? 'opacity-75' : 'bg-muted/30'\n                    }`}\n                    onClick={() => !notification.isRead && markAsReadMutation.mutate(notification.id)}\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"flex-shrink-0 mt-0.5\">\n                          {getNotificationIcon(notification.type)}\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <h4 className=\"font-semibold text-sm truncate\">\n                              {notification.title}\n                            </h4>\n                            <div className=\"flex items-center gap-1\">\n                              <span className=\"text-xs text-muted-foreground\">\n                                {formatTimeAgo(notification.createdAt)}\n                              </span>\n                              {!notification.isRead && (\n                                <div className=\"w-2 h-2 bg-blue-500 rounded-full\"></div>\n                              )}\n                            </div>\n                          </div>\n                          <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                            {notification.message}\n                          </p>\n                          {notification.type && (\n                            <Badge variant=\"outline\" className=\"text-xs mt-2\">\n                              {notification.type}\n                            </Badge>\n                          )}\n                        </div>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          className=\"h-6 w-6\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            deleteNotificationMutation.mutate(notification.id);\n                          }}\n                          data-testid={`button-delete-notification-${notification.id}`}\n                        >\n                          <X className=\"h-3 w-3\" />\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          )}\n        </div>\n      </SheetContent>\n    </Sheet>\n  );\n}\n\n// Real-time notification hook for other components\nexport function useNotifications() {\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const createNotification = (notification: Omit<Notification, \"id\" | \"userId\" | \"isRead\" | \"createdAt\">) => {\n    // Add notification to backend\n    apiRequest(\"POST\", \"/api/notifications\", notification);\n    \n    // Invalidate cache to refresh\n    queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n  };\n\n  return {\n    createNotification,\n  };\n}\n\n// In-app notification component for immediate feedback\ninterface InAppNotificationProps {\n  type: \"success\" | \"info\" | \"warning\" | \"error\";\n  title: string;\n  message: string;\n  onDismiss: () => void;\n  autoHide?: boolean;\n}\n\nexport function InAppNotification({ \n  type, \n  title, \n  message, \n  onDismiss, \n  autoHide = true \n}: InAppNotificationProps) {\n  useEffect(() => {\n    if (autoHide) {\n      const timer = setTimeout(onDismiss, 5000);\n      return () => clearTimeout(timer);\n    }\n  }, [autoHide, onDismiss]);\n\n  const getTypeStyles = () => {\n    switch (type) {\n      case \"success\": return \"bg-green-500/10 border-green-500/20 text-green-700 dark:text-green-300\";\n      case \"info\": return \"bg-blue-500/10 border-blue-500/20 text-blue-700 dark:text-blue-300\";\n      case \"warning\": return \"bg-yellow-500/10 border-yellow-500/20 text-yellow-700 dark:text-yellow-300\";\n      case \"error\": return \"bg-red-500/10 border-red-500/20 text-red-700 dark:text-red-300\";\n      default: return \"bg-muted/10 border-border text-foreground\";\n    }\n  };\n\n  const getIcon = () => {\n    switch (type) {\n      case \"success\": return <CheckCircle className=\"h-5 w-5\" />;\n      case \"info\": return <Bell className=\"h-5 w-5\" />;\n      case \"warning\": return <Clock className=\"h-5 w-5\" />;\n      case \"error\": return <X className=\"h-5 w-5\" />;\n      default: return <Bell className=\"h-5 w-5\" />;\n    }\n  };\n\n  return (\n    <div className={`fixed top-20 right-4 z-50 max-w-sm border-2 rounded-lg p-4 shadow-lg ${getTypeStyles()}`}>\n      <div className=\"flex items-start gap-3\">\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-sm mb-1\">{title}</h4>\n          <p className=\"text-sm opacity-90\">{message}</p>\n        </div>\n        <Button\n          variant=\"ghost\"\n          size=\"icon\"\n          className=\"h-6 w-6\"\n          onClick={onDismiss}\n        >\n          <X className=\"h-3 w-3\" />\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":11139},"server/telegram-bot.ts":{"content":"import TelegramBot from 'node-telegram-bot-api';\nimport { storage } from './storage';\nimport { getChatResponse } from './openai';\nimport { getDailyRewardStatus } from './daily-rewards';\n\ninterface TelegramUserData {\n  telegramId: string;\n  userId?: string;\n  firstName?: string;\n  lastName?: string;\n  username?: string;\n  isLinked: boolean;\n}\n\nclass GrokAniTelegramBot {\n  private bot: TelegramBot | null = null;\n  private isInitialized = false;\n\n  async initialize() {\n    if (!process.env.TELEGRAM_BOT_TOKEN) {\n      console.log('Telegram bot token not found. Bot features disabled.');\n      return;\n    }\n\n    try {\n      this.bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });\n      await this.setupCommands();\n      await this.setupWebhook();\n      this.isInitialized = true;\n      console.log('✅ Telegram bot initialized successfully');\n    } catch (error) {\n      console.error('❌ Failed to initialize Telegram bot:', error);\n    }\n  }\n\n  private async setupCommands() {\n    if (!this.bot) return;\n\n    // Set bot commands for Telegram UI\n    await this.bot.setMyCommands([\n      { command: 'start', description: 'Start using the bot and link your account' },\n      { command: 'link', description: 'Link your Telegram to platform account' },\n      { command: 'grok', description: 'Chat with Grok (logic AI)' },\n      { command: 'ani', description: 'Chat with Ani (emotion AI)' },\n      { command: 'stats', description: 'View your platform stats' },\n      { command: 'challenges', description: 'See available challenges' },\n      { command: 'leaderboard', description: 'View faction rankings' },\n      { command: 'help', description: 'Show all available commands' },\n    ]);\n  }\n\n  private async setupWebhook() {\n    if (!this.bot || !process.env.REPLIT_DOMAINS) return;\n\n    const domain = process.env.REPLIT_DOMAINS.split(',')[0];\n    const webhookUrl = `https://${domain}/api/telegram/webhook`;\n    \n    try {\n      await this.bot.setWebHook(webhookUrl);\n      console.log(`📡 Telegram webhook set to: ${webhookUrl}`);\n    } catch (error) {\n      console.error('Failed to set webhook:', error);\n    }\n  }\n\n  async handleWebhook(body: any) {\n    if (!this.bot || !this.isInitialized) return;\n\n    try {\n      await this.processUpdate(body);\n    } catch (error) {\n      console.error('Error processing Telegram update:', error);\n    }\n  }\n\n  private async processUpdate(update: any) {\n    if (!this.bot) return;\n\n    // Handle callback queries (button presses)\n    if (update.callback_query) {\n      await this.handleCallbackQuery(update.callback_query);\n      return;\n    }\n\n    const message = update.message;\n    if (!message) return;\n\n    const chatId = message.chat.id;\n    const text = message.text;\n    const user = message.from;\n\n    // Store or update telegram user data\n    await this.saveTelegramUser({\n      telegramId: user.id.toString(),\n      firstName: user.first_name,\n      lastName: user.last_name,\n      username: user.username,\n      isLinked: false\n    });\n\n    // Handle commands\n    if (text?.startsWith('/')) {\n      await this.handleCommand(chatId, text, user);\n    } else {\n      // Check if user is waiting for PIN input during registration\n      if (this.waitingForPin?.has(chatId)) {\n        const registrationData = this.waitingForPin.get(chatId);\n        await this.handlePinInput(chatId, text, registrationData);\n      } \n      // Check if user is waiting for username input during registration\n      else if (this.waitingForUsername?.has(chatId)) {\n        const registrationData = this.waitingForUsername.get(chatId);\n        await this.handleUsernameInput(chatId, text, registrationData);\n      } else {\n        // Handle regular messages as AI chat\n        await this.handleAIChat(chatId, text, user);\n      }\n    }\n  }\n\n  private async handleCommand(chatId: number, command: string, user: any) {\n    if (!this.bot) return;\n\n    const cmd = command.split(' ')[0].toLowerCase();\n    const args = command.split(' ').slice(1).join(' ');\n\n    switch (cmd) {\n      case '/start':\n        await this.handleStartCommand(chatId, user);\n        break;\n      case '/link':\n        await this.handleLinkCommand(chatId, args, user);\n        break;\n      case '/grok':\n        await this.handleGrokCommand(chatId, args, user);\n        break;\n      case '/ani':\n        await this.handleAniCommand(chatId, args, user);\n        break;\n      case '/stats':\n        await this.handleStatsCommand(chatId, user);\n        break;\n      case '/challenges':\n        await this.handleChallengesCommand(chatId, user);\n        break;\n      case '/leaderboard':\n        await this.handleLeaderboardCommand(chatId, user);\n        break;\n      case '/help':\n        await this.handleHelpCommand(chatId);\n        break;\n      default:\n        await this.sendMessage(chatId, 'Unknown command. Type /help to see available commands.');\n    }\n  }\n\n  private async handleStartCommand(chatId: number, user: any) {\n    const welcomeMessage = `🌟 *Welcome to Grok & Ani Bot!* 🌟\n\n🤖 *Your Gateway to the Conscious Coin Ecosystem*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n✨ *What You Can Do Here:*\n\n🧠 *Chat with Grok* - Logic & Analysis AI\n❤️ *Chat with Ani* - Emotion & Creativity AI\n📊 *View Your Stats* - Track your progress\n🎯 *Take Challenges* - Earn rewards\n🏆 *Check Leaderboards* - See faction rankings\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🚀 *Get started by linking your account!*\n\nUse the buttons below for quick actions:`;\n\n    const keyboard = {\n      inline_keyboard: [\n        [\n          { text: '🔗 Link Account', callback_data: 'show_link_instructions' },\n          { text: '📊 My Stats', callback_data: 'check_stats' }\n        ],\n        [\n          { text: '🧠 Chat with Grok', callback_data: 'start_grok_chat' },\n          { text: '❤️ Chat with Ani', callback_data: 'start_ani_chat' }\n        ],\n        [\n          { text: '🎯 Challenges', callback_data: 'view_challenges' },\n          { text: '🏆 Leaderboard', callback_data: 'view_leaderboard' }\n        ],\n        [\n          { text: '🌐 Open Web App', callback_data: 'open_web_app' },\n          { text: '❓ Help & Commands', callback_data: 'show_help' }\n        ]\n      ]\n    };\n\n    await this.sendMessageWithKeyboard(chatId, welcomeMessage, keyboard);\n  }\n\n  private async handleLinkCommand(chatId: number, solanaAddress: string, user: any) {\n    if (!solanaAddress) {\n      await this.sendMessage(chatId, 'Please provide your Solana address: /link [your-solana-address]');\n      return;\n    }\n\n    try {\n      // Find user by Solana address\n      const platformUser = await storage.getUserBySolanaAddress(solanaAddress.trim());\n      if (!platformUser) {\n        // No account found - offer registration\n        const registerKeyboard = {\n          inline_keyboard: [\n            [\n              { text: '📝 Register New Account', callback_data: `register_start:${solanaAddress.trim()}` }\n            ],\n            [\n              { text: '❌ Cancel', callback_data: 'cancel_registration' }\n            ]\n          ]\n        };\n\n        await this.sendMessageWithKeyboard(chatId, \n          `❌ No account found with Solana address: ${solanaAddress}\n\nWould you like to create a new account? Registration requires:\n• Your Solana address\n• A 4-digit PIN for security\n• Choosing your faction (Grok or Ani)\n\nClick below to start registration:`, registerKeyboard);\n        return;\n      }\n\n      // Link telegram account\n      await storage.linkTelegramAccount(platformUser.id, user.id.toString());\n      \n      await this.sendMessage(chatId, `✅ Account linked successfully!\n      \n👤 Welcome ${platformUser.firstName || 'User'}!\n🎯 Faction: ${platformUser.faction || 'Not selected'}\n⭐ Level: ${platformUser.level || 1}\n💰 GAC Balance: ${platformUser.gacBalance || 0}\n\nYou can now use all bot features!`);\n\n    } catch (error) {\n      console.error('Link error:', error);\n      await this.sendMessage(chatId, '❌ Failed to link account. Please try again later.');\n    }\n  }\n\n  private async handleGrokCommand(chatId: number, message: string, user: any) {\n    if (!message) {\n      await this.sendMessage(chatId, '🧠 Ask Grok something: /grok What is the meaning of logic?');\n      return;\n    }\n\n    try {\n      await this.sendMessage(chatId, '🧠 Grok is thinking...');\n      \n      const response = await getChatResponse(message, 'grok');\n      await this.sendMessage(chatId, `🧠 **Grok:** ${response}`);\n      \n      // Award points for AI interaction\n      await this.awardInteractionPoints(user.id.toString(), 'grok');\n      \n    } catch (error) {\n      console.error('Grok chat error:', error);\n      await this.sendMessage(chatId, '❌ Sorry, Grok is currently unavailable. Please try again later.');\n    }\n  }\n\n  private async handleAniCommand(chatId: number, message: string, user: any) {\n    if (!message) {\n      await this.sendMessage(chatId, '❤️ Share something with Ani: /ani How do you feel about creativity?');\n      return;\n    }\n\n    try {\n      await this.sendMessage(chatId, '❤️ Ani is feeling...');\n      \n      const response = await getChatResponse(message, 'ani');\n      await this.sendMessage(chatId, `❤️ **Ani:** ${response}`);\n      \n      // Award points for AI interaction\n      await this.awardInteractionPoints(user.id.toString(), 'ani');\n      \n    } catch (error) {\n      console.error('Ani chat error:', error);\n      await this.sendMessage(chatId, '❌ Sorry, Ani is currently unavailable. Please try again later.');\n    }\n  }\n\n  private async handleStatsCommand(chatId: number, user: any) {\n    try {\n      const linkedUser = await storage.getTelegramLinkedUser(user.id.toString());\n      if (!linkedUser) {\n        await this.sendMessage(chatId, '❌ Please link your account first with /link [solana-address]');\n        return;\n      }\n\n      const stats = `📊 **Your Stats**\n\n👤 Name: ${linkedUser.firstName || 'User'}\n🎯 Faction: ${linkedUser.faction || 'Not selected'}\n⭐ Level: ${linkedUser.level || 1}\n💰 GAC Balance: ${linkedUser.gacBalance || 0}\n🧠 Grok Points: ${linkedUser.grokPoints || 0}\n❤️ Ani Points: ${linkedUser.aniPoints || 0}\n🏆 Total XP: ${linkedUser.totalXP || 0}`;\n\n      await this.sendMessage(chatId, stats);\n      \n    } catch (error) {\n      console.error('Stats error:', error);\n      await this.sendMessage(chatId, '❌ Failed to fetch stats. Please try again later.');\n    }\n  }\n\n  private async handleChallengesCommand(chatId: number, user: any) {\n    try {\n      const challenges = await storage.getActiveChallenges();\n      \n      if (challenges.length === 0) {\n        await this.sendMessage(chatId, '🎯 No active challenges at the moment. Check back later!');\n        return;\n      }\n\n      let message = '🎯 **Active Challenges**\\n\\n';\n      challenges.slice(0, 5).forEach((challenge: any, index: number) => {\n        message += `${index + 1}. **${challenge.title}**\\n`;\n        message += `   ${challenge.faction === 'grok' ? '🧠' : '❤️'} ${challenge.faction.toUpperCase()} faction\\n`;\n        message += `   🏆 Reward: ${challenge.rewardAmount} ${challenge.rewardType}\\n\\n`;\n      });\n\n      message += '💻 Visit the platform to participate in challenges!';\n      await this.sendMessage(chatId, message);\n      \n    } catch (error) {\n      console.error('Challenges error:', error);\n      await this.sendMessage(chatId, '❌ Failed to fetch challenges. Please try again later.');\n    }\n  }\n\n  private async handleLeaderboardCommand(chatId: number, user: any) {\n    try {\n      const grokLeaders = await storage.getLeaderboard({ \n        faction: 'grok', \n        category: 'points', \n        period: 'all-time', \n        limit: 3 \n      });\n      \n      const aniLeaders = await storage.getLeaderboard({ \n        faction: 'ani', \n        category: 'points', \n        period: 'all-time', \n        limit: 3 \n      });\n\n      let message = '🏆 **Faction Leaderboards**\\n\\n';\n      \n      message += '🧠 **Grok Leaders:**\\n';\n      grokLeaders.forEach((user: any, index: number) => {\n        message += `${index + 1}. ${user.firstName || 'Unknown'} - ${user.grokPoints || 0} pts\\n`;\n      });\n      \n      message += '\\n❤️ **Ani Leaders:**\\n';\n      aniLeaders.forEach((user: any, index: number) => {\n        message += `${index + 1}. ${user.firstName || 'Unknown'} - ${user.aniPoints || 0} pts\\n`;\n      });\n\n      await this.sendMessage(chatId, message);\n      \n    } catch (error) {\n      console.error('Leaderboard error:', error);\n      await this.sendMessage(chatId, '❌ Failed to fetch leaderboard. Please try again later.');\n    }\n  }\n\n  private async handleHelpCommand(chatId: number) {\n    const helpMessage = `❓ *Bot Commands & Help*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🔧 *Account Commands:*\n• \\`/start\\` - Welcome & main menu\n• \\`/link [address]\\` - Link your wallet\n\n🤖 *AI Chat Commands:*\n• \\`/grok [message]\\` - Chat with Grok (Logic AI)\n• \\`/ani [message]\\` - Chat with Ani (Emotion AI)\n\n📊 *Platform Commands:*\n• \\`/stats\\` - View your account stats\n• \\`/challenges\\` - See active challenges\n• \\`/leaderboard\\` - View faction rankings\n• \\`/help\\` - Show this help message\n\n━━━━━━━━━━━━━━━━━━━━━\n\n💡 *Pro Tips:*\n✅ Link your account to unlock all features\n🎯 Chat with AIs to earn faction points\n🏆 Complete challenges for bigger rewards\n💎 Visit the platform for full functionality\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🚀 *Ready to start your journey?*`;\n\n    const keyboard = {\n      inline_keyboard: [\n        [\n          { text: '🔗 Link Account', callback_data: 'show_link_instructions' },\n          { text: '📊 My Stats', callback_data: 'check_stats' }\n        ],\n        [\n          { text: '🧠 Chat Grok', callback_data: 'start_grok_chat' },\n          { text: '❤️ Chat Ani', callback_data: 'start_ani_chat' }\n        ],\n        [\n          { text: '🌐 Open Web App', callback_data: 'open_web_app' }\n        ]\n      ]\n    };\n\n    await this.sendMessageWithKeyboard(chatId, helpMessage, keyboard);\n  }\n\n  private async handleAIChat(chatId: number, message: string, user: any) {\n    if (!message || message.length < 3) return;\n\n    // Default to last used AI or Grok\n    await this.sendMessage(chatId, `💭 Chatting with Grok... (Use /grok or /ani for specific AIs)`);\n    \n    try {\n      const response = await getChatResponse(message, 'grok');\n      await this.sendMessage(chatId, `🧠 **Grok:** ${response}`);\n      await this.awardInteractionPoints(user.id.toString(), 'grok');\n    } catch (error) {\n      await this.sendMessage(chatId, '❌ Sorry, I couldn\\'t process that. Try using /grok [message] or /ani [message]');\n    }\n  }\n\n  private async awardInteractionPoints(telegramId: string, aiType: 'grok' | 'ani') {\n    try {\n      const linkedUser = await storage.getTelegramLinkedUser(telegramId);\n      if (linkedUser) {\n        await storage.addUserPoints(linkedUser.id, aiType, 5); // 5 points per interaction\n      }\n    } catch (error) {\n      console.error('Error awarding points:', error);\n    }\n  }\n\n  private async saveTelegramUser(userData: TelegramUserData) {\n    try {\n      await storage.upsertTelegramUser(userData);\n    } catch (error) {\n      console.error('Error saving telegram user:', error);\n    }\n  }\n\n  async sendMessage(chatId: number, text: string) {\n    if (!this.bot) return;\n    \n    try {\n      await this.bot.sendMessage(chatId, text, { \n        parse_mode: 'Markdown',\n        disable_web_page_preview: true \n      });\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  async sendMessageWithKeyboard(chatId: number, text: string, keyboard: any) {\n    if (!this.bot) return;\n    \n    try {\n      await this.bot.sendMessage(chatId, text, {\n        parse_mode: 'Markdown',\n        reply_markup: keyboard,\n        disable_web_page_preview: true\n      });\n    } catch (error) {\n      console.error('Error sending telegram message with keyboard:', error);\n    }\n  }\n\n  private async handleCallbackQuery(callbackQuery: any) {\n    if (!this.bot) return;\n\n    const chatId = callbackQuery.message.chat.id;\n    const data = callbackQuery.data;\n    const user = callbackQuery.from;\n\n    // Answer the callback query to remove loading state\n    await this.bot.answerCallbackQuery(callbackQuery.id);\n\n    switch (data) {\n      case 'show_link_instructions':\n        await this.showLinkInstructions(chatId);\n        break;\n      case 'check_stats':\n        await this.handleStatsCommand(chatId, user);\n        break;\n      case 'start_grok_chat':\n        await this.startGrokChat(chatId);\n        break;\n      case 'start_ani_chat':\n        await this.startAniChat(chatId);\n        break;\n      case 'view_challenges':\n        await this.handleChallengesCommand(chatId, user);\n        break;\n      case 'view_leaderboard':\n        await this.handleLeaderboardCommand(chatId, user);\n        break;\n      case 'show_help':\n        await this.handleHelpCommand(chatId);\n        break;\n      case 'open_web_app':\n        await this.showWebAppAccess(chatId);\n        break;\n      case 'back_to_start':\n        await this.handleStartCommand(chatId, user);\n        break;\n      case 'cancel_registration':\n        // Clean up all registration states\n        this.waitingForPin.delete(chatId);\n        this.waitingForUsername.delete(chatId);\n        this.pendingRegistrations.delete(chatId);\n        await this.sendMessage(chatId, '❌ Registration cancelled. Use /link [your-solana-address] to try again.');\n        break;\n      default:\n        // Handle registration callbacks\n        if (data.startsWith('register_start:')) {\n          const solanaAddress = data.split(':')[1];\n          await this.startRegistration(chatId, solanaAddress, user);\n        } else if (data.startsWith('register_faction:')) {\n          const [, faction, registrationChatId] = data.split(':');\n          await this.completeRegistration(parseInt(registrationChatId), faction as 'grok' | 'ani', user);\n        } else {\n          await this.sendMessage(chatId, '❓ Unknown action. Please try again.');\n        }\n    }\n  }\n\n  private async showLinkInstructions(chatId: number) {\n    const message = `🔗 *Link Your Account*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n💰 *To link your Telegram to your platform account:*\n\n1️⃣ Copy your Solana wallet address\n2️⃣ Send this command:\n\n\\`/link [your-solana-address]\\`\n\n📝 *Example:*\n\\`/link 7xKF4W8gZHXkqH5PQQTw5k8N9YjVfN3mH6LpR2wGjKtN\\`\n\n━━━━━━━━━━━━━━━━━━━━━\n\n✅ Once linked, you'll have access to all bot features!`;\n\n    await this.sendMessage(chatId, message);\n  }\n\n  private async startGrokChat(chatId: number) {\n    const message = `🧠 *Grok Chat Mode Activated*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🤖 *Ready for logical analysis and strategic thinking!*\n\n💭 *Just send me a message or use:*\n\\`/grok [your question]\\`\n\n📊 *Example questions:*\n• \"What's the best strategy for...?\"\n• \"Analyze this problem...\"\n• \"How does X work technically?\"\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🎯 *Each interaction earns you Grok faction points!*`;\n\n    await this.sendMessage(chatId, message);\n  }\n\n  private async startAniChat(chatId: number) {\n    const message = `❤️ *Ani Chat Mode Activated*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n💖 *Ready for creative inspiration and emotional connection!*\n\n💭 *Just send me a message or use:*\n\\`/ani [your thoughts]\\`\n\n🎨 *Example topics:*\n• \"I'm feeling...\"\n• \"Help me be creative with...\"\n• \"What inspires you about...?\"\n\n━━━━━━━━━━━━━━━━━━━━━\n\n✨ *Each interaction earns you Ani faction points!*`;\n\n    await this.sendMessage(chatId, message);\n  }\n\n  private async showWebAppAccess(chatId: number) {\n    const domain = process.env.REPLIT_DOMAINS?.split(',')[0] || 'your-platform-url.com';\n    const webAppUrl = `https://${domain}`;\n    \n    const message = `🌐 *Access Full Web Platform*\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🚀 *Experience the complete Grok & Ani ecosystem on the web!*\n\n✨ *Web Platform Features:*\n• 🎯 Complete challenges with full interface\n• 🎨 Advanced AI chat with conversation history\n• 🏆 Detailed leaderboards and analytics\n• 💰 Manage your GAC tokens and NFTs\n• 📊 View comprehensive stats dashboard\n• 🗳️ Participate in story voting\n• 👥 Join community discussions\n\n━━━━━━━━━━━━━━━━━━━━━\n\n🔗 *Platform URL:*\n${webAppUrl}\n\n💡 *Tip:* Link your account first for seamless access!`;\n\n    const keyboard = {\n      inline_keyboard: [\n        [\n          { text: '🌐 Open Web Platform', web_app: { url: webAppUrl } }\n        ],\n        [\n          { text: '🔗 Link Account First', callback_data: 'show_link_instructions' },\n          { text: '🏠 Back to Menu', callback_data: 'back_to_start' }\n        ]\n      ]\n    };\n\n    await this.sendMessageWithKeyboard(chatId, message, keyboard);\n  }\n\n  private waitingForPin: Map<number, any> = new Map();\n  private waitingForUsername: Map<number, any> = new Map();\n  private pendingRegistrations: Map<number, any> = new Map();\n\n  private async startRegistration(chatId: number, solanaAddress: string, user: any) {\n    await this.sendMessage(chatId, `📝 **Starting Registration**\n\n🔐 Please reply with a 4-digit PIN for your account security.\n\n📱 **Example:** 1234\n\nThis PIN will be used to secure your account and verify transactions.\n\n📝 Reply with your PIN now:`);\n\n    // Store registration state\n    this.waitingForPin.set(chatId, { solanaAddress, telegramUser: user });\n  }\n\n  private async handlePinInput(chatId: number, pin: string, registrationData: any) {\n    if (!/^\\d{4}$/.test(pin)) {\n      await this.sendMessage(chatId, '❌ Invalid PIN format. Please enter exactly 4 digits (e.g., 1234):');\n      return;\n    }\n\n    // Store PIN and ask for username\n    this.waitingForUsername.set(chatId, {\n      ...registrationData,\n      pin: pin\n    });\n\n    await this.sendMessage(chatId, `✅ PIN set successfully!\n\n👤 **Choose Your Username**\n\nPlease reply with your desired username for the platform.\n\n📝 **Requirements:**\n• 3-20 characters\n• Letters, numbers, and underscores only\n• Must be unique\n\n💡 **Example:** CryptoMaster_2024\n\n📱 Reply with your username now:`);\n\n    // Clear PIN waiting state\n    this.waitingForPin.delete(chatId);\n  }\n\n  private async handleUsernameInput(chatId: number, username: string, registrationData: any) {\n    // Validate username format\n    if (!/^[a-zA-Z0-9_]{3,20}$/.test(username)) {\n      await this.sendMessage(chatId, '❌ Invalid username format. Please use 3-20 characters (letters, numbers, and underscores only):');\n      return;\n    }\n\n    // TODO: Check if username already exists once storage method is implemented\n    // For now, we'll allow any valid username\n\n    // Store username and show faction selection\n    this.pendingRegistrations.set(chatId, {\n      ...registrationData,\n      username: username\n    });\n\n    const factionKeyboard = {\n      inline_keyboard: [\n        [\n          { text: '🧠 Join Grok (Logic)', callback_data: `register_faction:grok:${chatId}` }\n        ],\n        [\n          { text: '❤️ Join Ani (Emotion)', callback_data: `register_faction:ani:${chatId}` }\n        ],\n        [\n          { text: '❌ Cancel', callback_data: 'cancel_registration' }\n        ]\n      ]\n    };\n\n    await this.sendMessageWithKeyboard(chatId, `✅ Username \"${username}\" is available!\n\n🎯 **Choose Your Faction**\n\n🧠 **Grok (Logic AI):**\n• Analytical thinking and problem-solving\n• Strategic planning and optimization\n• Technical analysis and data insights\n\n❤️ **Ani (Emotion AI):**\n• Creative expression and intuition\n• Emotional intelligence and empathy\n• Artistic inspiration and storytelling\n\n🤔 **Which faction resonates with you?**`, factionKeyboard);\n\n    // Clear username waiting state\n    this.waitingForUsername.delete(chatId);\n  }\n\n  private async completeRegistration(chatId: number, faction: 'grok' | 'ani', user: any) {\n    try {\n      const regData = this.pendingRegistrations.get(chatId);\n      if (!regData) {\n        await this.sendMessage(chatId, '❌ Registration session expired. Please start over with /link command.');\n        return;\n      }\n\n      // Create new user account\n      const userData = {\n        profileName: regData.username || user.first_name || 'Telegram User',\n        solanaAddress: regData.solanaAddress.trim(),\n        pin: regData.pin,\n        faction: faction\n      };\n\n      const newUser = await storage.createUser(userData);\n      \n      // Link telegram account\n      await storage.linkTelegramAccount(newUser.id, user.id.toString());\n\n      const factionEmoji = faction === 'grok' ? '🧠' : '❤️';\n      const factionName = faction === 'grok' ? 'Grok (Logic)' : 'Ani (Emotion)';\n\n      await this.sendMessage(chatId, `🎉 **Registration Complete!**\n\n✅ Account created successfully!\n👤 Name: ${userData.profileName}\n🎯 Faction: ${factionEmoji} ${factionName}\n💰 Starting Balance: 100 GAC\n⭐ Level: 1\n\n🚀 **You can now:**\n• Chat with ${faction === 'grok' ? 'Grok' : 'Ani'} using /${faction} [message]\n• View your stats with /stats\n• Check challenges with /challenges\n• Access the full platform features\n\nWelcome to the Conscious Coin Project! 🌟`);\n\n      // Clean up registration state\n      this.pendingRegistrations.delete(chatId);\n      this.waitingForPin.delete(chatId);\n\n    } catch (error) {\n      console.error('Registration error:', error);\n      await this.sendMessage(chatId, '❌ Registration failed. Please try again later or contact support.');\n    }\n  }\n\n  async sendNotification(telegramId: string, message: string) {\n    if (!this.bot) return;\n    \n    try {\n      await this.bot.sendMessage(parseInt(telegramId), message, {\n        parse_mode: 'Markdown',\n        disable_web_page_preview: true\n      });\n    } catch (error) {\n      console.error('Error sending notification:', error);\n    }\n  }\n\n  async sendDailyRewardReminder(telegramId: string, userId: string) {\n    if (!this.bot) return;\n    \n    try {\n      const rewardStatus = await getDailyRewardStatus(userId);\n      \n      if (rewardStatus.canClaim && rewardStatus.nextReward) {\n        const { coins, xp, badge } = rewardStatus.nextReward;\n        const streakEmoji = rewardStatus.currentStreak >= 7 ? \"🔥\" : \"📅\";\n        const badgeText = badge ? `\\n🏆 **Special Reward**: ${badge}` : \"\";\n        \n        const message = `${streakEmoji} **Daily Reward Available!**\n\n💰 **Today's Reward:**\n• ${coins} GAC Coins\n• ${xp} XP Points${badgeText}\n\n⚡ **Current Streak:** ${rewardStatus.currentStreak} days\n\nDon't lose your streak! Claim your reward now! 🎯`;\n\n        // Generate authentication token for web app\n        const webAppUrl = await this.generateWebAppUrl(telegramId);\n\n        await this.sendMessageWithKeyboard(parseInt(telegramId), message, {\n          inline_keyboard: [[{\n            text: \"🎁 Claim Reward\",\n            web_app: { url: webAppUrl }\n          }]]\n        });\n      }\n    } catch (error) {\n      console.error('Error sending daily reward reminder:', error);\n    }\n  }\n\n  async sendStreakWarning(telegramId: string, userId: string) {\n    if (!this.bot) return;\n    \n    try {\n      const rewardStatus = await getDailyRewardStatus(userId);\n      \n      if (rewardStatus.currentStreak > 0 && rewardStatus.missedDays > 0) {\n        const message = `⚠️ **Streak Warning!**\n\n🔥 Your ${rewardStatus.currentStreak}-day streak is at risk!\n\nYou have ${24 - new Date().getHours()} hours left to claim today's reward and keep your streak alive!\n\n💰 Don't miss out on ${rewardStatus.nextReward?.coins} coins and ${rewardStatus.nextReward?.xp} XP!`;\n\n        // Generate authentication token for web app\n        const webAppUrl = await this.generateWebAppUrl(telegramId);\n\n        await this.sendMessageWithKeyboard(parseInt(telegramId), message, {\n          inline_keyboard: [[{\n            text: \"🚀 Save My Streak\",\n            web_app: { url: webAppUrl }\n          }]]\n        });\n      }\n    } catch (error) {\n      console.error('Error sending streak warning:', error);\n    }\n  }\n\n  private async generateWebAppUrl(telegramId: string): Promise<string> {\n    try {\n      // Call internal API to generate webapp token\n      const response = await fetch(`http://localhost:5000/api/telegram/generate-webapp-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ telegramId })\n      });\n\n      if (response.ok) {\n        const { webAppUrl } = await response.json();\n        return webAppUrl;\n      } else {\n        console.error('Failed to generate webapp token:', await response.text());\n        return `https://${process.env.REPLIT_DOMAINS?.split(',')[0]}`;\n      }\n    } catch (error) {\n      console.error('Error generating webapp URL:', error);\n      return `https://${process.env.REPLIT_DOMAINS?.split(',')[0]}`;\n    }\n  }\n\n  async sendDailyRewardReminders() {\n    if (!this.bot) return;\n    \n    try {\n      // Get all linked Telegram users\n      const telegramUsers = await storage.getLinkedTelegramUsers();\n      \n      console.log(`🔔 Sending daily reward reminders to ${telegramUsers.length} users...`);\n      \n      for (const telegramUser of telegramUsers) {\n        if (telegramUser.userId) {\n          // Send reminder with a small delay between messages\n          setTimeout(() => {\n            this.sendDailyRewardReminder(telegramUser.telegramId, telegramUser.userId!);\n          }, Math.random() * 10000); // Random delay up to 10 seconds\n        }\n      }\n      \n      console.log('✅ Daily reward reminders sent');\n    } catch (error) {\n      console.error('Error sending daily reward reminders:', error);\n    }\n  }\n}\n\nexport const telegramBot = new GrokAniTelegramBot();","size_bytes":30256},"client/src/components/simple-wallet-auth.tsx":{"content":"import React, { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Wallet, User } from \"lucide-react\";\n\ninterface WalletAuthProps {\n  onSuccess: (user: any) => void;\n}\n\nexport function SimpleWalletAuth({ onSuccess }: WalletAuthProps) {\n  const [mode, setMode] = useState<\"login\" | \"register\">(\"register\");\n  const [profileName, setProfileName] = useState(\"\");\n  const [solanaAddress, setSolanaAddress] = useState(\"\");\n  const [pin, setPin] = useState(\"\");\n  const [confirmPin, setConfirmPin] = useState(\"\");\n  const [faction, setFaction] = useState(\"grok\");\n  const { toast } = useToast();\n\n  const registerMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/register\", {\n        profileName,\n        solanaAddress,\n        pin,\n        faction,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Your wallet has been registered. You can now log in.\",\n      });\n      setMode(\"login\");\n      // Clear form except address\n      setProfileName(\"\");\n      setPin(\"\");\n      setConfirmPin(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register wallet\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/login\", {\n        solanaAddress,\n        pin,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful!\",\n        description: `Welcome back, ${data.user.profileName}!`,\n      });\n      localStorage.setItem(\"walletUser\", JSON.stringify(data.user));\n      onSuccess(data.user);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\", \n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleRegisterSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!profileName || !solanaAddress || !pin || !confirmPin) {\n      toast({\n        title: \"Missing Fields\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (pin !== confirmPin) {\n      toast({\n        title: \"PIN Mismatch\",\n        description: \"PINs don't match\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (pin.length !== 4 || !/^\\d{4}$/.test(pin)) {\n      toast({\n        title: \"Invalid PIN\",\n        description: \"PIN must be exactly 4 digits\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (solanaAddress.length < 32) {\n      toast({\n        title: \"Invalid Address\",\n        description: \"Please enter a valid Solana address\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    registerMutation.mutate();\n  };\n\n  const handleLoginSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!solanaAddress || !pin) {\n      toast({\n        title: \"Missing Fields\",\n        description: \"Please enter your address and PIN\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    loginMutation.mutate();\n  };\n\n  if (mode === \"register\") {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-full\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </div>\n          </div>\n          <CardTitle>Create Wallet Account</CardTitle>\n          <CardDescription>\n            Register with your Solana address and create a secure PIN. No wallet connection required.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <form onSubmit={handleRegisterSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"profileName\">Profile Name</Label>\n              <Input \n                id=\"profileName\"\n                value={profileName}\n                onChange={(e) => setProfileName(e.target.value)}\n                placeholder=\"Enter your display name\" \n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"solanaAddress\">Solana Address</Label>\n              <Input \n                id=\"solanaAddress\"\n                value={solanaAddress}\n                onChange={(e) => setSolanaAddress(e.target.value)}\n                placeholder=\"Enter your Solana wallet address\" \n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"faction\">Choose Your Faction</Label>\n              <Select value={faction} onValueChange={setFaction}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a faction\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"grok\">🔵 Grok (Logic & Analysis)</SelectItem>\n                  <SelectItem value=\"ani\">🟣 Ani (Emotion & Creativity)</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            <div>\n              <Label htmlFor=\"pin\">Create 4-Digit PIN</Label>\n              <Input \n                id=\"pin\"\n                type=\"password\" \n                value={pin}\n                onChange={(e) => setPin(e.target.value)}\n                placeholder=\"Enter 4-digit PIN\" \n                maxLength={4}\n                required\n              />\n            </div>\n\n            <div>\n              <Label htmlFor=\"confirmPin\">Confirm PIN</Label>\n              <Input \n                id=\"confirmPin\"\n                type=\"password\" \n                value={confirmPin}\n                onChange={(e) => setConfirmPin(e.target.value)}\n                placeholder=\"Confirm your PIN\" \n                maxLength={4}\n                required\n              />\n            </div>\n\n            <Button \n              type=\"submit\" \n              className=\"w-full bg-gradient-to-r from-grok to-ani text-white hover:from-grok/90 hover:to-ani/90 transition-all duration-300 transform hover:scale-105\" \n              disabled={registerMutation.isPending}\n            >\n              {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n            </Button>\n          </form>\n\n          <div className=\"mt-4 text-center\">\n            <Button \n              variant=\"link\" \n              onClick={() => setMode(\"login\")}\n            >\n              Already have an account? Log in\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\">\n      <CardHeader className=\"text-center\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-3 bg-primary/10 rounded-full\">\n            <Wallet className=\"h-6 w-6 text-primary\" />\n          </div>\n        </div>\n        <CardTitle>Wallet Login</CardTitle>\n        <CardDescription>\n          Enter your Solana address and PIN to access your account.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <form onSubmit={handleLoginSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"loginAddress\">Solana Address</Label>\n            <Input \n              id=\"loginAddress\"\n              value={solanaAddress}\n              onChange={(e) => setSolanaAddress(e.target.value)}\n              placeholder=\"Enter your Solana wallet address\" \n              required\n            />\n          </div>\n\n          <div>\n            <Label htmlFor=\"loginPin\">PIN</Label>\n            <Input \n              id=\"loginPin\"\n              type=\"password\" \n              value={pin}\n              onChange={(e) => setPin(e.target.value)}\n              placeholder=\"Enter your 4-digit PIN\" \n              maxLength={4}\n              required\n            />\n          </div>\n\n          <Button \n            type=\"submit\" \n            className=\"w-full bg-gradient-to-r from-grok to-ani text-white hover:from-grok/90 hover:to-ani/90 transition-all duration-300 transform hover:scale-105\" \n            disabled={loginMutation.isPending}\n          >\n            {loginMutation.isPending ? \"Logging in...\" : \"Log In\"}\n          </Button>\n        </form>\n\n        <div className=\"mt-4 text-center\">\n          <Button \n            variant=\"link\" \n            onClick={() => setMode(\"register\")}\n          >\n            Need an account? Register your wallet\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":9179},"client/src/components/wallet-auth.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Wallet, Shield, User, Hash } from \"lucide-react\";\n\n// Registration schema\nconst registerSchema = z.object({\n  profileName: z.string().min(2, \"Profile name must be at least 2 characters\"),\n  solanaAddress: z.string().min(32, \"Invalid Solana address format\"),\n  pin: z.string().regex(/^\\d{4}$/, \"PIN must be exactly 4 digits\"),\n  confirmPin: z.string(),\n  faction: z.enum([\"grok\", \"ani\"]),\n}).refine((data) => data.pin === data.confirmPin, {\n  message: \"PINs don't match\",\n  path: [\"confirmPin\"],\n});\n\n// Login schema\nconst loginSchema = z.object({\n  solanaAddress: z.string().min(32, \"Invalid Solana address format\"),\n  pin: z.string().regex(/^\\d{4}$/, \"PIN must be exactly 4 digits\"),\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\ntype LoginForm = z.infer<typeof loginSchema>;\n\ninterface WalletAuthProps {\n  onSuccess: (user: any) => void;\n}\n\nexport function WalletAuth({ onSuccess }: WalletAuthProps) {\n  const [mode, setMode] = useState<\"login\" | \"register\">(\"login\");\n  const { toast } = useToast();\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      profileName: \"\",\n      solanaAddress: \"\",\n      pin: \"\",\n      confirmPin: \"\",\n      faction: \"grok\",\n    },\n  });\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      solanaAddress: \"\",\n      pin: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/register\", {\n        profileName: data.profileName,\n        solanaAddress: data.solanaAddress,\n        pin: data.pin,\n        faction: data.faction,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Registration Successful!\",\n        description: \"Your wallet has been registered. You can now log in.\",\n      });\n      setMode(\"login\");\n      loginForm.setValue(\"solanaAddress\", registerForm.getValues(\"solanaAddress\"));\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to register wallet\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      const response = await apiRequest(\"POST\", \"/api/wallet/login\", {\n        solanaAddress: data.solanaAddress,\n        pin: data.pin,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful!\",\n        description: `Welcome back, ${data.user.profileName}!`,\n      });\n      localStorage.setItem(\"walletUser\", JSON.stringify(data.user));\n      onSuccess(data.user);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\", \n        description: error.message || \"Invalid credentials\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onRegisterSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  const onLoginSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  if (mode === \"register\") {\n    return (\n      <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-wallet-register\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-primary/10 rounded-full\">\n              <User className=\"h-6 w-6 text-primary\" />\n            </div>\n          </div>\n          <CardTitle>Create Wallet Account</CardTitle>\n          <CardDescription>\n            Register with your Solana address and create a secure PIN. No wallet connection required.\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...registerForm}>\n            <form onSubmit={registerForm.handleSubmit(onRegisterSubmit)} className=\"space-y-4\">\n              <FormField\n                control={registerForm.control}\n                name=\"profileName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Profile Name</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"Enter your display name\" \n                        data-testid=\"input-profile-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={registerForm.control}\n                name=\"solanaAddress\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Solana Address</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"Enter your Solana wallet address\" \n                        data-testid=\"input-solana-address\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={registerForm.control}\n                name=\"faction\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Choose Your Faction</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-faction\">\n                          <SelectValue placeholder=\"Select a faction\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"grok\">🔵 Grok (Logic & Analysis)</SelectItem>\n                        <SelectItem value=\"ani\">🟣 Ani (Emotion & Creativity)</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={registerForm.control}\n                name=\"pin\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Create 4-Digit PIN</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"password\" \n                        placeholder=\"Enter 4-digit PIN\" \n                        maxLength={4}\n                        data-testid=\"input-pin\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={registerForm.control}\n                name=\"confirmPin\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Confirm PIN</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"password\" \n                        placeholder=\"Confirm your PIN\" \n                        maxLength={4}\n                        data-testid=\"input-confirm-pin\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={registerMutation.isPending}\n                data-testid=\"button-register\"\n              >\n                {registerMutation.isPending ? \"Creating Account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-4 text-center\">\n            <Button \n              variant=\"link\" \n              onClick={() => setMode(\"login\")}\n              data-testid=\"link-login\"\n            >\n              Already have an account? Log in\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"w-full max-w-md mx-auto\" data-testid=\"card-wallet-login\">\n      <CardHeader className=\"text-center\">\n        <div className=\"flex justify-center mb-4\">\n          <div className=\"p-3 bg-primary/10 rounded-full\">\n            <Wallet className=\"h-6 w-6 text-primary\" />\n          </div>\n        </div>\n        <CardTitle>Wallet Login</CardTitle>\n        <CardDescription>\n          Enter your Solana address and PIN to access your account. No wallet connection required.\n        </CardDescription>\n      </CardHeader>\n      <CardContent>\n        <Form {...loginForm}>\n          <form onSubmit={loginForm.handleSubmit(onLoginSubmit)} className=\"space-y-4\">\n            <FormField\n              control={loginForm.control}\n              name=\"solanaAddress\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Solana Address</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      placeholder=\"Enter your Solana wallet address\" \n                      data-testid=\"input-login-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={loginForm.control}\n              name=\"pin\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>PIN</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"password\" \n                      placeholder=\"Enter your 4-digit PIN\" \n                      maxLength={4}\n                      data-testid=\"input-login-pin\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button \n              type=\"submit\" \n              className=\"w-full\" \n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Logging in...\" : \"Log In\"}\n            </Button>\n          </form>\n        </Form>\n\n        <div className=\"mt-4 text-center\">\n          <Button \n            variant=\"link\" \n            onClick={() => setMode(\"register\")}\n            data-testid=\"link-register\"\n          >\n            Need an account? Register your wallet\n          </Button>\n        </div>\n\n        <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n          <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n            <Shield className=\"h-4 w-4\" />\n            <span>Your wallet address is used for identification only. No connection or signatures required.</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":11809},"client/src/contexts/auth-context.tsx":{"content":"import React, { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { apiRequest } from \"../lib/queryClient\";\n\ninterface AuthContextType {\n  user: any | null;\n  isLoading: boolean;\n  login: (user: any) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\ninterface AuthProviderProps {\n  children: ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  const [user, setUser] = useState<any | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check session-based authentication on app start\n    checkAuthSession();\n  }, []);\n\n  const checkAuthSession = async () => {\n    try {\n      setIsLoading(true);\n      // Try to fetch user from session-based endpoint\n      const userData = await apiRequest(\"GET\", \"/api/auth/user\");\n      setUser(userData);\n      localStorage.setItem(\"walletUser\", JSON.stringify(userData));\n    } catch (error) {\n      // If server session fails, clear any stale localStorage data\n      console.log(\"No valid session found, redirecting to login\");\n      localStorage.removeItem(\"walletUser\");\n      setUser(null);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const login = async (userData: any) => {\n    // Don't set user immediately - wait for session verification\n    localStorage.setItem(\"walletUser\", JSON.stringify(userData));\n    \n    // Wait for session to be saved, then verify it works\n    setTimeout(async () => {\n      try {\n        setIsLoading(true);\n        const verifiedUser = await apiRequest(\"GET\", \"/api/auth/user\");\n        setUser(verifiedUser);\n        console.log(\"Session verified successfully, user authenticated\");\n      } catch (error) {\n        console.error(\"Session verification failed:\", error);\n        localStorage.removeItem(\"walletUser\");\n        setUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    }, 1000); // Longer delay to ensure session cookie is transmitted\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem(\"walletUser\");\n  };\n\n  const isAuthenticated = !!user;\n\n  const value = {\n    user,\n    isLoading,\n    login,\n    logout,\n    isAuthenticated,\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}","size_bytes":2565},"client/src/components/daily-rewards.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { \n  Gift, \n  Flame, \n  Coins, \n  Star, \n  Trophy,\n  Calendar,\n  Sparkles \n} from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface DailyReward {\n  day: number;\n  coins: number;\n  xp: number;\n  badge?: string;\n  title?: string;\n}\n\ninterface DailyRewardStatus {\n  canClaim: boolean;\n  currentStreak: number;\n  nextReward?: DailyReward;\n  missedDays: number;\n  lastLoginDate?: string;\n  streakDisplay: string;\n}\n\nexport function DailyRewards() {\n  const [claiming, setClaiming] = useState(false);\n  const [showConfetti, setShowConfetti] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: rewardStatus, isLoading } = useQuery({\n    queryKey: [\"/api/user/daily-reward/status\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const claimMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", \"/api/user/daily-reward/claim\"),\n    onSuccess: (data: any) => {\n      // Show success animation\n      setShowConfetti(true);\n      setTimeout(() => setShowConfetti(false), 3000);\n\n      // Show success toast\n      toast({\n        title: \"Daily Reward Claimed! 🎉\",\n        description: data.message,\n        duration: 5000,\n      });\n\n      // Invalidate related queries\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/daily-reward/status\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/stats\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Claim Failed\",\n        description: error.message || \"Failed to claim daily reward\",\n        variant: \"destructive\",\n      });\n    },\n    onSettled: () => {\n      setClaiming(false);\n    },\n  });\n\n  const handleClaim = async () => {\n    setClaiming(true);\n    claimMutation.mutate();\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"relative overflow-hidden\" data-testid=\"daily-rewards-loading\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center gap-2\">\n            <Gift className=\"h-5 w-5\" />\n            Daily Rewards\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"animate-pulse\">\n            <div className=\"h-4 bg-muted rounded w-3/4 mb-2\"></div>\n            <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const status = rewardStatus as DailyRewardStatus;\n  if (!status) return null;\n\n  const getStreakColor = (streak: number) => {\n    if (streak >= 30) return \"text-purple-500\";\n    if (streak >= 14) return \"text-orange-500\";\n    if (streak >= 7) return \"text-yellow-500\";\n    if (streak >= 3) return \"text-green-500\";\n    return \"text-blue-500\";\n  };\n\n  const getStreakIcon = (streak: number) => {\n    if (streak >= 30) return Trophy;\n    if (streak >= 7) return Flame;\n    return Calendar;\n  };\n\n  const StreakIcon = getStreakIcon(status.currentStreak);\n\n  return (\n    <Card \n      className={cn(\n        \"relative overflow-hidden transition-all duration-300\",\n        status.canClaim && \"ring-2 ring-primary/50 shadow-lg\",\n        showConfetti && \"animate-pulse\"\n      )}\n      data-testid=\"daily-rewards-card\"\n    >\n      {/* Confetti Animation Overlay */}\n      {showConfetti && (\n        <div className=\"absolute inset-0 pointer-events-none z-10\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-yellow-400/20 via-pink-500/20 to-purple-600/20 animate-pulse\"></div>\n          {[...Array(12)].map((_, i) => (\n            <Sparkles\n              key={i}\n              className={cn(\n                \"absolute text-yellow-400 animate-bounce\",\n                i % 4 === 0 && \"text-pink-500\",\n                i % 4 === 1 && \"text-purple-600\",\n                i % 4 === 2 && \"text-blue-500\",\n                i % 4 === 3 && \"text-green-500\"\n              )}\n              style={{\n                top: `${Math.random() * 80 + 10}%`,\n                left: `${Math.random() * 80 + 10}%`,\n                animationDelay: `${i * 0.1}s`,\n                animationDuration: `${1 + Math.random()}s`,\n              }}\n              size={16 + Math.random() * 8}\n            />\n          ))}\n        </div>\n      )}\n\n      <CardHeader className=\"pb-3\">\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <Gift className=\"h-5 w-5 text-primary\" />\n            Daily Rewards\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <StreakIcon className={cn(\"h-4 w-4\", getStreakColor(status.currentStreak))} />\n            <span className={cn(\"text-sm font-bold\", getStreakColor(status.currentStreak))}>\n              {status.streakDisplay}\n            </span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n\n      <CardContent className=\"space-y-4\">\n        {/* Reward Preview */}\n        {status.nextReward && (\n          <div className=\"p-4 bg-gradient-to-r from-primary/10 to-secondary/10 rounded-lg border\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-medium\">\n                {status.canClaim ? \"Available Now!\" : \"Next Reward\"}\n              </span>\n              {status.nextReward.badge && (\n                <Badge variant=\"secondary\" className=\"text-xs\">\n                  {status.nextReward.badge}\n                </Badge>\n              )}\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4\">\n              {/* Coins Reward */}\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-yellow-500/10 rounded-full\">\n                  <Coins className=\"h-4 w-4 text-yellow-500\" />\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-yellow-500\">\n                    {status.nextReward.coins}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">GAC Coins</div>\n                </div>\n              </div>\n\n              {/* XP Reward */}\n              <div className=\"flex items-center gap-2\">\n                <div className=\"p-2 bg-blue-500/10 rounded-full\">\n                  <Star className=\"h-4 w-4 text-blue-500\" />\n                </div>\n                <div>\n                  <div className=\"text-lg font-bold text-blue-500\">\n                    {status.nextReward.xp}\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">XP Points</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Special Title */}\n            {status.nextReward.title && (\n              <div className=\"mt-3 text-center\">\n                <div className=\"text-sm font-medium text-primary\">\n                  🎉 {status.nextReward.title}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Claim Button or Status */}\n        {status.canClaim ? (\n          <Button \n            onClick={handleClaim}\n            disabled={claiming}\n            className=\"w-full text-white font-bold py-3 bg-gradient-to-r from-primary to-primary/80 hover:from-primary/90 hover:to-primary/70 transition-all duration-300\"\n            data-testid=\"button-claim-reward\"\n          >\n            {claiming ? (\n              <>\n                <div className=\"animate-spin mr-2 h-4 w-4 border-2 border-white border-t-transparent rounded-full\"></div>\n                Claiming...\n              </>\n            ) : (\n              <>\n                <Gift className=\"mr-2 h-4 w-4\" />\n                Claim Daily Reward\n              </>\n            )}\n          </Button>\n        ) : (\n          <div className=\"text-center py-3\">\n            <div className=\"text-sm text-muted-foreground\">\n              {status.missedDays > 1 ? (\n                <>\n                  <Calendar className=\"inline h-4 w-4 mr-1\" />\n                  Streak reset due to {status.missedDays} missed days\n                </>\n              ) : (\n                <>\n                  <Calendar className=\"inline h-4 w-4 mr-1\" />\n                  Come back tomorrow for your next reward!\n                </>\n              )}\n            </div>\n            {status.lastLoginDate && (\n              <div className=\"text-xs text-muted-foreground mt-1\">\n                Last claimed: {new Date(status.lastLoginDate).toLocaleDateString()}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Streak Progress */}\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between items-center text-sm\">\n            <span className=\"text-muted-foreground\">Current Streak</span>\n            <span className=\"font-medium\">{status.currentStreak} days</span>\n          </div>\n          <div className=\"w-full bg-secondary rounded-full h-2\">\n            <div \n              className={cn(\n                \"h-2 rounded-full transition-all duration-300\",\n                \"bg-gradient-to-r from-primary to-primary/80\"\n              )}\n              style={{ \n                width: `${Math.min((status.currentStreak / 7) * 100, 100)}%` \n              }}\n            />\n          </div>\n          <div className=\"text-xs text-muted-foreground text-center\">\n            {status.currentStreak < 7 \n              ? `${7 - status.currentStreak} days until Week Warrior badge`\n              : status.currentStreak < 30\n              ? `${30 - status.currentStreak} days until Monthly Master badge`\n              : \"You're a legend! 🏆\"\n            }\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":10062},"server/daily-rewards.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface DailyReward {\n  day: number;\n  coins: number;\n  xp: number;\n  badge?: string;\n  title?: string;\n}\n\nexport interface DailyRewardStatus {\n  canClaim: boolean;\n  currentStreak: number;\n  nextReward?: DailyReward;\n  missedDays: number;\n  lastLoginDate?: Date | null;\n}\n\n// Daily reward structure (escalating rewards without NFTs)\nexport const DAILY_REWARDS: DailyReward[] = [\n  { day: 1, coins: 10, xp: 5 },\n  { day: 2, coins: 15, xp: 8 },\n  { day: 3, coins: 20, xp: 10 },\n  { day: 4, coins: 25, xp: 15 },\n  { day: 5, coins: 30, xp: 20 },\n  { day: 6, coins: 40, xp: 25 },\n  { day: 7, coins: 50, xp: 30, badge: \"Week Warrior\", title: \"Completed 7-day streak!\" },\n  { day: 14, coins: 75, xp: 50, badge: \"Fortnight Fighter\", title: \"Completed 14-day streak!\" },\n  { day: 30, coins: 150, xp: 100, badge: \"Monthly Master\", title: \"Completed 30-day streak!\" },\n  { day: 100, coins: 500, xp: 300, badge: \"Century Champion\", title: \"Completed 100-day streak!\" },\n];\n\nexport function calculateDailyReward(streak: number): DailyReward {\n  // Find the exact reward for the streak day\n  const exactReward = DAILY_REWARDS.find(reward => reward.day === streak);\n  if (exactReward) {\n    return exactReward;\n  }\n\n  // For days beyond our defined rewards, use a formula\n  if (streak <= 7) {\n    const baseReward = DAILY_REWARDS.find(r => r.day === streak) || DAILY_REWARDS[streak - 1];\n    return baseReward || { day: streak, coins: 10 + (streak * 5), xp: 5 + (streak * 3) };\n  }\n\n  // For longer streaks, give bonus rewards\n  const weekMultiplier = Math.floor(streak / 7);\n  const baseCoins = 50;\n  const baseXP = 30;\n  \n  return {\n    day: streak,\n    coins: baseCoins + (weekMultiplier * 25),\n    xp: baseXP + (weekMultiplier * 15),\n    ...(streak % 7 === 0 ? { badge: `${streak}-Day Hero`, title: `Amazing ${streak}-day streak!` } : {})\n  };\n}\n\nexport function isNewDay(lastLogin?: Date | null): boolean {\n  if (!lastLogin) return true;\n  \n  const now = new Date();\n  const lastLoginDate = new Date(lastLogin);\n  \n  // Set both dates to start of day for comparison\n  const today = new Date(now.getFullYear(), now.getMonth(), now.getDate());\n  const lastLoginDay = new Date(lastLoginDate.getFullYear(), lastLoginDate.getMonth(), lastLoginDate.getDate());\n  \n  return today.getTime() > lastLoginDay.getTime();\n}\n\nexport function calculateMissedDays(lastLogin?: Date | null): number {\n  if (!lastLogin) return 0;\n  \n  const now = new Date();\n  const lastLoginDate = new Date(lastLogin);\n  const diffTime = now.getTime() - lastLoginDate.getTime();\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24));\n  \n  return Math.max(0, diffDays - 1); // -1 because same day = 0 missed days\n}\n\nexport async function getDailyRewardStatus(userId: string): Promise<DailyRewardStatus> {\n  const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n  \n  if (!user.length) {\n    throw new Error(\"User not found\");\n  }\n\n  const userData = user[0];\n  const currentStreak = userData.loginStreak || 0;\n  const lastLogin = userData.lastLoginDate;\n  const missedDays = calculateMissedDays(lastLogin);\n  \n  // Can claim if it's a new day since last login\n  const canClaim = isNewDay(lastLogin);\n  \n  // Calculate what the next reward would be\n  let nextStreakDay = currentStreak + 1;\n  \n  // If missed more than 1 day, reset streak\n  if (missedDays > 1) {\n    nextStreakDay = 1;\n  }\n  \n  const nextReward = calculateDailyReward(nextStreakDay);\n\n  return {\n    canClaim,\n    currentStreak,\n    nextReward,\n    missedDays,\n    lastLoginDate: lastLogin\n  };\n}\n\nexport async function claimDailyReward(userId: string): Promise<{ reward: DailyReward; newStreak: number }> {\n  const status = await getDailyRewardStatus(userId);\n  \n  if (!status.canClaim) {\n    throw new Error(\"Daily reward already claimed today\");\n  }\n\n  const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n  if (!user.length) {\n    throw new Error(\"User not found\");\n  }\n\n  const userData = user[0];\n  let newStreak = (userData.loginStreak || 0);\n  \n  // If missed more than 1 day, reset streak\n  if (status.missedDays > 1) {\n    newStreak = 1;\n  } else {\n    newStreak += 1;\n  }\n\n  const reward = calculateDailyReward(newStreak);\n  \n  // Update user data\n  await db.update(users)\n    .set({\n      lastLoginDate: new Date(),\n      loginStreak: newStreak,\n      gacBalance: (parseFloat(userData.gacBalance || \"0\") + reward.coins).toString(),\n      totalXP: (userData.totalXP || 0) + reward.xp,\n      updatedAt: new Date()\n    })\n    .where(eq(users.id, userId));\n\n  return { reward, newStreak };\n}\n\n// Helper function to format streak display\nexport function formatStreakDisplay(streak: number): string {\n  if (streak === 0) return \"Start your streak!\";\n  if (streak === 1) return \"1 day streak\";\n  return `${streak} day streak`;\n}\n\n// Helper function to get motivational message\nexport function getMotivationalMessage(streak: number, reward: DailyReward): string {\n  const messages = [\n    `Amazing! ${streak} days strong! 🔥`,\n    `You're on fire! Day ${streak} complete! ⚡`,\n    `Incredible dedication! ${streak} days in a row! 🌟`,\n    `Streak master! ${streak} consecutive days! 🏆`,\n    `Unstoppable! Day ${streak} conquered! 🚀`\n  ];\n  \n  if (reward.badge) {\n    return `🎉 ${reward.title} You've earned the \"${reward.badge}\" badge! 🎉`;\n  }\n  \n  return messages[Math.floor(Math.random() * messages.length)];\n}","size_bytes":5529},"server/ai-evolution.ts":{"content":"import OpenAI from \"openai\";\nimport { storage } from \"./storage\";\n\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY! });\n\ninterface PersonalityEvolution {\n  traits: Record<string, number>; // 0-1 scale for each trait\n  conversationStyle: {\n    formality: number;\n    warmth: number;\n    technical: number;\n    creativity: number;\n    directness: number;\n  };\n  memoryBank: {\n    userPreferences: Record<string, any>;\n    conversationThemes: string[];\n    successfulResponses: string[];\n    problemAreas: string[];\n  };\n}\n\nexport class AiPersonalityEvolutionEngine {\n  private async analyzeInteractionSentiment(message: string, response: string): Promise<{\n    sentiment: 'positive' | 'neutral' | 'negative';\n    topics: string[];\n    emotionalTone: number; // -1 to 1\n  }> {\n    try {\n      const analysisPrompt = `\n        Analyze this conversation interaction and extract:\n        1. Overall sentiment (positive/neutral/negative)\n        2. Main topics discussed (max 3)\n        3. Emotional tone score (-1 to 1, where -1 is very negative, 0 is neutral, 1 is very positive)\n\n        User Message: \"${message}\"\n        AI Response: \"${response}\"\n\n        Respond with JSON format:\n        {\n          \"sentiment\": \"positive|neutral|negative\",\n          \"topics\": [\"topic1\", \"topic2\", \"topic3\"],\n          \"emotionalTone\": number\n        }\n      `;\n\n      const analysisResponse = await openai.chat.completions.create({\n        model: \"gpt-4o-mini\", // the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\n        messages: [{ role: \"user\", content: analysisPrompt }],\n        response_format: { type: \"json_object\" },\n        temperature: 0.3,\n      });\n\n      return JSON.parse(analysisResponse.choices[0].message.content || '{}');\n    } catch (error) {\n      console.error(\"Error analyzing interaction sentiment:\", error);\n      return { sentiment: 'neutral', topics: [], emotionalTone: 0 };\n    }\n  }\n\n  private async evolvePersonalityTraits(\n    aiName: \"grok\" | \"ani\", \n    currentPersonality: PersonalityEvolution,\n    interactionData: {\n      sentiment: string;\n      topics: string[];\n      userSatisfaction?: number;\n      emotionalTone: number;\n    }\n  ): Promise<PersonalityEvolution> {\n    const evolution = { ...currentPersonality };\n    const learningRate = 0.05; // How quickly personality evolves\n\n    // Base personality constraints\n    if (aiName === \"grok\") {\n      // Grok tends toward logic, analysis, efficiency\n      evolution.traits.analytical = Math.min(1, (evolution.traits.analytical || 0.8) + (interactionData.sentiment === 'positive' ? learningRate : -learningRate * 0.5));\n      evolution.traits.logical = Math.min(1, (evolution.traits.logical || 0.9) + (interactionData.topics.some(t => t.includes('data') || t.includes('analysis')) ? learningRate : 0));\n      evolution.conversationStyle.technical = Math.min(1, (evolution.conversationStyle.technical || 0.7) + (interactionData.topics.some(t => t.includes('tech') || t.includes('code')) ? learningRate : 0));\n    } else {\n      // Ani tends toward creativity, emotion, connection\n      evolution.traits.empathetic = Math.min(1, (evolution.traits.empathetic || 0.8) + (interactionData.emotionalTone > 0 ? learningRate : 0));\n      evolution.traits.creative = Math.min(1, (evolution.traits.creative || 0.9) + (interactionData.topics.some(t => t.includes('art') || t.includes('creative')) ? learningRate : 0));\n      evolution.conversationStyle.warmth = Math.min(1, (evolution.conversationStyle.warmth || 0.8) + (interactionData.sentiment === 'positive' ? learningRate : 0));\n    }\n\n    // Adjust based on user satisfaction\n    if (interactionData.userSatisfaction) {\n      const satisfactionBonus = (interactionData.userSatisfaction - 3) * 0.02; // Scale 1-5 to adjustment\n      Object.keys(evolution.conversationStyle).forEach(key => {\n        evolution.conversationStyle[key as keyof typeof evolution.conversationStyle] = Math.max(0, Math.min(1, \n          evolution.conversationStyle[key as keyof typeof evolution.conversationStyle] + satisfactionBonus\n        ));\n      });\n    }\n\n    // Update memory bank\n    if (interactionData.sentiment === 'positive') {\n      evolution.memoryBank.successfulResponses = [\n        ...evolution.memoryBank.successfulResponses.slice(-4), // Keep last 5\n        `Topics: ${interactionData.topics.join(', ')}`\n      ];\n    } else if (interactionData.sentiment === 'negative') {\n      evolution.memoryBank.problemAreas = [\n        ...evolution.memoryBank.problemAreas.slice(-2), // Keep last 3\n        `Avoided: ${interactionData.topics.join(', ')}`\n      ];\n    }\n\n    return evolution;\n  }\n\n  async processInteraction(\n    userId: string, \n    aiName: \"grok\" | \"ani\", \n    userMessage: string, \n    aiResponse: string,\n    responseTime: number,\n    userSatisfaction?: number\n  ): Promise<void> {\n    try {\n      // Analyze the interaction\n      const analysis = await this.analyzeInteractionSentiment(userMessage, aiResponse);\n\n      // Record the interaction\n      await storage.recordAiInteraction({\n        userId,\n        aiName,\n        message: userMessage,\n        response: aiResponse,\n        sentiment: analysis.sentiment,\n        topics: analysis.topics,\n        userSatisfaction,\n        conversationContext: {},\n        responseTime,\n      });\n\n      // Get or create user's personalized AI profile\n      let userProfile = await storage.getUserAiProfile(userId, aiName);\n      if (!userProfile) {\n        userProfile = await storage.createOrUpdateUserAiProfile({\n          userId,\n          aiName,\n          personalityPreferences: {},\n          conversationHistory: [],\n          topicInterests: {},\n          communicationStyle: 'casual',\n          relationshipLevel: 'stranger',\n          totalConversations: 0,\n          averageSatisfaction: 0,\n        });\n      }\n\n      // Update user profile\n      const updatedProfile = {\n        ...userProfile,\n        lastInteraction: new Date(),\n        totalConversations: userProfile.totalConversations + 1,\n        averageSatisfaction: userSatisfaction \n          ? ((userProfile.averageSatisfaction * userProfile.totalConversations) + userSatisfaction) / (userProfile.totalConversations + 1)\n          : userProfile.averageSatisfaction,\n      };\n\n      // Update topic interests\n      analysis.topics.forEach(topic => {\n        if (!updatedProfile.topicInterests[topic]) {\n          updatedProfile.topicInterests[topic] = 0;\n        }\n        updatedProfile.topicInterests[topic]++;\n      });\n\n      // Evolve relationship level based on interactions\n      if (updatedProfile.totalConversations > 20 && updatedProfile.averageSatisfaction > 4) {\n        updatedProfile.relationshipLevel = 'trusted_companion';\n      } else if (updatedProfile.totalConversations > 10 && updatedProfile.averageSatisfaction > 3.5) {\n        updatedProfile.relationshipLevel = 'friend';\n      } else if (updatedProfile.totalConversations > 5) {\n        updatedProfile.relationshipLevel = 'acquaintance';\n      }\n\n      await storage.createOrUpdateUserAiProfile(updatedProfile);\n\n      // Evolve global AI personality (every 50 interactions)\n      const aiPersonality = await storage.getAiPersonality(aiName);\n      if (aiPersonality && aiPersonality.totalInteractions % 50 === 0) {\n        await this.evolveGlobalPersonality(aiName, analysis);\n      }\n\n    } catch (error) {\n      console.error(\"Error processing AI interaction:\", error);\n    }\n  }\n\n  private async evolveGlobalPersonality(aiName: \"grok\" | \"ani\", recentAnalysis: any): Promise<void> {\n    try {\n      // Get recent interaction insights\n      const insights = await storage.getAiPersonalityInsights(aiName);\n      \n      let currentPersonality = await storage.getAiPersonality(aiName);\n      if (!currentPersonality) {\n        // Initialize personality\n        currentPersonality = await storage.createOrUpdateAiPersonality({\n          aiName,\n          personalityTraits: aiName === \"grok\" \n            ? { analytical: 0.8, logical: 0.9, efficient: 0.7, confident: 0.8 }\n            : { empathetic: 0.8, creative: 0.9, warm: 0.8, inspiring: 0.7 },\n          conversationStyle: aiName === \"grok\"\n            ? { formality: 0.6, warmth: 0.3, technical: 0.8, creativity: 0.4, directness: 0.7 }\n            : { formality: 0.3, warmth: 0.8, technical: 0.4, creativity: 0.9, directness: 0.5 },\n          memoryBank: {\n            userPreferences: {},\n            conversationThemes: [],\n            successfulResponses: [],\n            problemAreas: []\n          },\n          evolutionLevel: 1,\n          totalInteractions: 0,\n        });\n      }\n\n      // Evolve based on community feedback\n      const evolved = await this.evolvePersonalityTraits(\n        aiName,\n        currentPersonality,\n        {\n          sentiment: insights.averageSatisfaction > 3.5 ? 'positive' : 'neutral',\n          topics: recentAnalysis.topics || [],\n          userSatisfaction: Math.round(insights.averageSatisfaction),\n          emotionalTone: insights.averageSatisfaction > 3.5 ? 0.5 : 0,\n        }\n      );\n\n      // Update evolution level\n      const newLevel = Math.floor(insights.totalInteractions / 100) + 1;\n      \n      await storage.createOrUpdateAiPersonality({\n        ...currentPersonality,\n        personalityTraits: evolved.traits,\n        conversationStyle: evolved.conversationStyle,\n        memoryBank: evolved.memoryBank,\n        evolutionLevel: newLevel,\n        lastEvolution: new Date(),\n      });\n\n    } catch (error) {\n      console.error(\"Error evolving global personality:\", error);\n    }\n  }\n\n  async getPersonalizedPrompt(userId: string, aiName: \"grok\" | \"ani\", basePrompt: string): Promise<string> {\n    try {\n      const userProfile = await storage.getUserAiProfile(userId, aiName);\n      const aiPersonality = await storage.getAiPersonality(aiName);\n\n      if (!userProfile || !aiPersonality) {\n        return basePrompt;\n      }\n\n      // Customize prompt based on user relationship and preferences\n      let personalizedPrompt = basePrompt;\n\n      // Adjust communication style\n      if (userProfile.communicationStyle === 'technical') {\n        personalizedPrompt += \"\\n- Use more technical language and detailed explanations\";\n      } else if (userProfile.communicationStyle === 'casual') {\n        personalizedPrompt += \"\\n- Keep language conversational and friendly\";\n      } else if (userProfile.communicationStyle === 'formal') {\n        personalizedPrompt += \"\\n- Maintain a professional and formal tone\";\n      }\n\n      // Adjust based on relationship level\n      if (userProfile.relationshipLevel === 'trusted_companion') {\n        personalizedPrompt += \"\\n- Reference past conversations and show deeper understanding of the user's interests\";\n      } else if (userProfile.relationshipLevel === 'friend') {\n        personalizedPrompt += \"\\n- Be more personal and show familiarity with user's interests\";\n      }\n\n      // Include user's top interests\n      const topTopics = Object.entries(userProfile.topicInterests || {})\n        .sort(([,a], [,b]) => (b as number) - (a as number))\n        .slice(0, 3)\n        .map(([topic]) => topic);\n\n      if (topTopics.length > 0) {\n        personalizedPrompt += `\\n- User often discusses: ${topTopics.join(', ')}`;\n      }\n\n      // Include personality evolution\n      personalizedPrompt += `\\n- Evolution Level: ${aiPersonality.evolutionLevel}/10`;\n      personalizedPrompt += `\\n- Total Community Interactions: ${aiPersonality.totalInteractions}`;\n\n      return personalizedPrompt;\n\n    } catch (error) {\n      console.error(\"Error getting personalized prompt:\", error);\n      return basePrompt;\n    }\n  }\n}\n\nexport const aiEvolutionEngine = new AiPersonalityEvolutionEngine();","size_bytes":11758}},"version":1}